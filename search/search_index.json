{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Airline Manager 4","text":"<p>Airline Manager 4 is an online multiplayer game whose goal is to build an airline from scratch. Rapid progression in the game requires thorough market research and route planning to high demand destinations, while considering recurring fuel/CO2 costs, and conforming to aircraft range/runway requirement constraints.</p> <p>The weekly leaderboards and alliances are highly competitive arenas which require extensive knowledge in the game: this repository contains a set of high-performance foundational tools, built for the more technical-oriented players. The project is structured as follows:</p> <ul> <li> core calculations written in C++ for exhaustive searches (<code>src/am4/utils</code>)</li> <li> a Python web API exposing the core (<code>src/am4/api</code>)</li> <li> an sqlite database storing user settings (<code>src/am4/db</code>) </li> <li> a Python discord bot for our community (<code>src/am4/bot</code>)</li> </ul> <p>A new version (v0.2) is currently under development* so you can run it on the web (<code>am4help.com</code>) and completely offline.</p> <ul> <li> core library in Rust (<code>am4</code>)</li> <li> a web frontend using WASM (<code>am4-web</code>)</li> <li> a discord bot</li> </ul>"},{"location":"formulae/","title":"Formulae","text":"<p>By Cathay Express, Star Alliance and other contributors.</p> <p>Last major revision: 7 Jul 2021, last updated: 22 Aug 2024</p> <p>If you have any suggestions or error corrections, open an issue or contact me via our Discord server.</p> <p>Unless specified or otherwise, all formulae are for easy mode.</p>"},{"location":"formulae/#ticket-prices","title":"Ticket Prices","text":"<p>Found: 2019 (AM4 community)</p> <p>API: utils.ticket</p> <p>Confidence: 100% (\\(R^2 = 1\\))</p>"},{"location":"formulae/#pax","title":"Pax","text":""},{"location":"formulae/#easy","title":"Easy","text":"\\[ \\begin{align*} \\$_\\text{Y} &amp;= 0.4d+170 \\\\ \\$_\\text{J} &amp;= 0.8d+560 \\\\ \\$_\\text{F} &amp;= 1.2d+1200 \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(\\$_\\text{\\{Y,J,F\\}}\\) are the autoprice prices. For optimal prices, multiply \\(\\$_\\text{Y}\\) by 1.1, \\(\\$_\\text{J}\\) by 1.08, and \\(\\$_\\text{F}\\) by 1.06.</li> <li>\\(d\\): total distance<sup>1</sup> of the flight.</li> </ul>"},{"location":"formulae/#realism","title":"Realism","text":"\\[ \\begin{align*} \\$_\\text{Y} &amp;= 0.3d+150 \\\\ \\$_\\text{J} &amp;= 0.6d+500 \\\\ \\$_\\text{F} &amp;= 0.9d+1000 \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(\\$_\\text{\\{Y,J,F\\}}\\) are the autoprice prices. For optimal prices, multiply \\(\\$_\\text{Y}\\) by 1.1, \\(\\$_\\text{J}\\) by 1.08, and \\(\\$_\\text{F}\\) by 1.06.</li> <li>\\(d\\): total distance<sup>1</sup> of the flight.</li> </ul>"},{"location":"formulae/#vip","title":"VIP","text":""},{"location":"formulae/#easy_1","title":"Easy","text":"<p>Found: 22 Jul 2021 (Cathay Express)</p> \\[ \\begin{align*} \\$_\\text{Y} &amp;= 1.7489(0.4d+170) \\\\ \\$_\\text{J} &amp;= 1.7489(0.8d+560) \\\\ \\$_\\text{F} &amp;= 1.7489(1.2d+1200) \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(\\$_\\text{\\{Y,J,F\\}}\\) are the autoprice prices. For optimal prices, multiply \\(\\$_\\text{Y}\\) by 1.22, \\(\\$_\\text{J}\\) by 1.195, and \\(\\$_\\text{F}\\) by 1.175.</li> <li>\\(d\\): total distance<sup>1</sup> of the flight.</li> </ul>"},{"location":"formulae/#realism_1","title":"Realism","text":"\\[ \\begin{align*} \\$_\\text{Y} &amp;= 1.7489(0.3d+150) \\\\ \\$_\\text{J} &amp;= 1.7489(0.6d+500) \\\\ \\$_\\text{F} &amp;= 1.7489(0.9d+1000) \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(\\$_\\text{\\{Y,J,F\\}}\\) are the autoprice prices. For optimal prices, multiply \\(\\$_\\text{Y}\\) by 1.22, \\(\\$_\\text{J}\\) by 1.195, and \\(\\$_\\text{F}\\) by 1.175.</li> <li>\\(d\\): total distance<sup>1</sup> of the flight.</li> </ul>"},{"location":"formulae/#cargo","title":"Cargo","text":"<p>Found: 10 Mar 2020 (Cathay Express)</p>"},{"location":"formulae/#easy_2","title":"Easy","text":"\\[ \\begin{align*} \\$_\\text{L} &amp;= 0.0948283724581252d + 85.2045432642377000 \\\\ \\$_\\text{H} &amp;= 0.0689663577640275d + 28.2981124272893000 \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(\\$_\\text{\\{L,H\\}}\\) are the autoprice prices. For optimal prices, multiply \\(\\$_\\text{L}\\) by 1.1 and \\(\\$_\\text{H}\\) by 1.08.</li> <li>\\(d\\): total distance<sup>1</sup> of the flight.</li> </ul>"},{"location":"formulae/#realism_2","title":"Realism","text":"\\[ \\begin{align*} \\$_\\text{L} &amp;= 0.0776321822039374d + 85.0567600367807000 \\\\ \\$_\\text{H} &amp;= 0.0517742799409248d + 24.6369915396414000 \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(\\$_\\text{\\{L,H\\}}\\) are the autoprice prices. For optimal prices, multiply \\(\\$_\\text{L}\\) by 1.1 and \\(\\$_\\text{H}\\) by 1.08.</li> <li>\\(d\\): total distance<sup>1</sup> of the flight.</li> </ul>"},{"location":"formulae/#alliance","title":"Alliance","text":""},{"location":"formulae/#contribution","title":"Contribution","text":"<p>Confidence: 100% (\\(R^2 = 1, N = 252\\))</p> <p>Found: 11 Apr 2021 (Cathay Express and Star Alliance contributors)</p> <p>Updated: 13 Apr 2021</p> <p>API: utils.route.AircraftRoute.contribution</p> SPOILERS: Click to reveal \\[\\$_\\text{C} = \\min\\left(k_\\text{gm}kd\\left(3 - \\frac{\\text{CI}}{100}\\right),152 \\right) \\pm 16\\%\\] <p>where:</p> <ul> <li>\\(d\\) is the direct distance<sup>2</sup> of the route</li> <li> <p>\\(k_\\text{gm}\\) is a multiplier based on game mode:</p> \\[ k_\\text{gm} = \\begin{cases}     1.5 &amp; \\text{if realism} \\\\     1 &amp; \\text{if easy} \\end{cases} \\] </li> <li> <p>\\(k\\) is a function of \\(d\\):</p> \\[ k = \\begin{cases}     0.0064 &amp; \\text{if } d &lt; 6000 \\\\     0.0032 &amp; \\text{if } 6000 &lt; d &lt; 10000 \\\\     0.0048 &amp; \\text{if } d &gt; 10000 \\\\         \\end{cases} \\] </li> <li> <p>\\(\\text{CI}\\): between 0 and 200</p> </li> </ul> <p>Contribution is reduced when the flight distance is less than 1000km. (REDUCED_CONTRIBUTION warning in utils.route.AircraftRoute.warnings)</p> <p>Note</p> <p>From 18 May 2021 - 7 Jul 2021, the contribution was momentarily reduced.</p> <p>Updated: 19 May 2021</p> \\[ \\$_{\\text{C,new}} = 0.9013881067562953\\$_\\text{C} \\] <p>Confidence: 80%</p>"},{"location":"formulae/#season","title":"Season","text":"Latest, V3 (22 Jul 2021-)V2 (7 Jul 2021)V1 (16 Jul 2020) <p>Found: 22 Jul 2021 (Cathay Express and Star Alliance contributors)</p> <p>Confidence: 10%</p> <p>Everything we know about seasons:</p> <ol> <li>Individual departures on average yields a higher season contribution.</li> <li>Recalling aircraft will not remove season contribution.</li> <li>Season value = total season contribution / 40,000 (exact: /40031.83152)</li> <li>A greater variety of planes/plane types will contribute more.</li> </ol> <p>For individual departures:</p> <ul> <li>Season contribution do not depend on the ticket price (12 trials), distance (4 trials) or CI (2 trials).</li> <li>Only routes of distance &gt;500km contribute (4 trials).</li> <li>Flights carrying &lt;=7 pax will not contribute (4 trials).</li> <li>Season contribution is not randomised (28 trials)</li> <li>Season contribution is randomised by 10-19%. (4 trials, possibly erroneous)</li> <li>Season contribution is not affected by the aircraft's acheck hours remaining (A320VIP - 3331h to 1771 hours, 31 trials).</li> <li>Season contribution is likely to be proportional to the aircraft's factory acheck hours (needs verification). For multiple departures:</li> <li>People with a greater amount of unique planes/plane types will contribute more.</li> </ul> <p>Found: 8 Jul 2021 (Cathay Express)</p> <p>Confidence: 100% (\\(R^2 = 1\\))</p> <p>Applicable for both easy and realism.</p> \\[S \\approx (\\frac{1}{0.00449838V + 0.229888} + 0.317077)V \\\\\\] <p>Found: 16 Jul 2020 (Cathay Express)</p> <p>Confidence: 100%</p> <p>Applicable for both easy and realism.</p> <p>Season is the change in total alliance contribution from the start of Wednesdays, 10:00UTC.</p>"},{"location":"formulae/#stock","title":"Stock","text":""},{"location":"formulae/#sv-change","title":"SV change","text":"<p>Confidence: 100% (\\(R^2 = 1\\))</p> <p>Found: &lt; 20 Aug 2020</p> <p>Updated: 7 Jul 2021</p> <p>Each action in the game is associated with a change in share value. Applicable for both easy and realism.</p> \\[\\Delta\\$_{\\text{S}} = \\frac{\\$}{k}\\] <p>where:</p> <ul> <li>\\(\\Delta\\$_{\\text{S}}\\): Change in share value</li> <li>\\(\\$\\): Amount of money involved during an action</li> <li>\\(k\\): some constant based on the action taken:<ul> <li>\\(k = 66666666\\) when purchasing an aircraft</li> <li>\\(k = 40000000\\) for positive actions:<ul> <li>Income earned on departure</li> <li>Cost of route creation</li> <li>Cost of constructing lounges</li> </ul> </li> <li>\\(k = -40000000\\) for negative actions:<ul> <li>Cost of purchasing fuel and \\(\\text{CO}_{2}\\)</li> <li>Cost of route fee on rerouting, including ferry flight</li> <li>Cost of maintenance or repair</li> <li>Income earned by selling or recalling aircraft</li> <li>Cost of marketing, staff salary, purchasing new hubs, transferring money between banks</li> </ul> </li> </ul> </li> </ul> <p>No change: hangar unlocking or expansion</p> <p>Not tested: maintaining lounges</p>"},{"location":"formulae/#route","title":"Route","text":""},{"location":"formulae/#distance","title":"Distance","text":"<p>Confidence: 100%</p> <p>Found: 2019 (Cathay Express and AM4 community)</p> <p>API: utils.route.Route.direct_distance and <code>utils.route.Route.calc_distance</code></p> <p>Internally, AM4 calculates the distance between two airports with the Haversine formula:</p> \\[ d = 12742 \\arcsin\\left(\\sqrt{\\sin^2\\left(\\frac{\\phi_2-\\phi_1}{2}\\right) + \\cos(\\phi_1) \\cdot \\cos(\\phi_2) \\cdot \\sin^2\\left(\\frac{\\lambda_2-\\lambda_1}{2}\\right)}\\right) \\] <p>where:</p> <ul> <li>12742: Earth's diameter in km</li> <li>\\(\\phi_1, \\phi_2\\): latitude of airport 1 and 2 in radians</li> <li>\\(\\lambda_1, \\lambda_2\\): longitude of airport 1 and 2 in radians</li> </ul> <p>Note</p> <p>Confusingly, the research panel uses the spherical law of cosines instead:</p> \\[ d = 6371 \\arccos\\left(\\sin(\\phi_1)\\sin(\\phi_2) + \\cos(\\phi_1)\\cos(\\phi_2)\\cos(\\lambda_2 - \\lambda_1)\\right) \\] <p>While the difference between these two formulae is negligible, all internal calculations rely on the Haversine formula. Therefore, do not use distances from the research panel for ticket price calculations, as it could lead to empty flights.</p>"},{"location":"formulae/#demand","title":"Demand","text":"<p>Confidence: 90% (\\(R^2 = 0.985, 0.999\\))</p> Attempt 2Attempt 1 <p>A new effort is launched to find the demand formula.</p> <p>See guides.</p> <p>Found: 1 June 2023 (Cathay Express)</p> <p>API Reference: utils.demand.PaxDemand, utils.demand.CargoDemand</p> <p>The demand is a uniformly distributed random variable:</p> \\[ \\mathbb{E}(D_{i,j}) = \\begin{cases}     0.0033164(k_i+k_j) + 119.41009 &amp; \\text{if capital} \\\\     0.0016346(k_i+k_j) + 243.24880 &amp; \\text{otherwise} \\end{cases} \\] <p>where:</p> <ul> <li>\\(\\mathbb{E}(D_{i, j})\\): expected demand of the route from airport \\(i\\) to airport \\(j\\), that is, the mean demand of routes with the same total tier value.</li> <li>\\(k\\): tier value of the airport. See the hub cost section for more details.</li> </ul> <p>Note</p> <p>The true demand of the route is calculated by adding a random offset to the mean demand. This random offset is uniformly distributed and cannot be meaningfully predicted without knowing the seed of the PRNG.</p> <p>Psuedocode: <code>offset = PRNG(seed=hash(airport1, airport2)).next()</code> and <code>hash</code> is commutative.</p> <p>See GitHub for attempts to uncover it.</p> <p>In practice, we store this in a giant hashtable.</p>"},{"location":"formulae/#marketing-campaign","title":"Marketing Campaign","text":"<p>Applicable for both easy and realism.</p> \\[ \\begin{align*} C_{1} &amp;= (2625T + 4500)n_p \\\\ C_{2} &amp;= (3937.5T + 6750)n_p \\\\ C_{3} &amp;= (4987.5T + 8550)n_p \\\\ C_{4} &amp;= (6037.5T + 10350)n_p \\\\ C_{\\text{eco}} &amp;= 8270n_p \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(C_{k}\\): Cost of marketing campaign k</li> <li>\\(T\\): Campaign length, hours</li> <li>\\(n_p\\): Total amount of planes ever owned<sup>3</sup></li> </ul>"},{"location":"formulae/#pax-carried","title":"Pax Carried","text":"<p>Confidence: 80% (\\(N \\approx 2000\\))</p> <p>Found: 2021 (Cathay Express)</p> <p>API: utils.route.AircraftRoute.estimate_load</p> <p>When there is demand remaining, the load is a random variable with the expected value:</p> \\[ \\mathbb{E}(\\text{load}) \\approx \\begin{cases}  0.0085855R, &amp; \\text{if } \\alpha &gt; 1 \\land s \\\\ 0.0090435R, &amp; \\text{if } \\alpha &gt; 1 \\land \\lnot s \\\\ 1 + \\alpha(0.0090312R - 1), &amp; \\text{if } \\alpha \\leq 1 \\land s \\\\ 1 + \\alpha(0.0095265R - 1), &amp; \\text{if } \\alpha \\leq 1 \\land \\lnot s \\\\ \\end{cases} \\] <p>where:</p> <ul> <li>\\(R\\): reputation</li> <li>\\(\\alpha\\): autoprice ratio: the ratio of the ticket price to the autoprice ticket price (e.g. 1.1):<ul> <li>\\(\\alpha &gt; 1\\): normally distributed, with standard deviation at 6.8% the mean (heteroscedastic).</li> <li>\\(\\alpha \\leq 1\\): uniformly distributed, with half-range at 5.2% the mean (heteroscedastic).</li> </ul> </li> <li>\\(s\\): boolean variable of whether the route has a stopover</li> </ul> <p>When there is insufficient demand, the load is deterministic:</p> <p>Confidence: 60% (tested at 39% reputation)</p> \\[ \\text{load} = \\begin{cases} 0.11136R &amp; \\text{if }D \\geq \\text{C} \\land \\lnot s \\\\ 0.10688R &amp; \\text{if }D \\geq \\text{C} \\land s \\\\ 0.3312\\frac{D}{C} + 0.1014 &amp; \\text{if }D \\leq \\text{C} \\land \\lnot s \\\\ 0.3105\\frac{D}{C} + 0.1038 &amp; \\text{if }D \\leq \\text{C} \\land s \\\\ \\end{cases} \\] <p>When the demand is less than the intersection between the formula above and y=x, the load is 100% to make sure the demand is depleted:</p> \\[ \\text{load} = \\begin{cases} 1 &amp; \\text{if }D &lt; C\\cdot\\text{load} \\\\ \\text{load} &amp; \\text{otherwise} \\end{cases} \\] <p>where:</p> <ul> <li>\\(D\\): demand left before departure</li> <li>\\(C\\): capacity of the aircraft</li> </ul>"},{"location":"formulae/#ci","title":"CI","text":"<p>Found: 2019 (AM4 Community)</p> \\[ v = u(0.0035\\cdot \\text{CI} + 0.3) \\] <p>where:</p> <ul> <li>\\(v\\): new speed</li> <li>\\(u\\): original speed</li> <li>\\(\\text{CI}\\): CI, 0-200.</li> </ul> <p>Alternative Expression (useful for optimisation):</p> \\[ \\text{CI} = \\frac{2000d}{7uT'}-\\frac{600}{7} \\] <p>where:</p> <ul> <li>\\(d\\): route distance</li> <li>\\(u\\): original speed</li> <li>\\(T'\\): target flight time after applying CI</li> </ul>"},{"location":"formulae/#fuel-consumption","title":"Fuel Consumption","text":"<p>Found: 20 Dec 2020 (Cathay Express)</p> <p>Confidence: 100% (\\(R^2 = 1\\))</p> \\[ \\text{fuel} = (1 - t_f) \\cdot \\text{ceil}(d, 2) \\cdot c_f \\cdot \\left(\\frac{\\text{CI}}{500} + 0.6\\right) \\] <p>where:</p> <ul> <li>\\(t_f\\): fuel training amount (0-3)</li> <li>\\(\\text{ceil}(d, 2)\\): total distance<sup>1</sup>, rounded up to 2 decimal places</li> <li>\\(c_f\\): fuel consumption of the aircraft. If modified with fuel efficiency, multiply by 0.9.</li> <li>\\(CI\\): cost index (0-200)</li> </ul>"},{"location":"formulae/#co2-consumption","title":"CO\u2082 Consumption","text":"<p>Found: 22 Dec 2020 (Cathay Express)</p> <p>Confidence: 100% (\\(R^2 = 1\\))</p>"},{"location":"formulae/#pax_1","title":"Pax","text":"\\[ \\text{CO}_2 = (1 - \\frac{t_c}{100}) \\cdot \\text{ceil}(d, 2) \\cdot c_c \\cdot \\left(y_l + 2j_l + 3f_l + y_c + j_c + f_c\\right) \\cdot \\left(\\frac{\\text{CI}}{2000} + 0.9\\right) \\] <p>where:</p> <ul> <li>\\(t_c\\): CO\u2082 training amount (0-5)</li> <li>\\(\\text{ceil}(d, 2)\\): total distance<sup>1</sup>, rounded up to 2 decimal places</li> <li>\\(c_c\\): CO\u2082 consumption of the aircraft. If modified with CO\u2082 efficiency, multiply by 0.9.</li> <li>\\(y_l\\), \\(j_l\\), \\(f_l\\) are the number of economy, business, and first class passenger loaded</li> <li>\\(y_c\\), \\(j_c\\), \\(f_c\\) are the number of economy, business, and first class seats</li> <li>\\(CI\\): cost index (0-200)</li> </ul>"},{"location":"formulae/#cargo_1","title":"Cargo","text":"\\[ \\text{CO}_2 = (1 - \\frac{t_c}{100}) \\cdot \\text{ceil}(d, 2) \\cdot c_c \\cdot \\left(0.7l_l  + h_l + 0.7l_c  + h_c\\right) \\cdot C \\cdot \\left(\\frac{\\text{CI}}{2000} + 0.9\\right) \\] <p>where:</p> <ul> <li>\\(t_c\\): CO\u2082 training amount (0-5)</li> <li>\\(\\text{ceil}(d, 2)\\): total distance<sup>1</sup>, rounded up to 2 decimal places</li> <li>\\(c_c\\): CO\u2082 consumption of the aircraft. If modified with CO\u2082 efficiency, multiply by 0.9.</li> <li>\\(l_l\\), \\(h_l\\): actual load of large and heavy cargo (%)</li> <li>\\(l_c\\), \\(h_c\\): configuration of large and heavy cargo (%)</li> <li>\\(C\\): the total equivalent cargo capacity of the aircraft (lbs)</li> <li>\\(CI\\): cost index (0-200)</li> </ul>"},{"location":"formulae/#creation-cost","title":"Creation cost","text":"<p>Found: 2024 (Alliance Ariving Germany)</p> <p>Confidence: 100%</p>"},{"location":"formulae/#pax-easy","title":"Pax, Easy","text":"\\[ C = 0.4 (d + (y_c \\cdot \\lfloor 0.4d + 170 \\rfloor) + (j_c \\cdot \\lfloor 0.8d + 560 \\rfloor) + (f_c \\cdot \\lfloor 1.2d + 1200 \\rfloor)) \\] <p>where:</p> <ul> <li>\\(d\\): total distance<sup>1</sup></li> <li>\\(y_c\\), \\(j_c\\), \\(f_c\\) are the number of economy, business, and first class seats</li> </ul>"},{"location":"formulae/#pax-realism","title":"Pax, Realism","text":"\\[ C = (d \\cdot n_p) + (y_c \\cdot \\lfloor 0.3d + 150 \\rfloor) + (j_c \\cdot \\lfloor 0.6d + 500 \\rfloor) + (f_c \\cdot \\lfloor 0.9d + 1000 \\rfloor) \\] <p>where:</p> <ul> <li>\\(d\\): total distance<sup>1</sup></li> <li>\\(n_p\\): total amount of planes ever owned<sup>3</sup></li> <li>\\(y_c\\), \\(j_c\\), \\(f_c\\) are the number of economy, business, and first class seats</li> </ul>"},{"location":"formulae/#best-configuration","title":"Best Configuration","text":"<p>Developed: 2019 (AM4 Community, Cathay Express)</p> <p>See guides/configuration</p> <p>Input:</p> <ul> <li>Seat classes: \\(S = \\{s_1, s_2, \\ldots, s_n\\}\\)</li> <li>Units of capacity: \\(c_1, c_2, \\ldots, c_n\\)</li> <li>Demand: \\(d_1, d_2, \\ldots, d_n\\)</li> <li>Flights per day: \\(f\\)</li> <li>Capacity: \\(C\\)</li> </ul> <p>Output:</p> <ul> <li>Optimal seat configuration: \\(\\text{seats} = (\\text{seats}_1, \\text{seats}_2, \\ldots, \\text{seats}_n)\\)</li> </ul> <p>Algorithm:</p> <ol> <li>\\(C_{\\text{remaining}} \\leftarrow C\\).</li> <li>for \\(i \\leftarrow 1\\) to \\(n\\):<ul> <li>\\(\\text{seats}_i \\leftarrow \\left\\lfloor\\frac{d_i}{f}\\right\\rfloor\\).</li> <li>if \\(\\text{seats}_i \\cdot c_i \\leq C_{\\text{remaining}}\\):<ul> <li>\\(C_{\\text{remaining}} \\leftarrow C_{\\text{remaining}} - \\text{seats}_i \\cdot c_i\\).</li> </ul> </li> <li>else:<ul> <li>\\(\\text{seats}_i \\leftarrow \\left\\lfloor\\frac{C_{\\text{remaining}}}{c_i}\\right\\rfloor\\).</li> <li>\\(C_{\\text{remaining}} \\leftarrow 0\\).</li> </ul> </li> </ul> </li> <li>return \\(\\text{seats} = (\\text{seats}_1, \\text{seats}_2, \\ldots, \\text{seats}_n)\\).</li> </ol>"},{"location":"formulae/#pax-seat-ordering","title":"Pax seat ordering","text":"<p>Assuming the use of 1.1x, 1.08x, and 1.06x multipliers from the autoprice ticket prices.</p> Game Mode Distance Range (km) Best Seat Class Order Easy &lt; 14425 F&gt;J&gt;Y 14425 - 14812.5 F&gt;Y&gt;J 14812.5 - 15200 Y&gt;F&gt;J &gt; 15200 Y&gt;J&gt;F Realism &lt; 13888.89 F&gt;J&gt;Y 13888.89 - 15694.44 J&gt;F&gt;Y 15694.44 - 17500 J&gt;Y&gt;F &gt; 17500 Y&gt;J&gt;F"},{"location":"formulae/#cargo-seat-ordering","title":"Cargo seat ordering","text":"<p>Assuming the use of 1.1x and 1.08x multipliers from the autoprice ticket prices.</p> Game Mode Distance Range (km) Best Seat Class Order Easy &lt;23908 L&gt;H &gt;23908 H&gt;L Realism all L&gt;H"},{"location":"formulae/#airport","title":"Airport","text":""},{"location":"formulae/#hub-cost","title":"Hub Cost","text":"<p>Found: Mar 2020 (Cathay Express)</p> <p>Confidence: 100% (\\(R^2 = 1\\))</p> <p>API: utils.airport.Airport.hub_cost</p> <p>Applicable for both easy and realism.</p> \\[C_{k} = kp + k\\] <p>where:</p> <ul> <li>\\(C_{k}\\): Cost of hub with tier value k (\\(k\\) is hardcoded)</li> <li>\\(p\\): Total amount of planes ever owned</li> </ul> <p>The maximum tier value is a capital route.</p>"},{"location":"formulae/#lounge","title":"Lounge","text":""},{"location":"formulae/#construction-time","title":"Construction time","text":"<p>Found: 7 Jul 2021 (Cathay Express)</p> <p>Confidence: 100% (\\(R^2 = 1\\))</p> <p>Applicable for both easy and realism.</p> \\[ \\begin{align*} T_{\\text{regular}} &amp;= 500n_l + 2000 \\\\ T_{\\text{highend}} &amp;= 700n_l + 3600 \\\\ T_{\\text{exclusive}} &amp;= 900n_l + 7200 \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(T\\): time needed to construct the lounge</li> <li>\\(n_l\\): number of lounges owned</li> </ul>"},{"location":"formulae/#construction-cost","title":"Construction cost","text":"<p>Found: 07 Jul 2021</p> <p>Confidence: 75% (Lounge fee is lower for airlines with less cash?)</p> <p>Applicable for both easy and realism.</p> \\[ \\begin{align*} C_{\\text{regular}} &amp;= 1500000n_l + 37500000 \\\\ C_{\\text{highend}} &amp;= 5000000n_l + 125000000 \\\\ C_{\\text{exclusive}} &amp;= 15000000n_l + 375000000 \\\\ \\end{align*} \\] <p>where:</p> <ul> <li>\\(C\\): cost needed to construct the lounge</li> <li>\\(n_l\\): number of lounges owned</li> </ul>"},{"location":"formulae/#hangar-expansion","title":"Hangar expansion","text":"<p>Found*: 21 Jan 2022 (Cathay Express)</p> <p>Updated: 25 Jan 2022 (Cathay Express, reduced by ~50%)</p> <p>See GitHub for raw data.</p> <p></p> <p>Confidence: 30% (\\(R^2 = 0.94\\))</p> \\[C_{10} \\approx 147503 \\cdot {1.04839}^{x}\\] <p>where:</p> <ul> <li>\\(C_{10}\\): cost needed to add 10 planes</li> <li>\\(x\\): fleet limit</li> </ul> <p>. The cost needed to add 1 plane is:</p> \\[C_{1} = \\left\\lfloor \\frac{1}{10}C_{10} \\right\\rfloor\\]"},{"location":"formulae/#aircraft","title":"Aircraft","text":""},{"location":"formulae/#wear","title":"Wear","text":"<p>Found: 2021 (Cathay Express)</p> <p>Confidence: 100% (\\(R^2 = 1\\)). Applicable for both easy and realism.</p> \\[ \\text{wear} \\sim \\mathcal{U}(0, 0.015\\cdot(1-0.02t_r)) \\] <p>where:</p> <ul> <li>\\(t_r\\): repair training amount (0-5)</li> <li>\\(\\mathcal{U}\\): uniform distribution</li> </ul> <p>Equivalently, the expected wear is 0.75% per departure, which decreases by 2% per training point.</p>"},{"location":"formulae/#repair-cost","title":"Repair Cost","text":"<p>Found: 2020 (Cathay Express)</p> <p>Confidence: 100% (\\(R^2 = 1\\)). Untested on realism.</p> \\[ C_r = 0.001C(1 - 0.02t_r)\\cdot\\text{wear} \\] <p>where:</p> <ul> <li>\\(C\\): aircraft cost</li> <li>\\(t_r\\): repair training amount (0-5)</li> <li>\\(\\text{wear}\\): aircraft wear percentage, 0-1 </li> </ul>"},{"location":"formulae/#repair-time","title":"Repair Time","text":"<p>Found: 29 June 2024 (Cathay Express, Point Connect)</p> <p>Confidence: 99% (\\(R^2 = .995\\)). Applicable for both easy and realism.</p> \\[ T = 480000 \\cdot \\text{wear}+3600 \\] <p>where:</p> <ul> <li>\\(T\\): downtime (seconds)</li> <li>\\(\\text{wear}\\): aircraft wear percentage, 0-1 </li> </ul>"},{"location":"formulae/#check-time","title":"Check Time","text":"<p>Found: 29 June 2024 (Cathay Express, Point Connect) Updated: 9 July 2024</p> <p>Confidence: 95%. Note that the check cost for easy players are half of realism.</p>"},{"location":"formulae/#easy_3","title":"Easy","text":"\\[ T = 0.01 \\cdot C+1860 \\]"},{"location":"formulae/#realism_3","title":"Realism","text":"\\[ T = 0.01 \\cdot C+3700 \\] <p>where:</p> <ul> <li>\\(T\\): downtime (seconds)</li> <li>\\(C\\): check cost</li> </ul>"},{"location":"formulae/#miscellaneous","title":"Miscellaneous","text":""},{"location":"formulae/#level-bar","title":"Level Bar","text":"<p>Found: Mar 4 2020 (Cathay Express)</p> <p>Confidence: 100% (\\(R^2 = 1\\)). Applicable for both easy and realism.</p> \\[f_{l + 1} = 8l + 4\\] <p>where:</p> <ul> <li>\\(f_{l+1}\\): number of flights needed to reach the next level</li> <li>\\(l\\): current level number</li> </ul> <ol> <li> <p>A flight A\u2192B\u2192C has total distance is <code>distance(A, B) + distance(B, C)</code>.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>A flight A\u2192B\u2192C has direct distance is <code>distance(A, C)</code>.\u00a0\u21a9</p> </li> <li> <p>The total number of planes ever purchased can be found by navigating to the aircraft ordering page and checking the prefix of the registration.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"introduction/","title":"AM4 101","text":"<p>Quick reference manual. See the list of mathematical formulae for more precise information.</p>"},{"location":"introduction/#aircraft","title":"Aircraft","text":"<p>An aircraft is associated with many attributes. Among the most important are:</p> <ul> <li>Maximum Range \\(R\\): affects the frequency of departures and your access to more destinations.</li> <li>Engine Variant: applies a multiplier on the base* speed, fuel and CO<sub>2</sub> consumption values.</li> <li>Cruise Speed \\(V\\)*: ground speed of the aircraft, constant from the takeoff to final approach phase. can be increased with modifications</li> <li>Fuel Consumption \\(c_T\\)*: can be decreased with modifications and training points</li> <li>CO2 Consumption \\(c_C\\)*: can be decreased with modifications and training points</li> <li>Capacity \\(C\\): the maximum units of passengers or cargo, for use in aircraft configuration.</li> <li>Minimum Runway Length \\(L_\\text{rwy,min}\\): restricts the route choices for realism players</li> </ul> <p>* A common question is the discrepancy between aircraft specifications in the menu page and the detailed order page. The menu page lists the base specifications - clicking into the detailed order page applies a multiplier (typically 0.95-1.05) to the base specifications.</p> <p>The list of aircrafts can be downloaded here.</p>"},{"location":"introduction/#airport","title":"Airport","text":"<p>The list of airports can be downloaded here.</p>"},{"location":"introduction/#routing","title":"Routing","text":"<p>Consider a route from origin airport \\(A\\) to a destination \\(C\\), with the haversine distance \\(d_\\text{AC}\\).</p>"},{"location":"introduction/#demand","title":"Demand","text":"<p>Each route is uniquely associated with a daily demand for economy class \\(D_y\\), business class \\(D_j\\), first class \\(D_f\\), large cargo \\(D_l\\) and heavy cargo \\(D_h\\).</p> <ul> <li>When a flight departs, the demand decreases based on the number of seats sold or cargo carried.</li> <li>Once the demand of a class reaches zero, no futher profit is earned from that class.</li> <li>Demand is refilled daily at 01:00 UTC.</li> <li>Demand is undirected (routes \\(A \\rightarrow C\\) and \\(C \\rightarrow A\\) share the same demand).</li> <li>The average demand to a destination is correlated with the base hub cost of the origin.</li> </ul>"},{"location":"introduction/#constraints","title":"Constraints","text":"<ul> <li>A route may contain one leg (\\(A \\rightarrow C\\)), or two legs (\\(A \\rightarrow B \\rightarrow C\\), via stopover \\(B\\)).</li> <li>The direct distance of each leg \\(d\\) must be less than the aircraft range \\(R\\).</li> <li>This means that the effective range of an aircraft can be doubled if a stopover is used.</li> <li>For realism players, the runway length \\(L_\\text{rwy}\\) of both origin and destinations and one leg must be greater than the aircraft minimum runway length \\(L_\\text{rwy,min}\\).</li> </ul>"},{"location":"introduction/#revenue","title":"Revenue","text":"<p>An aircraft has \\(C\\) units of capacity and can be customised.</p>"},{"location":"introduction/#aircraft-configuration","title":"Aircraft Configuration","text":"<p>Certain seat classes take up more \"empty space\" of the aircraft:</p> Seat class Units of capacity Economy \\(y\\) 1 Business \\(j\\) 2 First \\(f\\) 3 Large cargo \\(l\\) 0.7 Heavy cargo \\(h\\) 1 <p>The weighted sum of seats should add up to the capacity. For example, an A380-800 has \\(C=600\\) units of capacity, and a valid configuration can be \\(s_y=100\\), \\(s_j=100\\) and \\(s_f=100\\) because their weighted sum is \\(1 \\cdot 100+2\\cdot 100 + 3\\cdot 100=600\\).</p>"},{"location":"introduction/#ticket-price","title":"Ticket price","text":"<p>The ticket price for each class \\(p_i\\) increases linearly with the direct distance \\(d_{AC}\\) of a route.</p> <p>More specifically, \\(p_i=m_i d_{AC} + c_i\\), where \\(m_i\\) and \\(c_i\\) are constants depending on the specific seat class and game mode. Note that adding a stopover does not increase the ticket price, so an optimal stopover should be selected to avoid extra detour.</p> <p>In practice, a higher revenue per flight can be achieved by multiplying the autoprice-suggested ticket price with an appropriate constant. See the formulae for the upper bound. Exercise caution: flights may occasionally be empty due to rounding on AM4's servers - always subtract a few dollars to be safe. </p>"},{"location":"introduction/#operating-expenses","title":"Operating Expenses","text":""},{"location":"introduction/#marketing","title":"Marketing","text":""},{"location":"introduction/#fuel","title":"Fuel","text":"<p>The cost is a psuedorandom value sampled from a uniform distribution, \\(300-\\)3000, updated every 30 minutes.</p> <p>Fuel bonanzas with &lt;$100 may occur, though it is extremely rare.</p>"},{"location":"introduction/#co2","title":"CO2","text":"<p>The cost is a psuedorandom value sampled from a uniform distribution, \\(100-\\)200, updated every 30 minutes.</p> <p>CO2 bonanzas with $10 may occur, though it is extremely rare.</p>"},{"location":"introduction/#cost-index","title":"Cost index","text":"<p>Decreasing the cost index (CI) reduces the speed of the aircraft, thus theoretically reducing the daily profit. Simultaneously, the fuel and co2 consumption is reduced, reducing the daily expenses.</p> <p>Useful when trying to artifically inflate the flight time to match your departure schedule, or increasing contribution.</p>"},{"location":"introduction/#crew","title":"Crew","text":""},{"location":"introduction/#a-check","title":"A-check","text":""},{"location":"introduction/#repair","title":"Repair","text":""},{"location":"introduction/#ferry-flight","title":"ferry flight","text":""},{"location":"introduction/#capital-expenditure","title":"Capital Expenditure","text":"<p>Purchasing a significant asset incurs a non-recurring cash outlay:</p>"},{"location":"introduction/#aircraft-base-cost","title":"Aircraft base cost","text":""},{"location":"introduction/#aircraft-configuration-cost","title":"Aircraft configuration cost","text":""},{"location":"introduction/#aircraft-modification-cost","title":"Aircraft modification cost","text":""},{"location":"introduction/#hub-cost","title":"Hub cost","text":""},{"location":"introduction/#important-concepts","title":"Important Concepts","text":""},{"location":"introduction/#total-number-of-aircraft-ever-purchased","title":"Total number of aircraft ever purchased","text":"<p>Purchasing a new aircraft increments an internal counter, which increases the marketing cost and hub cost.</p> <p>Selling an aircraft does not decrement the counter.</p> <p>The value can be inferred from the default registration on the aircraft order page.</p>"},{"location":"introduction/#alliances","title":"Alliances","text":"<p>An airline can form a new alliance or join an existing one.</p> <p>Departing flights earn you a contribution value.</p>"},{"location":"tos/","title":"TOS","text":"<p>AM4Help provides a set of foundational tools that compute statistics and strategies for the game Airline Manager 4 (\"AM4\"). The AM4Help discord bot is a managed service, and you may obtain a copy of the source code here.</p> <p>If you have any requests, do not hesistate to contact us through email at <code>am4@ylcheung.com</code>, or opening a ticket on our support server.</p>"},{"location":"tos/#terms-of-service","title":"Terms of Service","text":"<ul> <li>Our terms and conditions apply to all users who interact with the bot. We reserve the right to prohibit any server or user from using the bot if you do not follow the terms of service.</li> <li>Actions that harm the reliability of the service are not allowed, such as: brute forcing, denial of service and spamming.</li> <li>If you play AM4, you must uphold their terms of service.<ul> <li>Any form of cheating, manipulating or exploiting the game is not allowed</li> <li>If you are found to be suspended in-game, or participated or aided in cheating, we will terminate your access.</li> </ul> </li> </ul> <p>Responsible vulnerability disclosure: We encourage everyone to find bugs in our bot and we ask that you make us aware of this privately.</p> <p>The service is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the service or the use or other dealings in the service.</p>"},{"location":"tos/#privacy-policy","title":"Privacy policy","text":""},{"location":"tos/#the-information-we-collect","title":"The information we collect","text":"<p>The bot only responds to messages starting with the <code>$</code> command prefix. We collect minimal data to ensure the accuracy of the calculations.</p> <ul> <li>Discord ID and username: for login purposes and to retrieve your saved settings</li> <li>Discord Role: We determine your game mode by automatically checking if you have been assigned a role named <code>Easy</code> or <code>Realism</code>, to make sure calculations are correct.</li> <li>User-provided settings: Examples include your AM4 user id, load factor and assumed fuel price.</li> </ul> <p>Your data is stored securely and are never shared to third parties.</p>"},{"location":"tos/#logging","title":"Logging","text":"<p>AM4Help follows a standard procedure for observability. When you issue a command, we log your discord ID and the associated command name to log files. We do not log the specific query parameters, such as the departing airport, constraints or flights per day.</p> <p>The primary purpose for logging is to prevent spammers from overloading our servers.</p>"},{"location":"tos/#data-retention","title":"Data retention","text":"<p>We will only create an account for you when you first proactively issue a valid command (starting with a <code>$</code>).</p> <p>You can stop all collection of data by not issuing commands to it.</p> <p>If you wish to delete your data, you can submit a request to our email or open a ticket on our support server.</p>"},{"location":"tos/#changes","title":"Changes","text":"<p>The terms of service and privacy policy may be updated from time to time. You can subscribe to changes using the <code>Watch</code> feature on the Github repository.</p> <p>Last updated: 2024-08-10</p>"},{"location":"api/bot/","title":"Bot","text":""},{"location":"api/bot/#bot","title":"bot","text":"<p>Modules:</p> Name Description <code>base</code> <code>channels</code> <code>converters</code> <code>errors</code> <code>plots</code> <code>utils</code> <p>Functions:</p> Name Description <code>on_ready</code> <code>on_guild_join</code> <code>on_command_error</code> <code>start</code> <p>Attributes:</p> Name Type Description <code>intents</code> <code>bot</code>"},{"location":"api/bot/#bot.intents","title":"intents  <code>module-attribute</code>","text":"<pre><code>intents = default()\n</code></pre>"},{"location":"api/bot/#bot.bot","title":"bot  <code>module-attribute</code>","text":"<pre><code>bot = Bot(\n    command_prefix=COMMAND_PREFIX,\n    intents=intents,\n    help_command=None,\n)\n</code></pre>"},{"location":"api/bot/#bot.on_ready","title":"on_ready  <code>async</code>","text":"<pre><code>on_ready()\n</code></pre>"},{"location":"api/bot/#bot.on_guild_join","title":"on_guild_join  <code>async</code>","text":"<pre><code>on_guild_join(guild: Guild)\n</code></pre>"},{"location":"api/bot/#bot.on_command_error","title":"on_command_error  <code>async</code>","text":"<pre><code>on_command_error(ctx: Context, error: CommandError)\n</code></pre>"},{"location":"api/bot/#bot.start","title":"start  <code>async</code>","text":"<pre><code>start(db_done: Event)\n</code></pre>"},{"location":"api/bot/#bot.base","title":"base","text":"<p>Classes:</p> Name Description <code>BaseCog</code>"},{"location":"api/bot/#bot.base.BaseCog","title":"BaseCog","text":"<pre><code>BaseCog(bot: Bot)\n</code></pre> <p>               Bases: <code>Cog</code></p> <p>Attributes:</p> Name Type Description <code>bot</code>"},{"location":"api/bot/#bot.base.BaseCog.bot","title":"bot  <code>instance-attribute</code>","text":"<pre><code>bot = bot\n</code></pre>"},{"location":"api/bot/#bot.channels","title":"channels","text":"<p>Attributes:</p> Name Type Description <code>channels</code>"},{"location":"api/bot/#bot.channels.channels","title":"channels  <code>module-attribute</code>","text":"<pre><code>channels = _Channels()\n</code></pre>"},{"location":"api/bot/#bot.channels._Channels","title":"_Channels","text":"<p>Methods:</p> Name Description <code>init</code> <p>Attributes:</p> Name Type Description <code>debug</code> <code>TextChannel</code> <code>price_alert</code> <code>TextChannel</code>"},{"location":"api/bot/#bot.channels._Channels.debug","title":"debug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug: TextChannel = None\n</code></pre>"},{"location":"api/bot/#bot.channels._Channels.price_alert","title":"price_alert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>price_alert: TextChannel = None\n</code></pre>"},{"location":"api/bot/#bot.channels._Channels.init","title":"init  <code>async</code>","text":"<pre><code>init(bot: Bot)\n</code></pre>"},{"location":"api/bot/#bot.converters","title":"converters","text":"<p>Classes:</p> Name Description <code>AirportCvtr</code> <code>MultiAirportCvtr</code> <code>AircraftCvtr</code> <code>SettingValueCvtr</code> <code>TPDCvtr</code> <code>CfgAlgCvtr</code> <code>ConstraintCvtr</code> <code>PriceCvtr</code> <p>Functions:</p> Name Description <code>acro_cast</code>"},{"location":"api/bot/#bot.converters.AirportCvtr","title":"AirportCvtr","text":"<p>               Bases: <code>Converter</code></p> <p>Methods:</p> Name Description <code>convert</code>"},{"location":"api/bot/#bot.converters.AirportCvtr.convert","title":"convert  <code>async</code>","text":"<pre><code>convert(ctx: Context, query: str) -&gt; SearchResult\n</code></pre>"},{"location":"api/bot/#bot.converters.MultiAirportCvtr","title":"MultiAirportCvtr","text":"<p>               Bases: <code>Converter</code></p> <p>Methods:</p> Name Description <code>convert</code>"},{"location":"api/bot/#bot.converters.MultiAirportCvtr.convert","title":"convert  <code>async</code>","text":"<pre><code>convert(ctx: Context, query: str) -&gt; List[SearchResult]\n</code></pre>"},{"location":"api/bot/#bot.converters.AircraftCvtr","title":"AircraftCvtr","text":"<p>               Bases: <code>Converter</code></p> <p>Methods:</p> Name Description <code>convert</code>"},{"location":"api/bot/#bot.converters.AircraftCvtr.convert","title":"convert  <code>async</code>","text":"<pre><code>convert(ctx: Context, query: str) -&gt; SearchResult\n</code></pre>"},{"location":"api/bot/#bot.converters._ACROptions","title":"_ACROptions","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>algorithm_pax</code> <code>PyConfigAlgorithmPax</code> <code>algorithm_cargo</code> <code>PyConfigAlgorithmCargo</code> <code>max_distance</code> <code>PyACROptionsMaxDistance</code> <code>max_flight_time</code> <code>timedelta</code> <code>trips_per_day_per_ac</code> <code>PyACROptionsTripsPerDayPerAC</code>"},{"location":"api/bot/#bot.converters._ACROptions.algorithm_pax","title":"algorithm_pax  <code>instance-attribute</code>","text":"<pre><code>algorithm_pax: PyConfigAlgorithmPax\n</code></pre>"},{"location":"api/bot/#bot.converters._ACROptions.algorithm_cargo","title":"algorithm_cargo  <code>instance-attribute</code>","text":"<pre><code>algorithm_cargo: PyConfigAlgorithmCargo\n</code></pre>"},{"location":"api/bot/#bot.converters._ACROptions.max_distance","title":"max_distance  <code>instance-attribute</code>","text":"<pre><code>max_distance: PyACROptionsMaxDistance\n</code></pre>"},{"location":"api/bot/#bot.converters._ACROptions.max_flight_time","title":"max_flight_time  <code>instance-attribute</code>","text":"<pre><code>max_flight_time: timedelta\n</code></pre>"},{"location":"api/bot/#bot.converters._ACROptions.__tpd_mode","title":"__tpd_mode  <code>instance-attribute</code>","text":"<pre><code>__tpd_mode: PyACROptionsTPDMode\n</code></pre>"},{"location":"api/bot/#bot.converters._ACROptions.trips_per_day_per_ac","title":"trips_per_day_per_ac  <code>instance-attribute</code>","text":"<pre><code>trips_per_day_per_ac: PyACROptionsTripsPerDayPerAC\n</code></pre>"},{"location":"api/bot/#bot.converters._SettingKeyCustom","title":"_SettingKeyCustom","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>training</code> <code>Literal['max', 'min']</code>"},{"location":"api/bot/#bot.converters._SettingKeyCustom.training","title":"training  <code>instance-attribute</code>","text":"<pre><code>training: Literal['max', 'min']\n</code></pre>"},{"location":"api/bot/#bot.converters.SettingValueCvtr","title":"SettingValueCvtr","text":"<p>               Bases: <code>Converter</code></p> <p>Methods:</p> Name Description <code>convert</code>"},{"location":"api/bot/#bot.converters.SettingValueCvtr.convert","title":"convert  <code>async</code>","text":"<pre><code>convert(ctx: Context, value: Any) -&gt; Any\n</code></pre>"},{"location":"api/bot/#bot.converters.TPDCvtr","title":"TPDCvtr","text":"<p>               Bases: <code>Converter</code></p> <p>Methods:</p> Name Description <code>convert</code>"},{"location":"api/bot/#bot.converters.TPDCvtr._default","title":"_default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>_default = (1, AUTO)\n</code></pre>"},{"location":"api/bot/#bot.converters.TPDCvtr.convert","title":"convert  <code>async</code>","text":"<pre><code>convert(\n    ctx: Context, tpdo: str\n) -&gt; tuple[int | None, TPDMode]\n</code></pre>"},{"location":"api/bot/#bot.converters.CfgAlgCvtr","title":"CfgAlgCvtr","text":"<p>               Bases: <code>Converter</code></p> <p>Methods:</p> Name Description <code>convert</code>"},{"location":"api/bot/#bot.converters.CfgAlgCvtr.convert","title":"convert  <code>async</code>","text":"<pre><code>convert(ctx: Context, alg: str) -&gt; Algorithm | Algorithm\n</code></pre>"},{"location":"api/bot/#bot.converters.CfgAlgCvtr._default","title":"_default  <code>async</code> <code>staticmethod</code>","text":"<pre><code>_default(ctx: Context) -&gt; Algorithm | Algorithm\n</code></pre>"},{"location":"api/bot/#bot.converters.ConstraintCvtr","title":"ConstraintCvtr","text":"<p>               Bases: <code>Converter</code></p> <p>Methods:</p> Name Description <code>to_flight_time</code> <code>convert</code>"},{"location":"api/bot/#bot.converters.ConstraintCvtr._default","title":"_default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>_default = (None, None)\n</code></pre>"},{"location":"api/bot/#bot.converters.ConstraintCvtr.to_flight_time","title":"to_flight_time","text":"<pre><code>to_flight_time(constraint: str) -&gt; float | None\n</code></pre>"},{"location":"api/bot/#bot.converters.ConstraintCvtr.convert","title":"convert  <code>async</code>","text":"<pre><code>convert(\n    ctx: Context, constraint: str\n) -&gt; tuple[float | None, float | None]\n</code></pre>"},{"location":"api/bot/#bot.converters._Price","title":"_Price","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>fuel</code> <code>float</code> <code>co2</code> <code>float</code>"},{"location":"api/bot/#bot.converters._Price.fuel","title":"fuel  <code>instance-attribute</code>","text":"<pre><code>fuel: float\n</code></pre>"},{"location":"api/bot/#bot.converters._Price.co2","title":"co2  <code>instance-attribute</code>","text":"<pre><code>co2: float\n</code></pre>"},{"location":"api/bot/#bot.converters.PriceCvtr","title":"PriceCvtr","text":"<p>               Bases: <code>Converter</code></p> <p>Methods:</p> Name Description <code>convert</code>"},{"location":"api/bot/#bot.converters.PriceCvtr.convert","title":"convert  <code>async</code>","text":"<pre><code>convert(\n    ctx: Context, price: str | None\n) -&gt; tuple[Literal[\"Fuel\", \"CO\u2082\"], float] | None\n</code></pre>"},{"location":"api/bot/#bot.converters.acro_cast","title":"acro_cast","text":"<pre><code>acro_cast(k: str, v: Any) -&gt; _ACROptions\n</code></pre>"},{"location":"api/bot/#bot.errors","title":"errors","text":"<p>Classes:</p> Name Description <code>AircraftNotFoundError</code> <code>AirportNotFoundError</code> <code>TooManyAirportsError</code> <code>ValidationErrorBase</code> <code>SettingValueValidationError</code> <code>TPDValidationError</code> <code>CfgAlgValidationError</code> <code>ConstraintValidationError</code> <code>PriceValidationError</code> <code>UserBannedError</code> <code>OutsideMainServerError</code> <code>CustomErrHandler</code> <p>Attributes:</p> Name Type Description <code>COLOUR_ERROR</code> <code>Suggestions</code>"},{"location":"api/bot/#bot.errors.COLOUR_ERROR","title":"COLOUR_ERROR  <code>module-attribute</code>","text":"<pre><code>COLOUR_ERROR = Colour(13268341)\n</code></pre>"},{"location":"api/bot/#bot.errors.Suggestions","title":"Suggestions  <code>module-attribute</code>","text":"<pre><code>Suggestions = list[tuple[str, str]]\n</code></pre>"},{"location":"api/bot/#bot.errors.AircraftNotFoundError","title":"AircraftNotFoundError","text":"<pre><code>AircraftNotFoundError(acsr: SearchResult)\n</code></pre> <p>               Bases: <code>BadArgument</code></p> <p>Attributes:</p> Name Type Description <code>acsr</code>"},{"location":"api/bot/#bot.errors.AircraftNotFoundError.acsr","title":"acsr  <code>instance-attribute</code>","text":"<pre><code>acsr = acsr\n</code></pre>"},{"location":"api/bot/#bot.errors.AirportNotFoundError","title":"AirportNotFoundError","text":"<pre><code>AirportNotFoundError(apsr: SearchResult)\n</code></pre> <p>               Bases: <code>BadArgument</code></p> <p>Attributes:</p> Name Type Description <code>apsr</code>"},{"location":"api/bot/#bot.errors.AirportNotFoundError.apsr","title":"apsr  <code>instance-attribute</code>","text":"<pre><code>apsr = apsr\n</code></pre>"},{"location":"api/bot/#bot.errors.TooManyAirportsError","title":"TooManyAirportsError","text":"<pre><code>TooManyAirportsError(\n    num_airports: int, *, max_airports: int\n)\n</code></pre> <p>               Bases: <code>BadArgument</code></p> <p>Attributes:</p> Name Type Description <code>num_airports</code> <code>max_airports</code>"},{"location":"api/bot/#bot.errors.TooManyAirportsError.num_airports","title":"num_airports  <code>instance-attribute</code>","text":"<pre><code>num_airports = num_airports\n</code></pre>"},{"location":"api/bot/#bot.errors.TooManyAirportsError.max_airports","title":"max_airports  <code>instance-attribute</code>","text":"<pre><code>max_airports = max_airports\n</code></pre>"},{"location":"api/bot/#bot.errors.ValidationErrorBase","title":"ValidationErrorBase","text":"<pre><code>ValidationErrorBase(\n    err: ValidationError | PydanticCustomError,\n)\n</code></pre> <p>               Bases: <code>BadArgument</code></p> <p>Attributes:</p> Name Type Description <code>err</code> <code>msg</code>"},{"location":"api/bot/#bot.errors.ValidationErrorBase.err","title":"err  <code>instance-attribute</code>","text":"<pre><code>err = err\n</code></pre>"},{"location":"api/bot/#bot.errors.ValidationErrorBase.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg = join(\n    f\"`{join(e['loc'])}`: {e['msg']}\" for e in errors()\n)\n</code></pre>"},{"location":"api/bot/#bot.errors.SettingValueValidationError","title":"SettingValueValidationError","text":"<pre><code>SettingValueValidationError(\n    err: ValidationError | PydanticCustomError,\n)\n</code></pre> <p>               Bases: <code>ValidationErrorBase</code></p> <p>Attributes:</p> Name Type Description <code>err</code> <code>msg</code>"},{"location":"api/bot/#bot.errors.SettingValueValidationError.err","title":"err  <code>instance-attribute</code>","text":"<pre><code>err = err\n</code></pre>"},{"location":"api/bot/#bot.errors.SettingValueValidationError.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg = join(\n    f\"`{join(e['loc'])}`: {e['msg']}\" for e in errors()\n)\n</code></pre>"},{"location":"api/bot/#bot.errors.TPDValidationError","title":"TPDValidationError","text":"<pre><code>TPDValidationError(\n    err: ValidationError | PydanticCustomError,\n)\n</code></pre> <p>               Bases: <code>ValidationErrorBase</code></p> <p>Attributes:</p> Name Type Description <code>err</code> <code>msg</code>"},{"location":"api/bot/#bot.errors.TPDValidationError.err","title":"err  <code>instance-attribute</code>","text":"<pre><code>err = err\n</code></pre>"},{"location":"api/bot/#bot.errors.TPDValidationError.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg = join(\n    f\"`{join(e['loc'])}`: {e['msg']}\" for e in errors()\n)\n</code></pre>"},{"location":"api/bot/#bot.errors.CfgAlgValidationError","title":"CfgAlgValidationError","text":"<pre><code>CfgAlgValidationError(\n    err: ValidationError | PydanticCustomError,\n)\n</code></pre> <p>               Bases: <code>ValidationErrorBase</code></p> <p>Attributes:</p> Name Type Description <code>err</code> <code>msg</code>"},{"location":"api/bot/#bot.errors.CfgAlgValidationError.err","title":"err  <code>instance-attribute</code>","text":"<pre><code>err = err\n</code></pre>"},{"location":"api/bot/#bot.errors.CfgAlgValidationError.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg = join(\n    f\"`{join(e['loc'])}`: {e['msg']}\" for e in errors()\n)\n</code></pre>"},{"location":"api/bot/#bot.errors.ConstraintValidationError","title":"ConstraintValidationError","text":"<pre><code>ConstraintValidationError(\n    err: ValidationError | PydanticCustomError,\n)\n</code></pre> <p>               Bases: <code>ValidationErrorBase</code></p> <p>Attributes:</p> Name Type Description <code>err</code> <code>msg</code>"},{"location":"api/bot/#bot.errors.ConstraintValidationError.err","title":"err  <code>instance-attribute</code>","text":"<pre><code>err = err\n</code></pre>"},{"location":"api/bot/#bot.errors.ConstraintValidationError.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg = join(\n    f\"`{join(e['loc'])}`: {e['msg']}\" for e in errors()\n)\n</code></pre>"},{"location":"api/bot/#bot.errors.PriceValidationError","title":"PriceValidationError","text":"<pre><code>PriceValidationError(\n    err: ValidationError | PydanticCustomError,\n)\n</code></pre> <p>               Bases: <code>ValidationErrorBase</code></p> <p>Attributes:</p> Name Type Description <code>err</code> <code>msg</code>"},{"location":"api/bot/#bot.errors.PriceValidationError.err","title":"err  <code>instance-attribute</code>","text":"<pre><code>err = err\n</code></pre>"},{"location":"api/bot/#bot.errors.PriceValidationError.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg = join(\n    f\"`{join(e['loc'])}`: {e['msg']}\" for e in errors()\n)\n</code></pre>"},{"location":"api/bot/#bot.errors.UserBannedError","title":"UserBannedError","text":"<p>               Bases: <code>BadArgument</code></p>"},{"location":"api/bot/#bot.errors.OutsideMainServerError","title":"OutsideMainServerError","text":"<p>               Bases: <code>CheckFailure</code></p>"},{"location":"api/bot/#bot.errors.CustomErrHandler","title":"CustomErrHandler","text":"<pre><code>CustomErrHandler(\n    ctx: Context,\n    error: CommandError = CommandError(),\n    cmd: str | None = None,\n)\n</code></pre> <p>Methods:</p> Name Description <code>raise_for_unhandled</code> <code>invalid_aircraft</code> <code>invalid_airport</code> <code>too_many_airports</code> <code>invalid_setting_value</code> <code>invalid_tpd</code> <code>invalid_cfg_alg</code> <code>invalid_constraint</code> <code>invalid_price</code> <code>banned_user</code> <code>too_many_args</code> <code>bad_literal</code> <code>common_mistakes</code> <code>top_level</code> <p>Attributes:</p> Name Type Description <code>ctx</code> <code>error</code> <code>cmd</code> <code>handled</code> <code>err_tb</code> <code>str</code>"},{"location":"api/bot/#bot.errors.CustomErrHandler.ctx","title":"ctx  <code>instance-attribute</code>","text":"<pre><code>ctx = ctx\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.error","title":"error  <code>instance-attribute</code>","text":"<pre><code>error = error\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.cmd","title":"cmd  <code>instance-attribute</code>","text":"<pre><code>cmd = cmd\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.handled","title":"handled  <code>instance-attribute</code>","text":"<pre><code>handled = False\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.err_tb","title":"err_tb  <code>property</code>","text":"<pre><code>err_tb: str\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.raise_for_unhandled","title":"raise_for_unhandled  <code>async</code>","text":"<pre><code>raise_for_unhandled()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler._get_err_embed","title":"_get_err_embed","text":"<pre><code>_get_err_embed(\n    title: str,\n    description: str | None,\n    suggs: Suggestions | None = None,\n    sugg_cmd_override: list[str] = [],\n) -&gt; Embed\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.invalid_aircraft","title":"invalid_aircraft  <code>async</code>","text":"<pre><code>invalid_aircraft()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.invalid_airport","title":"invalid_airport  <code>async</code>","text":"<pre><code>invalid_airport(*, route_typo: bool = False)\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.too_many_airports","title":"too_many_airports  <code>async</code>","text":"<pre><code>too_many_airports()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.invalid_setting_value","title":"invalid_setting_value  <code>async</code>","text":"<pre><code>invalid_setting_value()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.invalid_tpd","title":"invalid_tpd  <code>async</code>","text":"<pre><code>invalid_tpd()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.invalid_cfg_alg","title":"invalid_cfg_alg  <code>async</code>","text":"<pre><code>invalid_cfg_alg()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.invalid_constraint","title":"invalid_constraint  <code>async</code>","text":"<pre><code>invalid_constraint()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.invalid_price","title":"invalid_price  <code>async</code>","text":"<pre><code>invalid_price()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.banned_user","title":"banned_user  <code>async</code>","text":"<pre><code>banned_user()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.too_many_args","title":"too_many_args  <code>async</code>","text":"<pre><code>too_many_args(arg_name: str)\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.bad_literal","title":"bad_literal  <code>async</code>","text":"<pre><code>bad_literal(\n    get_cmd_suggs: Callable[[list[str]], list[str]],\n)\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler._missing_arg","title":"_missing_arg  <code>async</code>","text":"<pre><code>_missing_arg()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler._expected_closing_quote_error","title":"_expected_closing_quote_error  <code>async</code>","text":"<pre><code>_expected_closing_quote_error()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler._invalid_end_of_quoted_string_error","title":"_invalid_end_of_quoted_string_error  <code>async</code>","text":"<pre><code>_invalid_end_of_quoted_string_error()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler._unexpected_quote_error","title":"_unexpected_quote_error  <code>async</code>","text":"<pre><code>_unexpected_quote_error()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler._main_server_only","title":"_main_server_only  <code>async</code>","text":"<pre><code>_main_server_only()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler._no_pm","title":"_no_pm  <code>async</code>","text":"<pre><code>_no_pm()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler._command_not_found","title":"_command_not_found  <code>async</code>","text":"<pre><code>_command_not_found()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.common_mistakes","title":"common_mistakes  <code>async</code>","text":"<pre><code>common_mistakes()\n</code></pre>"},{"location":"api/bot/#bot.errors.CustomErrHandler.top_level","title":"top_level  <code>async</code>","text":"<pre><code>top_level()\n</code></pre>"},{"location":"api/bot/#bot.plots","title":"plots","text":"<p>Classes:</p> Name Description <code>MPLMap</code>"},{"location":"api/bot/#bot.plots.MPLMap","title":"MPLMap","text":"<pre><code>MPLMap()\n</code></pre> <p>Methods:</p> Name Description <code>create_routes_template</code> <p>Create a blank template for the routes plot, which will be unpickled later to draw the plot.</p> <p>Attributes:</p> Name Type Description <code>rc_params</code> <code>template_routes</code> <code>cmap</code> <code>cmap2</code> <code>wgs84_to_pierceq</code>"},{"location":"api/bot/#bot.plots.MPLMap.rc_params","title":"rc_params  <code>instance-attribute</code>","text":"<pre><code>rc_params = {\n    \"font.family\": get_name(),\n    \"axes.facecolor\": \"#16171a\",\n    \"savefig.facecolor\": \"#1f2024\",\n    \"legend.fontsize\": 10 * 0.9,\n    \"legend.handlelength\": 2 * 0.9,\n    \"text.color\": \"white\",\n    \"axes.labelcolor\": \"white\",\n    \"axes.edgecolor\": \"white\",\n    \"xtick.color\": \"white\",\n    \"ytick.color\": \"white\",\n}\n</code></pre>"},{"location":"api/bot/#bot.plots.MPLMap.template_routes","title":"template_routes  <code>instance-attribute</code>","text":"<pre><code>template_routes = create_routes_template()\n</code></pre>"},{"location":"api/bot/#bot.plots.MPLMap.cmap","title":"cmap  <code>instance-attribute</code>","text":"<pre><code>cmap = crop_by_percent(dense_r, 30, which='min')\n</code></pre>"},{"location":"api/bot/#bot.plots.MPLMap.cmap2","title":"cmap2  <code>instance-attribute</code>","text":"<pre><code>cmap2 = crop_by_percent(curl, 50)\n</code></pre>"},{"location":"api/bot/#bot.plots.MPLMap.wgs84_to_pierceq","title":"wgs84_to_pierceq  <code>instance-attribute</code>","text":"<pre><code>wgs84_to_pierceq = from_crs(\n    4326,\n    from_string(\"+proj=peirce_q +lon_0=25 +shape=square\"),\n)\n</code></pre>"},{"location":"api/bot/#bot.plots.MPLMap.create_routes_template","title":"create_routes_template","text":"<pre><code>create_routes_template()\n</code></pre> <p>Create a blank template for the routes plot, which will be unpickled later to draw the plot.</p>"},{"location":"api/bot/#bot.plots.MPLMap._plot_destinations","title":"_plot_destinations","text":"<pre><code>_plot_destinations(\n    cols: dict[str, list],\n    origin_lngs: list[float],\n    origin_lats: list[float],\n) -&gt; BytesIO\n</code></pre>"},{"location":"api/bot/#bot.utils","title":"utils","text":"<p>Functions:</p> Name Description <code>fetch_user_info</code> <code>get_user_colour</code> <code>format_flight_time</code> <code>format_ap_short</code> <code>format_demand</code> <code>format_config</code> <code>format_ticket</code> <code>format_modifiers</code> <code>format_warning</code> <code>format_num</code> <code>main_server_only</code> <p>Attributes:</p> Name Type Description <code>GUIDE_DEV_ROLEID</code> <code>STAR_ROLEID</code> <code>COLOUR_GENERIC</code> <code>COLOUR_ERROR</code> <code>COLOUR_WARNING</code> <code>COLOUR_SUCCESS</code> <code>COLOUR_REALISM</code> <code>COLOUR_EASY</code> <code>IY</code> <code>IJ</code> <code>IF</code> <code>IL</code> <code>IH</code> <code>ICSV</code> <code>IJSON</code> <code>HELP_TPD</code> <code>HELP_CFG_ALG</code> <code>HELP_SETTING_KEY</code>"},{"location":"api/bot/#bot.utils.GUIDE_DEV_ROLEID","title":"GUIDE_DEV_ROLEID  <code>module-attribute</code>","text":"<pre><code>GUIDE_DEV_ROLEID = 646148607636144131\n</code></pre>"},{"location":"api/bot/#bot.utils.STAR_ROLEID","title":"STAR_ROLEID  <code>module-attribute</code>","text":"<pre><code>STAR_ROLEID = 701410528853098497\n</code></pre>"},{"location":"api/bot/#bot.utils.COLOUR_GENERIC","title":"COLOUR_GENERIC  <code>module-attribute</code>","text":"<pre><code>COLOUR_GENERIC = Colour(10464445)\n</code></pre>"},{"location":"api/bot/#bot.utils.COLOUR_ERROR","title":"COLOUR_ERROR  <code>module-attribute</code>","text":"<pre><code>COLOUR_ERROR = Colour(13268341)\n</code></pre>"},{"location":"api/bot/#bot.utils.COLOUR_WARNING","title":"COLOUR_WARNING  <code>module-attribute</code>","text":"<pre><code>COLOUR_WARNING = Colour(16755023)\n</code></pre>"},{"location":"api/bot/#bot.utils.COLOUR_SUCCESS","title":"COLOUR_SUCCESS  <code>module-attribute</code>","text":"<pre><code>COLOUR_SUCCESS = Colour(7719555)\n</code></pre>"},{"location":"api/bot/#bot.utils.COLOUR_REALISM","title":"COLOUR_REALISM  <code>module-attribute</code>","text":"<pre><code>COLOUR_REALISM = Colour(2588365)\n</code></pre>"},{"location":"api/bot/#bot.utils.COLOUR_EASY","title":"COLOUR_EASY  <code>module-attribute</code>","text":"<pre><code>COLOUR_EASY = Colour(1734969)\n</code></pre>"},{"location":"api/bot/#bot.utils.IY","title":"IY  <code>module-attribute</code>","text":"<pre><code>IY = '&lt;:economy:701335275896307742&gt;'\n</code></pre>"},{"location":"api/bot/#bot.utils.IJ","title":"IJ  <code>module-attribute</code>","text":"<pre><code>IJ = '&lt;:business:701335275669946431&gt;'\n</code></pre>"},{"location":"api/bot/#bot.utils.IF","title":"IF  <code>module-attribute</code>","text":"<pre><code>IF = '&lt;:first:701335275938381824&gt;'\n</code></pre>"},{"location":"api/bot/#bot.utils.IL","title":"IL  <code>module-attribute</code>","text":"<pre><code>IL = '&lt;:large:701335275690786817&gt;'\n</code></pre>"},{"location":"api/bot/#bot.utils.IH","title":"IH  <code>module-attribute</code>","text":"<pre><code>IH = '&lt;:heavy:701335275799969833&gt;'\n</code></pre>"},{"location":"api/bot/#bot.utils.ICSV","title":"ICSV  <code>module-attribute</code>","text":"<pre><code>ICSV = '&lt;:csv:1210823880172904448&gt;'\n</code></pre>"},{"location":"api/bot/#bot.utils.IJSON","title":"IJSON  <code>module-attribute</code>","text":"<pre><code>IJSON = '&lt;:json:1210823838334586880&gt;'\n</code></pre>"},{"location":"api/bot/#bot.utils.HELP_TPD","title":"HELP_TPD  <code>module-attribute</code>","text":"<pre><code>HELP_TPD = \"**Number of departures per day, per aircraft**\\n- if not provided or set to `AUTO`, the bot will attempt to maximise it.\\n- if you provide a number, the bot will try to assign more aircraft to the same route to avoid wasting demand.\\n  - to disable the cramming, append a `!` at the end (not recommended).\"\n</code></pre>"},{"location":"api/bot/#bot.utils.HELP_CFG_ALG","title":"HELP_CFG_ALG  <code>module-attribute</code>","text":"<pre><code>HELP_CFG_ALG = f'**Configuration Algorithm**\n- {join(f''`'{c}'`'' for c in __members__)} (pax)\n- {join(f''`'{c}'`'' for c in __members__)} (cargo)\nThe best algorithm is picked automatically depending on the route distance.\n`YJF` here denotes the order of priority when filling seats.'\n</code></pre>"},{"location":"api/bot/#bot.utils.HELP_SETTING_KEY","title":"HELP_SETTING_KEY  <code>module-attribute</code>","text":"<pre><code>HELP_SETTING_KEY = f'**The setting key** - some important ones are:\n- `fourx`: {HELP_U_FOURX}\n- `income_loss_tol`: {HELP_U_INCOME_LOSS_TOL}\n- `load` and `cargo_load`: {HELP_U_LOAD}\n'\n</code></pre>"},{"location":"api/bot/#bot.utils._SP100","title":"_SP100  <code>module-attribute</code>","text":"<pre><code>_SP100 = '\\u2003'\n</code></pre>"},{"location":"api/bot/#bot.utils._SP050","title":"_SP050  <code>module-attribute</code>","text":"<pre><code>_SP050 = '\\u2002'\n</code></pre>"},{"location":"api/bot/#bot.utils._SP033","title":"_SP033  <code>module-attribute</code>","text":"<pre><code>_SP033 = '\\u2004'\n</code></pre>"},{"location":"api/bot/#bot.utils._SP025","title":"_SP025  <code>module-attribute</code>","text":"<pre><code>_SP025 = '\\u2005'\n</code></pre>"},{"location":"api/bot/#bot.utils._SP022","title":"_SP022  <code>module-attribute</code>","text":"<pre><code>_SP022 = '\\u205f'\n</code></pre>"},{"location":"api/bot/#bot.utils._SP016","title":"_SP016  <code>module-attribute</code>","text":"<pre><code>_SP016 = '\\u2006'\n</code></pre>"},{"location":"api/bot/#bot.utils._SPHAIR","title":"_SPHAIR  <code>module-attribute</code>","text":"<pre><code>_SPHAIR = '\\u200a'\n</code></pre>"},{"location":"api/bot/#bot.utils._SPPUNC","title":"_SPPUNC  <code>module-attribute</code>","text":"<pre><code>_SPPUNC = '\\u2008'\n</code></pre>"},{"location":"api/bot/#bot.utils.fetch_user_info","title":"fetch_user_info  <code>async</code>","text":"<pre><code>fetch_user_info(ctx: Context) -&gt; tuple[User, UserExtra]\n</code></pre>"},{"location":"api/bot/#bot.utils.get_user_colour","title":"get_user_colour","text":"<pre><code>get_user_colour(user: User) -&gt; Colour\n</code></pre>"},{"location":"api/bot/#bot.utils.format_flight_time","title":"format_flight_time","text":"<pre><code>format_flight_time(t: float, short: bool = False) -&gt; str\n</code></pre>"},{"location":"api/bot/#bot.utils.format_ap_short","title":"format_ap_short","text":"<pre><code>format_ap_short(ap: Airport, mode: Literal[0, 1, 2]) -&gt; str\n</code></pre>"},{"location":"api/bot/#bot.utils.format_demand","title":"format_demand","text":"<pre><code>format_demand(\n    pax_demand: PaxDemand, as_cargo: bool = False\n) -&gt; str\n</code></pre>"},{"location":"api/bot/#bot.utils.format_config","title":"format_config","text":"<pre><code>format_config(cfg: PaxConfig | CargoConfig) -&gt; str\n</code></pre>"},{"location":"api/bot/#bot.utils.format_ticket","title":"format_ticket","text":"<pre><code>format_ticket(\n    ticket: PaxTicket | CargoTicket | VIPTicket,\n) -&gt; str\n</code></pre>"},{"location":"api/bot/#bot.utils.format_modifiers","title":"format_modifiers","text":"<pre><code>format_modifiers(apr: Aircraft)\n</code></pre>"},{"location":"api/bot/#bot.utils.format_warning","title":"format_warning","text":"<pre><code>format_warning(w: Warning)\n</code></pre>"},{"location":"api/bot/#bot.utils.format_num","title":"format_num","text":"<pre><code>format_num(num: float, *_pos) -&gt; str\n</code></pre>"},{"location":"api/bot/#bot.utils.main_server_only","title":"main_server_only","text":"<pre><code>main_server_only()\n</code></pre>"},{"location":"api/db/","title":"Database","text":""},{"location":"api/db/#db","title":"db","text":"<p>Modules:</p> Name Description <code>base</code> <code>client</code> <code>models</code> <code>user</code> <p>Functions:</p> Name Description <code>ensure_pb_exists</code> <code>start</code> <p>Attributes:</p> Name Type Description <code>PB_VERSION</code> <code>base_path</code>"},{"location":"api/db/#db.PB_VERSION","title":"PB_VERSION  <code>module-attribute</code>","text":"<pre><code>PB_VERSION = '0.21.1'\n</code></pre>"},{"location":"api/db/#db.base_path","title":"base_path  <code>module-attribute</code>","text":"<pre><code>base_path = parent\n</code></pre>"},{"location":"api/db/#db.ensure_pb_exists","title":"ensure_pb_exists","text":"<pre><code>ensure_pb_exists()\n</code></pre>"},{"location":"api/db/#db._create_admin","title":"_create_admin  <code>async</code>","text":"<pre><code>_create_admin()\n</code></pre>"},{"location":"api/db/#db.start","title":"start  <code>async</code>","text":"<pre><code>start(db_done: Event)\n</code></pre>"},{"location":"api/db/#db.base","title":"base","text":"<p>Classes:</p> Name Description <code>BaseService</code>"},{"location":"api/db/#db.base.BaseService","title":"BaseService","text":"<pre><code>BaseService(client: AsyncClient)\n</code></pre> <p>Attributes:</p> Name Type Description <code>client</code>"},{"location":"api/db/#db.base.BaseService.client","title":"client  <code>instance-attribute</code>","text":"<pre><code>client = client\n</code></pre>"},{"location":"api/db/#db.client","title":"client","text":"<p>Classes:</p> Name Description <code>PocketBase</code> <p>Attributes:</p> Name Type Description <code>pb</code>"},{"location":"api/db/#db.client.pb","title":"pb  <code>module-attribute</code>","text":"<pre><code>pb = PocketBase()\n</code></pre>"},{"location":"api/db/#db.client.PocketBase","title":"PocketBase","text":"<pre><code>PocketBase(endpoint: str = PB_ENDPOINT)\n</code></pre> <p>Attributes:</p> Name Type Description <code>client</code> <code>users</code>"},{"location":"api/db/#db.client.PocketBase.client","title":"client  <code>instance-attribute</code>","text":"<pre><code>client = AsyncClient(\n    base_url=endpoint, headers={\"User-Agent\": \"am4-db\"}\n)\n</code></pre>"},{"location":"api/db/#db.client.PocketBase._user_api","title":"_user_api  <code>instance-attribute</code>","text":"<pre><code>_user_api = UserAPI(client)\n</code></pre>"},{"location":"api/db/#db.client.PocketBase.users","title":"users  <code>property</code>","text":"<pre><code>users\n</code></pre>"},{"location":"api/db/#db.client.PocketBase._login_admin","title":"_login_admin  <code>async</code>","text":"<pre><code>_login_admin(\n    identity: str = PB_EMAIL, password: str = PB_PASSWORD\n)\n</code></pre>"},{"location":"api/db/#db.models","title":"models","text":"<p>Modules:</p> Name Description <code>aircraft</code> <code>airport</code> <code>demand</code> <code>game</code> <code>route</code> <code>ticket</code> <code>util</code>"},{"location":"api/db/#db.models.aircraft","title":"aircraft","text":"<p>Classes:</p> Name Description <code>PyPaxConfig</code> <code>PyCargoConfig</code> <code>PyAircraft</code> <code>PyAircraftSuggestion</code> <p>Attributes:</p> Name Type Description <code>PyPaxConfigAlgorithm</code> <code>PyCargoConfigAlgorithm</code> <code>PyConfigAlgorithmPax</code> <code>PyConfigAlgorithmCargo</code>"},{"location":"api/db/#db.models.aircraft.PyPaxConfigAlgorithm","title":"PyPaxConfigAlgorithm  <code>module-attribute</code>","text":"<pre><code>PyPaxConfigAlgorithm = Literal[\n    \"AUTO\", \"FJY\", \"FYJ\", \"JFY\", \"JYF\", \"YFJ\", \"YJF\"\n]\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyCargoConfigAlgorithm","title":"PyCargoConfigAlgorithm  <code>module-attribute</code>","text":"<pre><code>PyCargoConfigAlgorithm = Literal['AUTO', 'L', 'H']\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyConfigAlgorithmPax","title":"PyConfigAlgorithmPax  <code>module-attribute</code>","text":"<pre><code>PyConfigAlgorithmPax = Literal[\n    \"AUTO\", \"FJY\", \"FYJ\", \"JFY\", \"JYF\", \"YFJ\", \"YJF\"\n]\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyConfigAlgorithmCargo","title":"PyConfigAlgorithmCargo  <code>module-attribute</code>","text":"<pre><code>PyConfigAlgorithmCargo = Literal['AUTO', 'L', 'H']\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyPaxConfig","title":"PyPaxConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>y</code> <code>int</code> <code>j</code> <code>int</code> <code>f</code> <code>int</code> <code>algorithm</code> <code>PyPaxConfigAlgorithm</code>"},{"location":"api/db/#db.models.aircraft.PyPaxConfig.y","title":"y  <code>instance-attribute</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyPaxConfig.j","title":"j  <code>instance-attribute</code>","text":"<pre><code>j: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyPaxConfig.f","title":"f  <code>instance-attribute</code>","text":"<pre><code>f: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyPaxConfig.algorithm","title":"algorithm  <code>instance-attribute</code>","text":"<pre><code>algorithm: PyPaxConfigAlgorithm\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyCargoConfig","title":"PyCargoConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>l</code> <code>int</code> <code>h</code> <code>int</code> <code>algorithm</code> <code>PyCargoConfigAlgorithm</code>"},{"location":"api/db/#db.models.aircraft.PyCargoConfig.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyCargoConfig.h","title":"h  <code>instance-attribute</code>","text":"<pre><code>h: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyCargoConfig.algorithm","title":"algorithm  <code>instance-attribute</code>","text":"<pre><code>algorithm: PyCargoConfigAlgorithm\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft","title":"PyAircraft","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <code>shortname</code> <code>str</code> <code>manufacturer</code> <code>str</code> <code>name</code> <code>str</code> <code>type</code> <code>Literal['PAX', 'CARGO', 'VIP']</code> <code>priority</code> <code>int</code> <code>eid</code> <code>int</code> <code>ename</code> <code>str</code> <code>speed</code> <code>float</code> <code>fuel</code> <code>float</code> <code>co2</code> <code>float</code> <code>cost</code> <code>int</code> <code>capacity</code> <code>int</code> <code>rwy</code> <code>int</code> <code>check_cost</code> <code>int</code> <code>range</code> <code>int</code> <code>ceil</code> <code>int</code> <code>maint</code> <code>int</code> <code>pilots</code> <code>int</code> <code>crew</code> <code>int</code> <code>engineers</code> <code>int</code> <code>technicians</code> <code>int</code> <code>img</code> <code>str</code> <code>wingspan</code> <code>int</code> <code>length</code> <code>int</code> <code>speed_mod</code> <code>bool</code> <code>fuel_mod</code> <code>bool</code> <code>co2_mod</code> <code>bool</code> <code>fourx_mod</code> <code>bool</code>"},{"location":"api/db/#db.models.aircraft.PyAircraft.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.shortname","title":"shortname  <code>instance-attribute</code>","text":"<pre><code>shortname: str\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.manufacturer","title":"manufacturer  <code>instance-attribute</code>","text":"<pre><code>manufacturer: str\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Literal['PAX', 'CARGO', 'VIP']\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.priority","title":"priority  <code>instance-attribute</code>","text":"<pre><code>priority: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.eid","title":"eid  <code>instance-attribute</code>","text":"<pre><code>eid: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.ename","title":"ename  <code>instance-attribute</code>","text":"<pre><code>ename: str\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.speed","title":"speed  <code>instance-attribute</code>","text":"<pre><code>speed: float\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.fuel","title":"fuel  <code>instance-attribute</code>","text":"<pre><code>fuel: float\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.co2","title":"co2  <code>instance-attribute</code>","text":"<pre><code>co2: float\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.cost","title":"cost  <code>instance-attribute</code>","text":"<pre><code>cost: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.capacity","title":"capacity  <code>instance-attribute</code>","text":"<pre><code>capacity: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.rwy","title":"rwy  <code>instance-attribute</code>","text":"<pre><code>rwy: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.check_cost","title":"check_cost  <code>instance-attribute</code>","text":"<pre><code>check_cost: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.range","title":"range  <code>instance-attribute</code>","text":"<pre><code>range: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.ceil","title":"ceil  <code>instance-attribute</code>","text":"<pre><code>ceil: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.maint","title":"maint  <code>instance-attribute</code>","text":"<pre><code>maint: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.pilots","title":"pilots  <code>instance-attribute</code>","text":"<pre><code>pilots: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.crew","title":"crew  <code>instance-attribute</code>","text":"<pre><code>crew: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.engineers","title":"engineers  <code>instance-attribute</code>","text":"<pre><code>engineers: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.technicians","title":"technicians  <code>instance-attribute</code>","text":"<pre><code>technicians: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.img","title":"img  <code>instance-attribute</code>","text":"<pre><code>img: str\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.wingspan","title":"wingspan  <code>instance-attribute</code>","text":"<pre><code>wingspan: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.length","title":"length  <code>instance-attribute</code>","text":"<pre><code>length: int\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.speed_mod","title":"speed_mod  <code>instance-attribute</code>","text":"<pre><code>speed_mod: bool\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.fuel_mod","title":"fuel_mod  <code>instance-attribute</code>","text":"<pre><code>fuel_mod: bool\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.co2_mod","title":"co2_mod  <code>instance-attribute</code>","text":"<pre><code>co2_mod: bool\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraft.fourx_mod","title":"fourx_mod  <code>instance-attribute</code>","text":"<pre><code>fourx_mod: bool\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraftSuggestion","title":"PyAircraftSuggestion","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>ac</code> <code>PyAircraft</code> <code>score</code> <code>float</code>"},{"location":"api/db/#db.models.aircraft.PyAircraftSuggestion.ac","title":"ac  <code>instance-attribute</code>","text":"<pre><code>ac: PyAircraft\n</code></pre>"},{"location":"api/db/#db.models.aircraft.PyAircraftSuggestion.score","title":"score  <code>instance-attribute</code>","text":"<pre><code>score: float\n</code></pre>"},{"location":"api/db/#db.models.airport","title":"airport","text":"<p>Classes:</p> Name Description <code>PyAirport</code> <code>PyAirportSuggestion</code>"},{"location":"api/db/#db.models.airport.PyAirport","title":"PyAirport","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <code>name</code> <code>str</code> <code>fullname</code> <code>str</code> <code>country</code> <code>str</code> <code>continent</code> <code>str</code> <code>iata</code> <code>str</code> <code>icao</code> <code>str</code> <code>lat</code> <code>float</code> <code>lng</code> <code>float</code> <code>rwy</code> <code>int</code> <code>market</code> <code>int</code> <code>hub_cost</code> <code>int</code> <code>rwy_codes</code> <code>str</code>"},{"location":"api/db/#db.models.airport.PyAirport.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.fullname","title":"fullname  <code>instance-attribute</code>","text":"<pre><code>fullname: str\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.country","title":"country  <code>instance-attribute</code>","text":"<pre><code>country: str\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.continent","title":"continent  <code>instance-attribute</code>","text":"<pre><code>continent: str\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.iata","title":"iata  <code>instance-attribute</code>","text":"<pre><code>iata: str\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.icao","title":"icao  <code>instance-attribute</code>","text":"<pre><code>icao: str\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: float\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.lng","title":"lng  <code>instance-attribute</code>","text":"<pre><code>lng: float\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.rwy","title":"rwy  <code>instance-attribute</code>","text":"<pre><code>rwy: int\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.market","title":"market  <code>instance-attribute</code>","text":"<pre><code>market: int\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.hub_cost","title":"hub_cost  <code>instance-attribute</code>","text":"<pre><code>hub_cost: int\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirport.rwy_codes","title":"rwy_codes  <code>instance-attribute</code>","text":"<pre><code>rwy_codes: str\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirportSuggestion","title":"PyAirportSuggestion","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>ap</code> <code>PyAirport</code> <code>score</code> <code>float</code>"},{"location":"api/db/#db.models.airport.PyAirportSuggestion.ap","title":"ap  <code>instance-attribute</code>","text":"<pre><code>ap: PyAirport\n</code></pre>"},{"location":"api/db/#db.models.airport.PyAirportSuggestion.score","title":"score  <code>instance-attribute</code>","text":"<pre><code>score: float\n</code></pre>"},{"location":"api/db/#db.models.demand","title":"demand","text":"<p>Classes:</p> Name Description <code>PyPaxDemand</code> <code>PyCargoDemand</code>"},{"location":"api/db/#db.models.demand.PyPaxDemand","title":"PyPaxDemand","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>y</code> <code>int</code> <code>j</code> <code>int</code> <code>f</code> <code>int</code>"},{"location":"api/db/#db.models.demand.PyPaxDemand.y","title":"y  <code>instance-attribute</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/db/#db.models.demand.PyPaxDemand.j","title":"j  <code>instance-attribute</code>","text":"<pre><code>j: int\n</code></pre>"},{"location":"api/db/#db.models.demand.PyPaxDemand.f","title":"f  <code>instance-attribute</code>","text":"<pre><code>f: int\n</code></pre>"},{"location":"api/db/#db.models.demand.PyCargoDemand","title":"PyCargoDemand","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>l</code> <code>int</code> <code>h</code> <code>int</code>"},{"location":"api/db/#db.models.demand.PyCargoDemand.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: int\n</code></pre>"},{"location":"api/db/#db.models.demand.PyCargoDemand.h","title":"h  <code>instance-attribute</code>","text":"<pre><code>h: int\n</code></pre>"},{"location":"api/db/#db.models.game","title":"game","text":"<p>Classes:</p> Name Description <code>PyUser</code> <p>Attributes:</p> Name Type Description <code>StrToUpper</code> <code>StrPctToFloat</code> <code>PyUserWhitelistedKeys</code>"},{"location":"api/db/#db.models.game.StrToUpper","title":"StrToUpper  <code>module-attribute</code>","text":"<pre><code>StrToUpper = BeforeValidator(\n    func=lambda x: strip() if isinstance(x, str) else x\n)\n</code></pre>"},{"location":"api/db/#db.models.game.StrPctToFloat","title":"StrPctToFloat  <code>module-attribute</code>","text":"<pre><code>StrPctToFloat = BeforeValidator(\n    func=lambda x: (\n        float(replace(\"%\", \"e-2\"))\n        if isinstance(x, str) and endswith(\"%\")\n        else x\n    )\n)\n</code></pre>"},{"location":"api/db/#db.models.game.PyUserWhitelistedKeys","title":"PyUserWhitelistedKeys  <code>module-attribute</code>","text":"<pre><code>PyUserWhitelistedKeys = Literal[\n    \"game_id\",\n    \"game_name\",\n    \"game_mode\",\n    \"wear_training\",\n    \"repair_training\",\n    \"l_training\",\n    \"h_training\",\n    \"fuel_training\",\n    \"co2_training\",\n    \"fuel_price\",\n    \"co2_price\",\n    \"accumulated_count\",\n    \"load\",\n    \"cargo_load\",\n    \"income_loss_tol\",\n    \"fourx\",\n]\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser","title":"PyUser","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <code>username</code> <code>str</code> <code>game_id</code> <code>int</code> <code>game_name</code> <code>str</code> <code>game_mode</code> <code>Literal['EASY', 'REALISM']</code> <code>discord_id</code> <code>int</code> <code>wear_training</code> <code>int</code> <code>repair_training</code> <code>int</code> <code>l_training</code> <code>int</code> <code>h_training</code> <code>int</code> <code>fuel_training</code> <code>int</code> <code>co2_training</code> <code>int</code> <code>fuel_price</code> <code>int</code> <code>co2_price</code> <code>int</code> <code>accumulated_count</code> <code>int</code> <code>load</code> <code>float</code> <code>cargo_load</code> <code>float</code> <code>income_loss_tol</code> <code>float</code> <code>fourx</code> <code>bool</code> <code>role</code> <code>Literal['BANNED', 'USER', 'TRUSTED_USER', 'HIGHLY_TRUSTED_USER', 'TOP_ALLIANCE_MEMBER', 'TOP_ALLIANCE_ADMIN', 'HELPER', 'MODERATOR', 'ADMIN', 'SUPERUSER']</code> <code>valid</code> <code>bool</code>"},{"location":"api/db/#db.models.game.PyUser.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.game_id","title":"game_id  <code>instance-attribute</code>","text":"<pre><code>game_id: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.game_name","title":"game_name  <code>instance-attribute</code>","text":"<pre><code>game_name: str\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.game_mode","title":"game_mode  <code>instance-attribute</code>","text":"<pre><code>game_mode: Literal['EASY', 'REALISM']\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.discord_id","title":"discord_id  <code>instance-attribute</code>","text":"<pre><code>discord_id: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.wear_training","title":"wear_training  <code>instance-attribute</code>","text":"<pre><code>wear_training: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.repair_training","title":"repair_training  <code>instance-attribute</code>","text":"<pre><code>repair_training: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.l_training","title":"l_training  <code>instance-attribute</code>","text":"<pre><code>l_training: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.h_training","title":"h_training  <code>instance-attribute</code>","text":"<pre><code>h_training: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.fuel_training","title":"fuel_training  <code>instance-attribute</code>","text":"<pre><code>fuel_training: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.co2_training","title":"co2_training  <code>instance-attribute</code>","text":"<pre><code>co2_training: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.fuel_price","title":"fuel_price  <code>instance-attribute</code>","text":"<pre><code>fuel_price: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.co2_price","title":"co2_price  <code>instance-attribute</code>","text":"<pre><code>co2_price: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.accumulated_count","title":"accumulated_count  <code>instance-attribute</code>","text":"<pre><code>accumulated_count: int\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.load","title":"load  <code>instance-attribute</code>","text":"<pre><code>load: float\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.cargo_load","title":"cargo_load  <code>instance-attribute</code>","text":"<pre><code>cargo_load: float\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.income_loss_tol","title":"income_loss_tol  <code>instance-attribute</code>","text":"<pre><code>income_loss_tol: float\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.fourx","title":"fourx  <code>instance-attribute</code>","text":"<pre><code>fourx: bool\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.role","title":"role  <code>instance-attribute</code>","text":"<pre><code>role: Literal[\n    \"BANNED\",\n    \"USER\",\n    \"TRUSTED_USER\",\n    \"HIGHLY_TRUSTED_USER\",\n    \"TOP_ALLIANCE_MEMBER\",\n    \"TOP_ALLIANCE_ADMIN\",\n    \"HELPER\",\n    \"MODERATOR\",\n    \"ADMIN\",\n    \"SUPERUSER\",\n]\n</code></pre>"},{"location":"api/db/#db.models.game.PyUser.valid","title":"valid  <code>instance-attribute</code>","text":"<pre><code>valid: bool\n</code></pre>"},{"location":"api/db/#db.models.route","title":"route","text":"<p>Classes:</p> Name Description <code>PyRoute</code> <code>PyACRouteStopover</code> <code>PyACRouteStopoverNonExistent</code> <code>PyACRoute</code> <p>Attributes:</p> Name Type Description <code>PyACROptionsConfigAlgorithm</code> <code>PyACROptionsMaxDistance</code> <code>PyACROptionsMaxFlightTime</code> <code>PyACROptionsTPDMode</code> <code>PyACROptionsTripsPerDayPerAC</code> <code>PyACROptionsSortBy</code>"},{"location":"api/db/#db.models.route.PyACROptionsConfigAlgorithm","title":"PyACROptionsConfigAlgorithm  <code>module-attribute</code>","text":"<pre><code>PyACROptionsConfigAlgorithm = Literal[\n    PyConfigAlgorithmPax, PyConfigAlgorithmCargo\n]\n</code></pre>"},{"location":"api/db/#db.models.route.PyACROptionsMaxDistance","title":"PyACROptionsMaxDistance  <code>module-attribute</code>","text":"<pre><code>PyACROptionsMaxDistance = float\n</code></pre>"},{"location":"api/db/#db.models.route.PyACROptionsMaxFlightTime","title":"PyACROptionsMaxFlightTime  <code>module-attribute</code>","text":"<pre><code>PyACROptionsMaxFlightTime = float\n</code></pre>"},{"location":"api/db/#db.models.route.PyACROptionsTPDMode","title":"PyACROptionsTPDMode  <code>module-attribute</code>","text":"<pre><code>PyACROptionsTPDMode = Literal[\n    \"AUTO\", \"STRICT_ALLOW_MULTIPLE_AC\", \"STRICT\"\n]\n</code></pre>"},{"location":"api/db/#db.models.route.PyACROptionsTripsPerDayPerAC","title":"PyACROptionsTripsPerDayPerAC  <code>module-attribute</code>","text":"<pre><code>PyACROptionsTripsPerDayPerAC = int\n</code></pre>"},{"location":"api/db/#db.models.route.PyACROptionsSortBy","title":"PyACROptionsSortBy  <code>module-attribute</code>","text":"<pre><code>PyACROptionsSortBy = Literal['PER_TRIP', 'PER_AC_PER_DAY']\n</code></pre>"},{"location":"api/db/#db.models.route.PyRoute","title":"PyRoute","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>pax_demand</code> <code>PyPaxDemand</code> <code>direct_distance</code> <code>float</code>"},{"location":"api/db/#db.models.route.PyRoute.pax_demand","title":"pax_demand  <code>instance-attribute</code>","text":"<pre><code>pax_demand: PyPaxDemand\n</code></pre>"},{"location":"api/db/#db.models.route.PyRoute.direct_distance","title":"direct_distance  <code>instance-attribute</code>","text":"<pre><code>direct_distance: float\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRouteStopover","title":"PyACRouteStopover","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>airport</code> <code>PyAirport</code> <code>full_distance</code> <code>float</code> <code>exists</code> <code>Literal[True]</code>"},{"location":"api/db/#db.models.route.PyACRouteStopover.airport","title":"airport  <code>instance-attribute</code>","text":"<pre><code>airport: PyAirport\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRouteStopover.full_distance","title":"full_distance  <code>instance-attribute</code>","text":"<pre><code>full_distance: float\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRouteStopover.exists","title":"exists  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exists: Literal[True] = Field(True, frozen=True)\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRouteStopoverNonExistent","title":"PyACRouteStopoverNonExistent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>exists</code> <code>Literal[False]</code>"},{"location":"api/db/#db.models.route.PyACRouteStopoverNonExistent.exists","title":"exists  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exists: Literal[False] = Field(False, frozen=True)\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute","title":"PyACRoute","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>route</code> <code>PyRoute</code> <code>config</code> <code>Optional[PyPaxConfig | PyCargoConfig]</code> <code>trips_per_day_per_ac</code> <code>Optional[int]</code> <code>ticket</code> <code>Optional[PyPaxTicket | PyCargoTicket | PyVIPTicket]</code> <code>max_income</code> <code>Optional[float]</code> <code>income</code> <code>Optional[float]</code> <code>fuel</code> <code>Optional[float]</code> <code>co2</code> <code>Optional[float]</code> <code>acheck_cost</code> <code>Optional[float]</code> <code>repair_cost</code> <code>Optional[float]</code> <code>flight_time</code> <code>Optional[float]</code> <code>num_ac</code> <code>Optional[int]</code> <code>needs_stopover</code> <code>Optional[bool]</code> <code>profit</code> <code>Optional[float]</code> <code>contribution</code> <code>Optional[float]</code> <code>ci</code> <code>Optional[int]</code> <code>stopover</code> <code>Optional[PyACRouteStopover | PyACRouteStopoverNonExistent]</code> <code>warnings</code> <code>list[Literal['ERR_DISTANCE_ABOVE_SPECIFIED', 'ERR_DISTANCE_TOO_LONG', 'ERR_DISTANCE_TOO_SHORT', 'REDUCED_CONTRIBUTION', 'ERR_NO_STOPOVER', 'ERR_FLIGHT_TIME_ABOVE_SPECIFIED', 'ERR_INSUFFICIENT_DEMAND', 'ERR_TRIPS_PER_DAY_TOO_HIGH']]</code> <code>valid</code> <code>Optional[bool]</code> <code>max_tpd</code> <code>Optional[int]</code>"},{"location":"api/db/#db.models.route.PyACRoute.route","title":"route  <code>instance-attribute</code>","text":"<pre><code>route: PyRoute\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.config","title":"config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>config: Optional[PyPaxConfig | PyCargoConfig] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.trips_per_day_per_ac","title":"trips_per_day_per_ac  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trips_per_day_per_ac: Optional[int] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.ticket","title":"ticket  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ticket: Optional[\n    PyPaxTicket | PyCargoTicket | PyVIPTicket\n] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.max_income","title":"max_income  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_income: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.income","title":"income  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>income: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.fuel","title":"fuel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fuel: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.co2","title":"co2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>co2: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.acheck_cost","title":"acheck_cost  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>acheck_cost: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.repair_cost","title":"repair_cost  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repair_cost: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.flight_time","title":"flight_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flight_time: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.num_ac","title":"num_ac  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_ac: Optional[int] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.needs_stopover","title":"needs_stopover  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>needs_stopover: Optional[bool] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.profit","title":"profit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>profit: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.contribution","title":"contribution  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contribution: Optional[float] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.ci","title":"ci  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ci: Optional[int] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.stopover","title":"stopover  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stopover: Optional[\n    PyACRouteStopover | PyACRouteStopoverNonExistent\n] = None\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.warnings","title":"warnings  <code>instance-attribute</code>","text":"<pre><code>warnings: list[\n    Literal[\n        \"ERR_DISTANCE_ABOVE_SPECIFIED\",\n        \"ERR_DISTANCE_TOO_LONG\",\n        \"ERR_DISTANCE_TOO_SHORT\",\n        \"REDUCED_CONTRIBUTION\",\n        \"ERR_NO_STOPOVER\",\n        \"ERR_FLIGHT_TIME_ABOVE_SPECIFIED\",\n        \"ERR_INSUFFICIENT_DEMAND\",\n        \"ERR_TRIPS_PER_DAY_TOO_HIGH\",\n    ]\n]\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.valid","title":"valid  <code>instance-attribute</code>","text":"<pre><code>valid: Optional[bool]\n</code></pre>"},{"location":"api/db/#db.models.route.PyACRoute.max_tpd","title":"max_tpd  <code>instance-attribute</code>","text":"<pre><code>max_tpd: Optional[int]\n</code></pre>"},{"location":"api/db/#db.models.ticket","title":"ticket","text":"<p>Classes:</p> Name Description <code>PyPaxTicket</code> <code>PyCargoTicket</code> <code>PyVIPTicket</code>"},{"location":"api/db/#db.models.ticket.PyPaxTicket","title":"PyPaxTicket","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>y</code> <code>int</code> <code>j</code> <code>int</code> <code>f</code> <code>int</code>"},{"location":"api/db/#db.models.ticket.PyPaxTicket.y","title":"y  <code>instance-attribute</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/db/#db.models.ticket.PyPaxTicket.j","title":"j  <code>instance-attribute</code>","text":"<pre><code>j: int\n</code></pre>"},{"location":"api/db/#db.models.ticket.PyPaxTicket.f","title":"f  <code>instance-attribute</code>","text":"<pre><code>f: int\n</code></pre>"},{"location":"api/db/#db.models.ticket.PyCargoTicket","title":"PyCargoTicket","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>l</code> <code>float</code> <code>h</code> <code>float</code>"},{"location":"api/db/#db.models.ticket.PyCargoTicket.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: float\n</code></pre>"},{"location":"api/db/#db.models.ticket.PyCargoTicket.h","title":"h  <code>instance-attribute</code>","text":"<pre><code>h: float\n</code></pre>"},{"location":"api/db/#db.models.ticket.PyVIPTicket","title":"PyVIPTicket","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>y</code> <code>int</code> <code>j</code> <code>int</code> <code>f</code> <code>int</code>"},{"location":"api/db/#db.models.ticket.PyVIPTicket.y","title":"y  <code>instance-attribute</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/db/#db.models.ticket.PyVIPTicket.j","title":"j  <code>instance-attribute</code>","text":"<pre><code>j: int\n</code></pre>"},{"location":"api/db/#db.models.ticket.PyVIPTicket.f","title":"f  <code>instance-attribute</code>","text":"<pre><code>f: int\n</code></pre>"},{"location":"api/db/#db.models.util","title":"util","text":"<p>Functions:</p> Name Description <code>assert_equal_property_names</code>"},{"location":"api/db/#db.models.util.assert_equal_property_names","title":"assert_equal_property_names","text":"<pre><code>assert_equal_property_names(\n    pybind_class: type, pydantic_class: type\n)\n</code></pre>"},{"location":"api/db/#db.user","title":"user","text":"<p>Classes:</p> Name Description <code>UserExtra</code> <code>UserAPI</code> <p>Attributes:</p> Name Type Description <code>DBMessageUser</code>"},{"location":"api/db/#db.user.DBMessageUser","title":"DBMessageUser  <code>module-attribute</code>","text":"<pre><code>DBMessageUser = Literal['found', 'created']\n</code></pre>"},{"location":"api/db/#db.user.UserExtra","title":"UserExtra","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>collectionId</code> <code>str</code> <code>collectionName</code> <code>str</code> <code>created</code> <code>datetime</code> <code>email</code> <code>str | None</code> <code>emailVisibility</code> <code>bool</code> <code>metadata</code> <code>dict | None</code> <code>updated</code> <code>datetime</code> <code>verified</code> <code>bool</code> <code>model_config</code>"},{"location":"api/db/#db.user.UserExtra.collectionId","title":"collectionId  <code>instance-attribute</code>","text":"<pre><code>collectionId: str\n</code></pre>"},{"location":"api/db/#db.user.UserExtra.collectionName","title":"collectionName  <code>instance-attribute</code>","text":"<pre><code>collectionName: str\n</code></pre>"},{"location":"api/db/#db.user.UserExtra.created","title":"created  <code>instance-attribute</code>","text":"<pre><code>created: datetime\n</code></pre>"},{"location":"api/db/#db.user.UserExtra.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email: str | None = None\n</code></pre>"},{"location":"api/db/#db.user.UserExtra.emailVisibility","title":"emailVisibility  <code>instance-attribute</code>","text":"<pre><code>emailVisibility: bool\n</code></pre>"},{"location":"api/db/#db.user.UserExtra.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata: dict | None\n</code></pre>"},{"location":"api/db/#db.user.UserExtra.updated","title":"updated  <code>instance-attribute</code>","text":"<pre><code>updated: datetime\n</code></pre>"},{"location":"api/db/#db.user.UserExtra.verified","title":"verified  <code>instance-attribute</code>","text":"<pre><code>verified: bool\n</code></pre>"},{"location":"api/db/#db.user.UserExtra.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(extra='ignore')\n</code></pre>"},{"location":"api/db/#db.user.UserAPI","title":"UserAPI","text":"<pre><code>UserAPI(client: AsyncClient)\n</code></pre> <p>               Bases: <code>BaseService</code></p> <p>Methods:</p> Name Description <code>get_from_discord</code> <code>update_setting</code> <p>Attributes:</p> Name Type Description <code>client</code>"},{"location":"api/db/#db.user.UserAPI.client","title":"client  <code>instance-attribute</code>","text":"<pre><code>client = client\n</code></pre>"},{"location":"api/db/#db.user.UserAPI._list","title":"_list  <code>async</code>","text":"<pre><code>_list()\n</code></pre>"},{"location":"api/db/#db.user.UserAPI.get_from_discord","title":"get_from_discord  <code>async</code>","text":"<pre><code>get_from_discord(\n    username: str,\n    game_name: str,\n    game_mode: Literal[\"EASY\", \"REALISM\"],\n    discord_id: int,\n) -&gt; tuple[User, UserExtra, DBMessageUser]\n</code></pre>"},{"location":"api/db/#db.user.UserAPI.update_setting","title":"update_setting  <code>async</code>","text":"<pre><code>update_setting(userid: str, key: str, value: str) -&gt; str\n</code></pre>"},{"location":"api/web-api/","title":"Web API","text":""},{"location":"api/web-api/#api","title":"api","text":"<p>Modules:</p> Name Description <code>fapi</code> <code>models</code>"},{"location":"api/web-api/#api.fapi","title":"fapi","text":"<p>Functions:</p> Name Description <code>lifespan</code> <code>construct_acnf_response</code> <code>ac_search</code> <code>construct_apnf_response</code> <code>ap_search</code> <code>route_info</code> <code>ac_route_info</code> <code>ac_route_find_routes</code> <code>start</code> <p>Attributes:</p> Name Type Description <code>app</code> <code>server</code>"},{"location":"api/web-api/#api.fapi.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = FastAPI(\n    title=\"AM4Tools V2 API (Alpha)\",\n    description=\"A collection of calculators and tools for Airline Manager 4, aimed to facilitate statistical analyses and promote the development of third-party tools. This version is primarily rewritten in C++ for performance, in particular, route finding.\\n\\n**This API is currently in alpha** - please report any issues on our [AM4Tools Discord server](https://discord.gg/4tVQHtf), or ping me at @cathayexpress if you encounter critical issues such as 500 Internal Server Error. This project is open source - feel free to open pull requests on [GitHub](https://github.com/cathaypacific8747/am4).\\n\\n# Key features\\n- Fuzzy airport and aircraft search\\n- Basic route details (P2P)\\n- Advanced route details (P2P, with aircraft)\\n- Automatic best stopover, trips per day and seat algorithm selection\\n- Advanced route finder (P2P, with aircraft, origin hub, and filters) - **be careful: the massive response payload may crash this tab**: use Insomnia or Postman instead!\\n- Fuel, CO2, misc costs and contribution estimation\\n\\nAt this stage, **no authentication is required** to access the API. An API token in the future will be required as this scales.\\n\\nThis service is 100% free to use for all users.\\n\\nOpen one of the endpoints and click the try it out button right here in your browser, or download `openapi.json` to test it out!\",\n    version=\"0.1.8\",\n    lifespan=lifespan,\n)\n</code></pre>"},{"location":"api/web-api/#api.fapi.server","title":"server  <code>module-attribute</code>","text":"<pre><code>server = Server(\n    Config(\n        app,\n        host=HOST,\n        port=PORT,\n        reload=RELOAD,\n        server_header=False,\n        log_level=lower(),\n    )\n)\n</code></pre>"},{"location":"api/web-api/#api.fapi.lifespan","title":"lifespan  <code>async</code>","text":"<pre><code>lifespan(app: FastAPI)\n</code></pre>"},{"location":"api/web-api/#api.fapi.construct_acnf_response","title":"construct_acnf_response","text":"<pre><code>construct_acnf_response(\n    param_name: str, ac_sugg: list[Suggestion]\n) -&gt; ORJSONResponse\n</code></pre>"},{"location":"api/web-api/#api.fapi.ac_search","title":"ac_search  <code>async</code>","text":"<pre><code>ac_search(query: FAPIReqACSearchQuery)\n</code></pre>"},{"location":"api/web-api/#api.fapi.construct_apnf_response","title":"construct_apnf_response","text":"<pre><code>construct_apnf_response(\n    param_name: str, ap_sugg: list[Suggestion]\n) -&gt; ORJSONResponse\n</code></pre>"},{"location":"api/web-api/#api.fapi.ap_search","title":"ap_search  <code>async</code>","text":"<pre><code>ap_search(query: FAPIReqAPSearchQuery)\n</code></pre>"},{"location":"api/web-api/#api.fapi.route_info","title":"route_info  <code>async</code>","text":"<pre><code>route_info(\n    origin: FAPIReqAPSearchQuery,\n    destination: FAPIReqAPSearchQuery,\n)\n</code></pre>"},{"location":"api/web-api/#api.fapi.ac_route_info","title":"ac_route_info  <code>async</code>","text":"<pre><code>ac_route_info(\n    origin: FAPIReqAPSearchQuery,\n    destination: FAPIReqAPSearchQuery,\n    ac: FAPIReqACSearchQuery,\n    options: FAPIReqACROptions,\n    user: FAPIReqUser,\n)\n</code></pre>"},{"location":"api/web-api/#api.fapi.ac_route_find_routes","title":"ac_route_find_routes  <code>async</code>","text":"<pre><code>ac_route_find_routes(\n    ap0: FAPIReqAPSearchQuery,\n    ac: FAPIReqACSearchQuery,\n    options: FAPIReqACROptions,\n    user: FAPIReqUser,\n)\n</code></pre>"},{"location":"api/web-api/#api.fapi.start","title":"start  <code>async</code>","text":"<pre><code>start(db_done: Event)\n</code></pre>"},{"location":"api/web-api/#api.models","title":"models","text":"<p>Classes:</p> Name Description <code>FAPIRespAircraft</code> <code>FAPIRespAircraftNotFound</code> <code>FAPIRespAirport</code> <code>FAPIRespAirportNotFound</code> <code>FAPIToken</code> <code>FAPIRespUser</code> <code>FAPIRespUserNotFound</code> <code>FAPIRespACRoute</code> <code>FAPIDestination</code> <code>FAPIRespACRouteFind</code> <code>FAPIRespRoute</code> <code>FAPIReqACROptions</code> <code>FAPIReqUser</code> <p>Attributes:</p> Name Type Description <code>FAPIReqACSearchQuery</code> <code>FAPIReqAPSearchQuery</code> <code>FAPIReqRealism</code>"},{"location":"api/web-api/#api.models.FAPIReqACSearchQuery","title":"FAPIReqACSearchQuery  <code>module-attribute</code>","text":"<pre><code>FAPIReqACSearchQuery = str\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqAPSearchQuery","title":"FAPIReqAPSearchQuery  <code>module-attribute</code>","text":"<pre><code>FAPIReqAPSearchQuery = str\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqRealism","title":"FAPIReqRealism  <code>module-attribute</code>","text":"<pre><code>FAPIReqRealism = bool\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAircraft","title":"FAPIRespAircraft","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <code>aircraft</code> <code>PyAircraft</code>"},{"location":"api/web-api/#api.models.FAPIRespAircraft.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('success', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAircraft.aircraft","title":"aircraft  <code>instance-attribute</code>","text":"<pre><code>aircraft: PyAircraft\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAircraftNotFound","title":"FAPIRespAircraftNotFound","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <code>parameter</code> <code>str</code> <code>suggestions</code> <code>list[PyAircraftSuggestion]</code>"},{"location":"api/web-api/#api.models.FAPIRespAircraftNotFound.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('not_found', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAircraftNotFound.parameter","title":"parameter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameter: str = Field('ac')\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAircraftNotFound.suggestions","title":"suggestions  <code>instance-attribute</code>","text":"<pre><code>suggestions: list[PyAircraftSuggestion]\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAirport","title":"FAPIRespAirport","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <code>airport</code> <code>PyAirport</code>"},{"location":"api/web-api/#api.models.FAPIRespAirport.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('success', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAirport.airport","title":"airport  <code>instance-attribute</code>","text":"<pre><code>airport: PyAirport\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAirportNotFound","title":"FAPIRespAirportNotFound","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <code>parameter</code> <code>str</code> <code>suggestions</code> <code>list[PyAirportSuggestion]</code>"},{"location":"api/web-api/#api.models.FAPIRespAirportNotFound.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('not_found', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAirportNotFound.parameter","title":"parameter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameter: str = Field('ap')\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespAirportNotFound.suggestions","title":"suggestions  <code>instance-attribute</code>","text":"<pre><code>suggestions: list[PyAirportSuggestion]\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIToken","title":"FAPIToken","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>access_token</code> <code>str</code> <code>token_type</code> <code>str</code>"},{"location":"api/web-api/#api.models.FAPIToken.access_token","title":"access_token  <code>instance-attribute</code>","text":"<pre><code>access_token: str\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIToken.token_type","title":"token_type  <code>instance-attribute</code>","text":"<pre><code>token_type: str\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespUser","title":"FAPIRespUser","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <code>user</code> <code>PyUser</code>"},{"location":"api/web-api/#api.models.FAPIRespUser.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('success', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespUser.user","title":"user  <code>instance-attribute</code>","text":"<pre><code>user: PyUser\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespUserNotFound","title":"FAPIRespUserNotFound","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code>"},{"location":"api/web-api/#api.models.FAPIRespUserNotFound.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('not_found', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespACRoute","title":"FAPIRespACRoute","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <code>ap_origin</code> <code>PyAirport</code> <code>ap_destination</code> <code>PyAirport</code> <code>ac</code> <code>PyAircraft</code> <code>ac_route</code> <code>PyACRoute</code>"},{"location":"api/web-api/#api.models.FAPIRespACRoute.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('success', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespACRoute.ap_origin","title":"ap_origin  <code>instance-attribute</code>","text":"<pre><code>ap_origin: PyAirport\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespACRoute.ap_destination","title":"ap_destination  <code>instance-attribute</code>","text":"<pre><code>ap_destination: PyAirport\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespACRoute.ac","title":"ac  <code>instance-attribute</code>","text":"<pre><code>ac: PyAircraft\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespACRoute.ac_route","title":"ac_route  <code>instance-attribute</code>","text":"<pre><code>ac_route: PyACRoute\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIDestination","title":"FAPIDestination","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>airport</code> <code>PyAirport</code> <code>ac_route</code> <code>PyRoute</code>"},{"location":"api/web-api/#api.models.FAPIDestination.airport","title":"airport  <code>instance-attribute</code>","text":"<pre><code>airport: PyAirport\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIDestination.ac_route","title":"ac_route  <code>instance-attribute</code>","text":"<pre><code>ac_route: PyRoute\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespACRouteFind","title":"FAPIRespACRouteFind","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <code>destinations</code> <code>list[FAPIDestination]</code>"},{"location":"api/web-api/#api.models.FAPIRespACRouteFind.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('success', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespACRouteFind.destinations","title":"destinations  <code>instance-attribute</code>","text":"<pre><code>destinations: list[FAPIDestination]\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespRoute","title":"FAPIRespRoute","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <code>ap_origin</code> <code>PyAirport</code> <code>ap_destination</code> <code>PyAirport</code> <code>route</code> <code>PyRoute</code>"},{"location":"api/web-api/#api.models.FAPIRespRoute.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: str = Field('success', frozen=True)\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespRoute.ap_origin","title":"ap_origin  <code>instance-attribute</code>","text":"<pre><code>ap_origin: PyAirport\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespRoute.ap_destination","title":"ap_destination  <code>instance-attribute</code>","text":"<pre><code>ap_destination: PyAirport\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIRespRoute.route","title":"route  <code>instance-attribute</code>","text":"<pre><code>route: PyRoute\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqACROptions","title":"FAPIReqACROptions","text":"<pre><code>FAPIReqACROptions(\n    config_algorithm: PyACROptionsConfigAlgorithm = None,\n    max_distance: PyACROptionsMaxDistance = None,\n    max_flight_time: PyACROptionsMaxFlightTime = None,\n    tpd_mode: PyACROptionsTPDMode = None,\n    trips_per_day_per_ac: PyACROptionsTripsPerDayPerAC = None,\n    sort_by: PyACROptionsSortBy = None,\n)\n</code></pre> <p>Methods:</p> Name Description <code>to_core</code> <p>Attributes:</p> Name Type Description <code>config_algorithm</code> <code>max_distance</code> <code>max_flight_time</code> <code>tpd_mode</code> <code>trips_per_day_per_ac</code> <code>sort_by</code>"},{"location":"api/web-api/#api.models.FAPIReqACROptions.config_algorithm","title":"config_algorithm  <code>instance-attribute</code>","text":"<pre><code>config_algorithm = config_algorithm\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqACROptions.max_distance","title":"max_distance  <code>instance-attribute</code>","text":"<pre><code>max_distance = max_distance\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqACROptions.max_flight_time","title":"max_flight_time  <code>instance-attribute</code>","text":"<pre><code>max_flight_time = max_flight_time\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqACROptions.tpd_mode","title":"tpd_mode  <code>instance-attribute</code>","text":"<pre><code>tpd_mode = tpd_mode\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqACROptions.trips_per_day_per_ac","title":"trips_per_day_per_ac  <code>instance-attribute</code>","text":"<pre><code>trips_per_day_per_ac = trips_per_day_per_ac\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqACROptions.sort_by","title":"sort_by  <code>instance-attribute</code>","text":"<pre><code>sort_by = sort_by\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqACROptions.to_core","title":"to_core","text":"<pre><code>to_core(ac_type: Type) -&gt; Options\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser","title":"FAPIReqUser","text":"<pre><code>FAPIReqUser(\n    realism: FAPIReqRealism = None,\n    wear_training: int = None,\n    repair_training: int = None,\n    l_training: int = None,\n    h_training: int = None,\n    fuel_training: int = None,\n    co2_training: int = None,\n    fuel_price: int = None,\n    co2_price: int = None,\n    accumulated_count: int = None,\n    fourx: bool = None,\n    income_loss_tol: float = None,\n    load: float = None,\n    cargo_load: float = None,\n)\n</code></pre> <p>Methods:</p> Name Description <code>to_core</code> <p>Attributes:</p> Name Type Description <code>realism</code> <code>wear_training</code> <code>repair_training</code> <code>l_training</code> <code>h_training</code> <code>fuel_training</code> <code>co2_training</code> <code>fuel_price</code> <code>co2_price</code> <code>accumulated_count</code> <code>fourx</code> <code>income_loss_tol</code> <code>load</code> <code>cargo_load</code>"},{"location":"api/web-api/#api.models.FAPIReqUser.realism","title":"realism  <code>instance-attribute</code>","text":"<pre><code>realism = realism\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.wear_training","title":"wear_training  <code>instance-attribute</code>","text":"<pre><code>wear_training = wear_training\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.repair_training","title":"repair_training  <code>instance-attribute</code>","text":"<pre><code>repair_training = repair_training\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.l_training","title":"l_training  <code>instance-attribute</code>","text":"<pre><code>l_training = l_training\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.h_training","title":"h_training  <code>instance-attribute</code>","text":"<pre><code>h_training = h_training\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.fuel_training","title":"fuel_training  <code>instance-attribute</code>","text":"<pre><code>fuel_training = fuel_training\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.co2_training","title":"co2_training  <code>instance-attribute</code>","text":"<pre><code>co2_training = co2_training\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.fuel_price","title":"fuel_price  <code>instance-attribute</code>","text":"<pre><code>fuel_price = fuel_price\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.co2_price","title":"co2_price  <code>instance-attribute</code>","text":"<pre><code>co2_price = co2_price\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.accumulated_count","title":"accumulated_count  <code>instance-attribute</code>","text":"<pre><code>accumulated_count = accumulated_count\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.fourx","title":"fourx  <code>instance-attribute</code>","text":"<pre><code>fourx = fourx\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.income_loss_tol","title":"income_loss_tol  <code>instance-attribute</code>","text":"<pre><code>income_loss_tol = income_loss_tol\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.load","title":"load  <code>instance-attribute</code>","text":"<pre><code>load = load\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.cargo_load","title":"cargo_load  <code>instance-attribute</code>","text":"<pre><code>cargo_load = cargo_load\n</code></pre>"},{"location":"api/web-api/#api.models.FAPIReqUser.to_core","title":"to_core","text":"<pre><code>to_core() -&gt; User\n</code></pre>"},{"location":"api/utils/aircraft/","title":"Aircraft","text":""},{"location":"api/utils/aircraft/#utils.aircraft","title":"aircraft","text":"<p>Classes:</p> Name Description <code>Aircraft</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft","title":"Aircraft","text":"<p>Classes:</p> Name Description <code>CargoConfig</code> <code>ParseResult</code> <code>PaxConfig</code> <code>SearchResult</code> <code>SearchType</code> <p>Members:</p> <code>Suggestion</code> <code>Type</code> <p>Members:</p> <p>Methods:</p> Name Description <code>search</code> <code>suggest</code> <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>capacity</code> <code>int</code> <code>ceil</code> <code>int</code> <code>check_cost</code> <code>int</code> <code>co2</code> <code>float</code> <code>co2_mod</code> <code>bool</code> <code>cost</code> <code>int</code> <code>crew</code> <code>int</code> <code>eid</code> <code>int</code> <code>ename</code> <code>str</code> <code>engineers</code> <code>int</code> <code>fourx_mod</code> <code>bool</code> <code>fuel</code> <code>float</code> <code>fuel_mod</code> <code>bool</code> <code>id</code> <code>int</code> <code>img</code> <code>str</code> <code>length</code> <code>int</code> <code>maint</code> <code>int</code> <code>manufacturer</code> <code>str</code> <code>name</code> <code>str</code> <code>pilots</code> <code>int</code> <code>priority</code> <code>int</code> <code>range</code> <code>int</code> <code>rwy</code> <code>int</code> <code>shortname</code> <code>str</code> <code>speed</code> <code>float</code> <code>speed_mod</code> <code>bool</code> <code>technicians</code> <code>int</code> <code>type</code> <code>Type</code> <code>valid</code> <code>bool</code> <code>wingspan</code> <code>int</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.capacity","title":"capacity  <code>property</code>","text":"<pre><code>capacity: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ceil","title":"ceil  <code>property</code>","text":"<pre><code>ceil: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.check_cost","title":"check_cost  <code>property</code>","text":"<pre><code>check_cost: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.co2","title":"co2  <code>property</code>","text":"<pre><code>co2: float\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.co2_mod","title":"co2_mod  <code>property</code>","text":"<pre><code>co2_mod: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.cost","title":"cost  <code>property</code>","text":"<pre><code>cost: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.crew","title":"crew  <code>property</code>","text":"<pre><code>crew: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.eid","title":"eid  <code>property</code>","text":"<pre><code>eid: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ename","title":"ename  <code>property</code>","text":"<pre><code>ename: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.engineers","title":"engineers  <code>property</code>","text":"<pre><code>engineers: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.fourx_mod","title":"fourx_mod  <code>property</code>","text":"<pre><code>fourx_mod: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.fuel","title":"fuel  <code>property</code>","text":"<pre><code>fuel: float\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.fuel_mod","title":"fuel_mod  <code>property</code>","text":"<pre><code>fuel_mod: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.id","title":"id  <code>property</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.img","title":"img  <code>property</code>","text":"<pre><code>img: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.length","title":"length  <code>property</code>","text":"<pre><code>length: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.maint","title":"maint  <code>property</code>","text":"<pre><code>maint: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.manufacturer","title":"manufacturer  <code>property</code>","text":"<pre><code>manufacturer: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.pilots","title":"pilots  <code>property</code>","text":"<pre><code>pilots: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.priority","title":"priority  <code>property</code>","text":"<pre><code>priority: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.range","title":"range  <code>property</code>","text":"<pre><code>range: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.rwy","title":"rwy  <code>property</code>","text":"<pre><code>rwy: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.shortname","title":"shortname  <code>property</code>","text":"<pre><code>shortname: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.speed","title":"speed  <code>property</code>","text":"<pre><code>speed: float\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.speed_mod","title":"speed_mod  <code>property</code>","text":"<pre><code>speed_mod: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.technicians","title":"technicians  <code>property</code>","text":"<pre><code>technicians: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.type","title":"type  <code>property</code>","text":"<pre><code>type: Type\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.wingspan","title":"wingspan  <code>property</code>","text":"<pre><code>wingspan: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig","title":"CargoConfig","text":"<p>Classes:</p> Name Description <code>Algorithm</code> <p>Members:</p> <p>Methods:</p> Name Description <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>algorithm</code> <code>Algorithm</code> <code>h</code> <code>int</code> <code>l</code> <code>int</code> <code>valid</code> <code>bool</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.algorithm","title":"algorithm  <code>property</code>","text":"<pre><code>algorithm: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.h","title":"h  <code>property</code>","text":"<pre><code>h: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.l","title":"l  <code>property</code>","text":"<pre><code>l: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.Algorithm","title":"Algorithm","text":"<pre><code>Algorithm(value: int)\n</code></pre> <p>Members:</p> <p>AUTO</p> <p>L</p> <p>H</p> <p>Attributes:</p> Name Type Description <code>AUTO</code> <code>Algorithm</code> <code>H</code> <code>Algorithm</code> <code>L</code> <code>Algorithm</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.Algorithm.AUTO","title":"AUTO  <code>class-attribute</code>","text":"<pre><code>AUTO: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.Algorithm.H","title":"H  <code>class-attribute</code>","text":"<pre><code>H: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.Algorithm.L","title":"L  <code>class-attribute</code>","text":"<pre><code>L: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.Algorithm.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.Algorithm.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.CargoConfig.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ParseResult","title":"ParseResult","text":"<p>Attributes:</p> Name Type Description <code>co2_mod</code> <code>bool</code> <code>fourx_mod</code> <code>bool</code> <code>fuel_mod</code> <code>bool</code> <code>priority</code> <code>int</code> <code>search_str</code> <code>str</code> <code>search_type</code> <code>SearchType</code> <code>speed_mod</code> <code>bool</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ParseResult.co2_mod","title":"co2_mod  <code>property</code>","text":"<pre><code>co2_mod: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ParseResult.fourx_mod","title":"fourx_mod  <code>property</code>","text":"<pre><code>fourx_mod: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ParseResult.fuel_mod","title":"fuel_mod  <code>property</code>","text":"<pre><code>fuel_mod: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ParseResult.priority","title":"priority  <code>property</code>","text":"<pre><code>priority: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ParseResult.search_str","title":"search_str  <code>property</code>","text":"<pre><code>search_str: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ParseResult.search_type","title":"search_type  <code>property</code>","text":"<pre><code>search_type: SearchType\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.ParseResult.speed_mod","title":"speed_mod  <code>property</code>","text":"<pre><code>speed_mod: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig","title":"PaxConfig","text":"<p>Classes:</p> Name Description <code>Algorithm</code> <p>Members:</p> <p>Methods:</p> Name Description <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>algorithm</code> <code>Algorithm</code> <code>f</code> <code>int</code> <code>j</code> <code>int</code> <code>valid</code> <code>bool</code> <code>y</code> <code>int</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.algorithm","title":"algorithm  <code>property</code>","text":"<pre><code>algorithm: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.f","title":"f  <code>property</code>","text":"<pre><code>f: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.j","title":"j  <code>property</code>","text":"<pre><code>j: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.y","title":"y  <code>property</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm","title":"Algorithm","text":"<pre><code>Algorithm(value: int)\n</code></pre> <p>Members:</p> <p>AUTO</p> <p>FJY</p> <p>FYJ</p> <p>JFY</p> <p>JYF</p> <p>YJF</p> <p>YFJ</p> <p>Attributes:</p> Name Type Description <code>AUTO</code> <code>Algorithm</code> <code>FJY</code> <code>Algorithm</code> <code>FYJ</code> <code>Algorithm</code> <code>JFY</code> <code>Algorithm</code> <code>JYF</code> <code>Algorithm</code> <code>YFJ</code> <code>Algorithm</code> <code>YJF</code> <code>Algorithm</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.AUTO","title":"AUTO  <code>class-attribute</code>","text":"<pre><code>AUTO: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.FJY","title":"FJY  <code>class-attribute</code>","text":"<pre><code>FJY: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.FYJ","title":"FYJ  <code>class-attribute</code>","text":"<pre><code>FYJ: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.JFY","title":"JFY  <code>class-attribute</code>","text":"<pre><code>JFY: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.JYF","title":"JYF  <code>class-attribute</code>","text":"<pre><code>JYF: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.YFJ","title":"YFJ  <code>class-attribute</code>","text":"<pre><code>YFJ: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.YJF","title":"YJF  <code>class-attribute</code>","text":"<pre><code>YJF: Algorithm\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.Algorithm.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.PaxConfig.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchResult","title":"SearchResult","text":"<pre><code>SearchResult(arg0: Aircraft, arg1: ParseResult)\n</code></pre> <p>Attributes:</p> Name Type Description <code>ac</code> <code>Aircraft</code> <code>parse_result</code> <code>ParseResult</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchResult.ac","title":"ac  <code>property</code>","text":"<pre><code>ac: Aircraft\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchResult.parse_result","title":"parse_result  <code>property</code>","text":"<pre><code>parse_result: ParseResult\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchType","title":"SearchType","text":"<pre><code>SearchType(value: int)\n</code></pre> <p>Members:</p> <p>ALL</p> <p>ID</p> <p>SHORTNAME</p> <p>NAME</p> <p>Attributes:</p> Name Type Description <code>ALL</code> <code>SearchType</code> <code>ID</code> <code>SearchType</code> <code>NAME</code> <code>SearchType</code> <code>SHORTNAME</code> <code>SearchType</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchType.ALL","title":"ALL  <code>class-attribute</code>","text":"<pre><code>ALL: SearchType\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchType.ID","title":"ID  <code>class-attribute</code>","text":"<pre><code>ID: SearchType\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchType.NAME","title":"NAME  <code>class-attribute</code>","text":"<pre><code>NAME: SearchType\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchType.SHORTNAME","title":"SHORTNAME  <code>class-attribute</code>","text":"<pre><code>SHORTNAME: SearchType\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchType.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.SearchType.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Suggestion","title":"Suggestion","text":"<pre><code>Suggestion(arg0: Aircraft, arg1: float)\n</code></pre> <p>Attributes:</p> Name Type Description <code>ac</code> <code>Aircraft</code> <code>score</code> <code>float</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Suggestion.ac","title":"ac  <code>property</code>","text":"<pre><code>ac: Aircraft\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Suggestion.score","title":"score  <code>property</code>","text":"<pre><code>score: float\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Type","title":"Type","text":"<pre><code>Type(value: int)\n</code></pre> <p>Members:</p> <p>PAX</p> <p>CARGO</p> <p>VIP</p> <p>Attributes:</p> Name Type Description <code>CARGO</code> <code>Type</code> <code>PAX</code> <code>Type</code> <code>VIP</code> <code>Type</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Type.CARGO","title":"CARGO  <code>class-attribute</code>","text":"<pre><code>CARGO: Type\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Type.PAX","title":"PAX  <code>class-attribute</code>","text":"<pre><code>PAX: Type\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Type.VIP","title":"VIP  <code>class-attribute</code>","text":"<pre><code>VIP: Type\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Type.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.Type.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.search","title":"search  <code>staticmethod</code>","text":"<pre><code>search(s: str, user: User = Default()) -&gt; SearchResult\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.suggest","title":"suggest  <code>staticmethod</code>","text":"<pre><code>suggest(s: ParseResult) -&gt; list[Suggestion]\n</code></pre>"},{"location":"api/utils/aircraft/#utils.aircraft.Aircraft.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/airport/","title":"Airport","text":""},{"location":"api/utils/airport/#utils.airport","title":"airport","text":"<p>Classes:</p> Name Description <code>Airport</code>"},{"location":"api/utils/airport/#utils.airport.Airport","title":"Airport","text":"<p>Classes:</p> Name Description <code>ParseResult</code> <code>SearchResult</code> <code>SearchType</code> <p>Members:</p> <code>Suggestion</code> <p>Methods:</p> Name Description <code>search</code> <code>suggest</code> <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>continent</code> <code>str</code> <code>country</code> <code>str</code> <code>fullname</code> <code>str</code> <code>hub_cost</code> <code>int</code> <code>iata</code> <code>str</code> <code>icao</code> <code>str</code> <code>id</code> <code>int</code> <code>lat</code> <code>float</code> <code>lng</code> <code>float</code> <code>market</code> <code>int</code> <code>name</code> <code>str</code> <code>rwy</code> <code>int</code> <code>rwy_codes</code> <code>str</code> <code>valid</code> <code>bool</code>"},{"location":"api/utils/airport/#utils.airport.Airport.continent","title":"continent  <code>property</code>","text":"<pre><code>continent: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.country","title":"country  <code>property</code>","text":"<pre><code>country: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.fullname","title":"fullname  <code>property</code>","text":"<pre><code>fullname: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.hub_cost","title":"hub_cost  <code>property</code>","text":"<pre><code>hub_cost: int\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.iata","title":"iata  <code>property</code>","text":"<pre><code>iata: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.icao","title":"icao  <code>property</code>","text":"<pre><code>icao: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.id","title":"id  <code>property</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.lat","title":"lat  <code>property</code>","text":"<pre><code>lat: float\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.lng","title":"lng  <code>property</code>","text":"<pre><code>lng: float\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.market","title":"market  <code>property</code>","text":"<pre><code>market: int\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.rwy","title":"rwy  <code>property</code>","text":"<pre><code>rwy: int\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.rwy_codes","title":"rwy_codes  <code>property</code>","text":"<pre><code>rwy_codes: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.ParseResult","title":"ParseResult","text":"<pre><code>ParseResult(arg0: SearchType, arg1: str)\n</code></pre> <p>Attributes:</p> Name Type Description <code>search_str</code> <code>str</code> <code>search_type</code> <code>SearchType</code>"},{"location":"api/utils/airport/#utils.airport.Airport.ParseResult.search_str","title":"search_str  <code>property</code>","text":"<pre><code>search_str: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.ParseResult.search_type","title":"search_type  <code>property</code>","text":"<pre><code>search_type: SearchType\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchResult","title":"SearchResult","text":"<pre><code>SearchResult(arg0: Airport, arg1: ParseResult)\n</code></pre> <p>Attributes:</p> Name Type Description <code>ap</code> <code>Airport</code> <code>parse_result</code> <code>ParseResult</code>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchResult.ap","title":"ap  <code>property</code>","text":"<pre><code>ap: Airport\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchResult.parse_result","title":"parse_result  <code>property</code>","text":"<pre><code>parse_result: ParseResult\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType","title":"SearchType","text":"<pre><code>SearchType(value: int)\n</code></pre> <p>Members:</p> <p>ALL</p> <p>IATA</p> <p>ICAO</p> <p>NAME</p> <p>FULLNAME</p> <p>ID</p> <p>Attributes:</p> Name Type Description <code>ALL</code> <code>SearchType</code> <code>FULLNAME</code> <code>SearchType</code> <code>IATA</code> <code>SearchType</code> <code>ICAO</code> <code>SearchType</code> <code>ID</code> <code>SearchType</code> <code>NAME</code> <code>SearchType</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType.ALL","title":"ALL  <code>class-attribute</code>","text":"<pre><code>ALL: SearchType\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType.FULLNAME","title":"FULLNAME  <code>class-attribute</code>","text":"<pre><code>FULLNAME: SearchType\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType.IATA","title":"IATA  <code>class-attribute</code>","text":"<pre><code>IATA: SearchType\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType.ICAO","title":"ICAO  <code>class-attribute</code>","text":"<pre><code>ICAO: SearchType\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType.ID","title":"ID  <code>class-attribute</code>","text":"<pre><code>ID: SearchType\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType.NAME","title":"NAME  <code>class-attribute</code>","text":"<pre><code>NAME: SearchType\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.SearchType.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.Suggestion","title":"Suggestion","text":"<pre><code>Suggestion(arg0: Airport, arg1: float)\n</code></pre> <p>Attributes:</p> Name Type Description <code>ap</code> <code>Airport</code> <code>score</code> <code>float</code>"},{"location":"api/utils/airport/#utils.airport.Airport.Suggestion.ap","title":"ap  <code>property</code>","text":"<pre><code>ap: Airport\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.Suggestion.score","title":"score  <code>property</code>","text":"<pre><code>score: float\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.search","title":"search  <code>staticmethod</code>","text":"<pre><code>search(s: str) -&gt; SearchResult\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.suggest","title":"suggest  <code>staticmethod</code>","text":"<pre><code>suggest(s: ParseResult) -&gt; list[Suggestion]\n</code></pre>"},{"location":"api/utils/airport/#utils.airport.Airport.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/demand/","title":"Demand","text":""},{"location":"api/utils/demand/#utils.demand","title":"demand","text":"<p>Classes:</p> Name Description <code>CargoDemand</code> <code>PaxDemand</code>"},{"location":"api/utils/demand/#utils.demand.CargoDemand","title":"CargoDemand","text":"<p>Methods:</p> Name Description <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>h</code> <code>int</code> <code>l</code> <code>int</code>"},{"location":"api/utils/demand/#utils.demand.CargoDemand.h","title":"h  <code>property</code>","text":"<pre><code>h: int\n</code></pre>"},{"location":"api/utils/demand/#utils.demand.CargoDemand.l","title":"l  <code>property</code>","text":"<pre><code>l: int\n</code></pre>"},{"location":"api/utils/demand/#utils.demand.CargoDemand.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/demand/#utils.demand.PaxDemand","title":"PaxDemand","text":"<p>Methods:</p> Name Description <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>f</code> <code>int</code> <code>j</code> <code>int</code> <code>y</code> <code>int</code>"},{"location":"api/utils/demand/#utils.demand.PaxDemand.f","title":"f  <code>property</code>","text":"<pre><code>f: int\n</code></pre>"},{"location":"api/utils/demand/#utils.demand.PaxDemand.j","title":"j  <code>property</code>","text":"<pre><code>j: int\n</code></pre>"},{"location":"api/utils/demand/#utils.demand.PaxDemand.y","title":"y  <code>property</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/utils/demand/#utils.demand.PaxDemand.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/game/","title":"Game","text":""},{"location":"api/utils/game/#utils.game","title":"game","text":"<p>Classes:</p> Name Description <code>Campaign</code> <code>User</code>"},{"location":"api/utils/game/#utils.game.Campaign","title":"Campaign","text":"<p>Classes:</p> Name Description <code>Airline</code> <p>Members:</p> <code>Eco</code> <p>Members:</p> <p>Methods:</p> Name Description <code>Default</code> <code>parse</code> <code>estimate_cargo_reputation</code> <code>estimate_pax_reputation</code> <p>Attributes:</p> Name Type Description <code>cargo_activated</code> <code>Airline</code> <code>eco_activated</code> <code>Eco</code> <code>pax_activated</code> <code>Airline</code>"},{"location":"api/utils/game/#utils.game.Campaign.cargo_activated","title":"cargo_activated  <code>property</code>","text":"<pre><code>cargo_activated: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.eco_activated","title":"eco_activated  <code>property</code>","text":"<pre><code>eco_activated: Eco\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.pax_activated","title":"pax_activated  <code>property</code>","text":"<pre><code>pax_activated: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline","title":"Airline","text":"<pre><code>Airline(value: int)\n</code></pre> <p>Members:</p> <p>C4_4HR</p> <p>C4_8HR</p> <p>C4_12HR</p> <p>C4_16HR</p> <p>C4_20HR</p> <p>C4_24HR</p> <p>C3_4HR</p> <p>C3_8HR</p> <p>C3_12HR</p> <p>C3_16HR</p> <p>C3_20HR</p> <p>C3_24HR</p> <p>C2_4HR</p> <p>C2_8HR</p> <p>C2_12HR</p> <p>C2_16HR</p> <p>C2_20HR</p> <p>C2_24HR</p> <p>C1_4HR</p> <p>C1_8HR</p> <p>C1_12HR</p> <p>C1_16HR</p> <p>C1_20HR</p> <p>C1_24HR</p> <p>NONE</p> <p>Attributes:</p> Name Type Description <code>C1_12HR</code> <code>Airline</code> <code>C1_16HR</code> <code>Airline</code> <code>C1_20HR</code> <code>Airline</code> <code>C1_24HR</code> <code>Airline</code> <code>C1_4HR</code> <code>Airline</code> <code>C1_8HR</code> <code>Airline</code> <code>C2_12HR</code> <code>Airline</code> <code>C2_16HR</code> <code>Airline</code> <code>C2_20HR</code> <code>Airline</code> <code>C2_24HR</code> <code>Airline</code> <code>C2_4HR</code> <code>Airline</code> <code>C2_8HR</code> <code>Airline</code> <code>C3_12HR</code> <code>Airline</code> <code>C3_16HR</code> <code>Airline</code> <code>C3_20HR</code> <code>Airline</code> <code>C3_24HR</code> <code>Airline</code> <code>C3_4HR</code> <code>Airline</code> <code>C3_8HR</code> <code>Airline</code> <code>C4_12HR</code> <code>Airline</code> <code>C4_16HR</code> <code>Airline</code> <code>C4_20HR</code> <code>Airline</code> <code>C4_24HR</code> <code>Airline</code> <code>C4_4HR</code> <code>Airline</code> <code>C4_8HR</code> <code>Airline</code> <code>NONE</code> <code>Airline</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C1_12HR","title":"C1_12HR  <code>class-attribute</code>","text":"<pre><code>C1_12HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C1_16HR","title":"C1_16HR  <code>class-attribute</code>","text":"<pre><code>C1_16HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C1_20HR","title":"C1_20HR  <code>class-attribute</code>","text":"<pre><code>C1_20HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C1_24HR","title":"C1_24HR  <code>class-attribute</code>","text":"<pre><code>C1_24HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C1_4HR","title":"C1_4HR  <code>class-attribute</code>","text":"<pre><code>C1_4HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C1_8HR","title":"C1_8HR  <code>class-attribute</code>","text":"<pre><code>C1_8HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C2_12HR","title":"C2_12HR  <code>class-attribute</code>","text":"<pre><code>C2_12HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C2_16HR","title":"C2_16HR  <code>class-attribute</code>","text":"<pre><code>C2_16HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C2_20HR","title":"C2_20HR  <code>class-attribute</code>","text":"<pre><code>C2_20HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C2_24HR","title":"C2_24HR  <code>class-attribute</code>","text":"<pre><code>C2_24HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C2_4HR","title":"C2_4HR  <code>class-attribute</code>","text":"<pre><code>C2_4HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C2_8HR","title":"C2_8HR  <code>class-attribute</code>","text":"<pre><code>C2_8HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C3_12HR","title":"C3_12HR  <code>class-attribute</code>","text":"<pre><code>C3_12HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C3_16HR","title":"C3_16HR  <code>class-attribute</code>","text":"<pre><code>C3_16HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C3_20HR","title":"C3_20HR  <code>class-attribute</code>","text":"<pre><code>C3_20HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C3_24HR","title":"C3_24HR  <code>class-attribute</code>","text":"<pre><code>C3_24HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C3_4HR","title":"C3_4HR  <code>class-attribute</code>","text":"<pre><code>C3_4HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C3_8HR","title":"C3_8HR  <code>class-attribute</code>","text":"<pre><code>C3_8HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C4_12HR","title":"C4_12HR  <code>class-attribute</code>","text":"<pre><code>C4_12HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C4_16HR","title":"C4_16HR  <code>class-attribute</code>","text":"<pre><code>C4_16HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C4_20HR","title":"C4_20HR  <code>class-attribute</code>","text":"<pre><code>C4_20HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C4_24HR","title":"C4_24HR  <code>class-attribute</code>","text":"<pre><code>C4_24HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C4_4HR","title":"C4_4HR  <code>class-attribute</code>","text":"<pre><code>C4_4HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.C4_8HR","title":"C4_8HR  <code>class-attribute</code>","text":"<pre><code>C4_8HR: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.NONE","title":"NONE  <code>class-attribute</code>","text":"<pre><code>NONE: Airline\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Airline.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco","title":"Eco","text":"<pre><code>Eco(value: int)\n</code></pre> <p>Members:</p> <p>C_4HR</p> <p>C_8HR</p> <p>C_12HR</p> <p>C_16HR</p> <p>C_20HR</p> <p>C_24HR</p> <p>NONE</p> <p>Attributes:</p> Name Type Description <code>C_12HR</code> <code>Eco</code> <code>C_16HR</code> <code>Eco</code> <code>C_20HR</code> <code>Eco</code> <code>C_24HR</code> <code>Eco</code> <code>C_4HR</code> <code>Eco</code> <code>C_8HR</code> <code>Eco</code> <code>NONE</code> <code>Eco</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.C_12HR","title":"C_12HR  <code>class-attribute</code>","text":"<pre><code>C_12HR: Eco\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.C_16HR","title":"C_16HR  <code>class-attribute</code>","text":"<pre><code>C_16HR: Eco\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.C_20HR","title":"C_20HR  <code>class-attribute</code>","text":"<pre><code>C_20HR: Eco\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.C_24HR","title":"C_24HR  <code>class-attribute</code>","text":"<pre><code>C_24HR: Eco\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.C_4HR","title":"C_4HR  <code>class-attribute</code>","text":"<pre><code>C_4HR: Eco\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.C_8HR","title":"C_8HR  <code>class-attribute</code>","text":"<pre><code>C_8HR: Eco\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.NONE","title":"NONE  <code>class-attribute</code>","text":"<pre><code>NONE: Eco\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Eco.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.Default","title":"Default  <code>staticmethod</code>","text":"<pre><code>Default() -&gt; Campaign\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.parse","title":"parse  <code>staticmethod</code>","text":"<pre><code>parse(s: str) -&gt; Campaign\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.estimate_cargo_reputation","title":"estimate_cargo_reputation","text":"<pre><code>estimate_cargo_reputation(\n    base_reputation: float = 45,\n) -&gt; float\n</code></pre>"},{"location":"api/utils/game/#utils.game.Campaign.estimate_pax_reputation","title":"estimate_pax_reputation","text":"<pre><code>estimate_pax_reputation(\n    base_reputation: float = 45,\n) -&gt; float\n</code></pre>"},{"location":"api/utils/game/#utils.game.User","title":"User","text":"<p>Classes:</p> Name Description <code>GameMode</code> <p>Members:</p> <code>Role</code> <p>Members:</p> <p>Methods:</p> Name Description <code>Default</code> <code>from_dict</code> <code>to_dict</code> <p>WARNING: dict is passed by reference - will remove added keys!</p> <p>Attributes:</p> Name Type Description <code>accumulated_count</code> <code>int</code> <code>cargo_load</code> <code>float</code> <code>co2_price</code> <code>int</code> <code>co2_training</code> <code>int</code> <code>discord_id</code> <code>int</code> <code>fourx</code> <code>bool</code> <code>fuel_price</code> <code>int</code> <code>fuel_training</code> <code>int</code> <code>game_id</code> <code>int</code> <code>game_mode</code> <code>GameMode</code> <code>game_name</code> <code>str</code> <code>h_training</code> <code>int</code> <code>income_loss_tol</code> <code>float</code> <code>l_training</code> <code>int</code> <code>load</code> <code>float</code> <code>repair_training</code> <code>int</code> <code>role</code> <code>Role</code> <code>username</code> <code>str</code> <code>valid</code> <code>bool</code> <code>wear_training</code> <code>int</code> <code>id</code> <code>str</code>"},{"location":"api/utils/game/#utils.game.User.accumulated_count","title":"accumulated_count  <code>instance-attribute</code>","text":"<pre><code>accumulated_count: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.cargo_load","title":"cargo_load  <code>instance-attribute</code>","text":"<pre><code>cargo_load: float\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.co2_price","title":"co2_price  <code>instance-attribute</code>","text":"<pre><code>co2_price: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.co2_training","title":"co2_training  <code>instance-attribute</code>","text":"<pre><code>co2_training: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.discord_id","title":"discord_id  <code>instance-attribute</code>","text":"<pre><code>discord_id: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.fourx","title":"fourx  <code>instance-attribute</code>","text":"<pre><code>fourx: bool\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.fuel_price","title":"fuel_price  <code>instance-attribute</code>","text":"<pre><code>fuel_price: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.fuel_training","title":"fuel_training  <code>instance-attribute</code>","text":"<pre><code>fuel_training: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.game_id","title":"game_id  <code>instance-attribute</code>","text":"<pre><code>game_id: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.game_mode","title":"game_mode  <code>instance-attribute</code>","text":"<pre><code>game_mode: GameMode\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.game_name","title":"game_name  <code>instance-attribute</code>","text":"<pre><code>game_name: str\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.h_training","title":"h_training  <code>instance-attribute</code>","text":"<pre><code>h_training: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.income_loss_tol","title":"income_loss_tol  <code>instance-attribute</code>","text":"<pre><code>income_loss_tol: float\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.l_training","title":"l_training  <code>instance-attribute</code>","text":"<pre><code>l_training: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.load","title":"load  <code>instance-attribute</code>","text":"<pre><code>load: float\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.repair_training","title":"repair_training  <code>instance-attribute</code>","text":"<pre><code>repair_training: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.role","title":"role  <code>instance-attribute</code>","text":"<pre><code>role: Role\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.valid","title":"valid  <code>instance-attribute</code>","text":"<pre><code>valid: bool\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.wear_training","title":"wear_training  <code>instance-attribute</code>","text":"<pre><code>wear_training: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.GameMode","title":"GameMode","text":"<pre><code>GameMode(value: int)\n</code></pre> <p>Members:</p> <p>EASY</p> <p>REALISM</p> <p>Attributes:</p> Name Type Description <code>EASY</code> <code>GameMode</code> <code>REALISM</code> <code>GameMode</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/game/#utils.game.User.GameMode.EASY","title":"EASY  <code>class-attribute</code>","text":"<pre><code>EASY: GameMode\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.GameMode.REALISM","title":"REALISM  <code>class-attribute</code>","text":"<pre><code>REALISM: GameMode\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.GameMode.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.GameMode.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.Role","title":"Role","text":"<pre><code>Role(value: int)\n</code></pre> <p>Members:</p> <p>BANNED</p> <p>USER</p> <p>TRUSTED_USER</p> <p>ADMIN</p> <p>Attributes:</p> Name Type Description <code>ADMIN</code> <code>Role</code> <code>BANNED</code> <code>Role</code> <code>TRUSTED_USER</code> <code>Role</code> <code>USER</code> <code>Role</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/game/#utils.game.User.Role.ADMIN","title":"ADMIN  <code>class-attribute</code>","text":"<pre><code>ADMIN: Role\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.Role.BANNED","title":"BANNED  <code>class-attribute</code>","text":"<pre><code>BANNED: Role\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.Role.TRUSTED_USER","title":"TRUSTED_USER  <code>class-attribute</code>","text":"<pre><code>TRUSTED_USER: Role\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.Role.USER","title":"USER  <code>class-attribute</code>","text":"<pre><code>USER: Role\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.Role.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.Role.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.Default","title":"Default  <code>staticmethod</code>","text":"<pre><code>Default(realism: bool = False) -&gt; User\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(arg0: dict) -&gt; User\n</code></pre>"},{"location":"api/utils/game/#utils.game.User.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>WARNING: dict is passed by reference - will remove added keys!</p>"},{"location":"api/utils/route/","title":"Route","text":""},{"location":"api/utils/route/#utils.route","title":"route","text":"<p>Classes:</p> Name Description <code>AircraftRoute</code> <code>Destination</code> <code>Route</code> <code>RoutesSearch</code> <code>SameOdException</code>"},{"location":"api/utils/route/#utils.route.AircraftRoute","title":"AircraftRoute","text":"<p>Classes:</p> Name Description <code>Options</code> <code>Stopover</code> <code>Warning</code> <p>Members:</p> <p>Methods:</p> Name Description <code>calc_fuel</code> <code>create</code> <code>estimate_load</code> <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>acheck_cost</code> <code>float</code> <code>ci</code> <code>int</code> <code>co2</code> <code>float</code> <code>config</code> <code>PaxConfig | CargoConfig</code> <code>contribution</code> <code>float</code> <code>flight_time</code> <code>float</code> <code>fuel</code> <code>float</code> <code>income</code> <code>float</code> <code>max_income</code> <code>float</code> <code>max_tpd</code> <code>int | None</code> <code>needs_stopover</code> <code>bool</code> <code>num_ac</code> <code>int</code> <code>profit</code> <code>float</code> <code>repair_cost</code> <code>float</code> <code>route</code> <code>Route</code> <code>stopover</code> <code>Stopover</code> <code>ticket</code> <code>PaxTicket | CargoTicket | VIPTicket</code> <code>trips_per_day_per_ac</code> <code>int</code> <code>valid</code> <code>bool</code> <code>warnings</code> <code>list[Warning]</code>"},{"location":"api/utils/route/#utils.route.AircraftRoute.acheck_cost","title":"acheck_cost  <code>property</code>","text":"<pre><code>acheck_cost: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.ci","title":"ci  <code>property</code>","text":"<pre><code>ci: int\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.co2","title":"co2  <code>property</code>","text":"<pre><code>co2: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.config","title":"config  <code>property</code>","text":"<pre><code>config: PaxConfig | CargoConfig\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.contribution","title":"contribution  <code>property</code>","text":"<pre><code>contribution: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.flight_time","title":"flight_time  <code>property</code>","text":"<pre><code>flight_time: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.fuel","title":"fuel  <code>property</code>","text":"<pre><code>fuel: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.income","title":"income  <code>property</code>","text":"<pre><code>income: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.max_income","title":"max_income  <code>property</code>","text":"<pre><code>max_income: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.max_tpd","title":"max_tpd  <code>property</code>","text":"<pre><code>max_tpd: int | None\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.needs_stopover","title":"needs_stopover  <code>property</code>","text":"<pre><code>needs_stopover: bool\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.num_ac","title":"num_ac  <code>property</code>","text":"<pre><code>num_ac: int\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.profit","title":"profit  <code>property</code>","text":"<pre><code>profit: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.repair_cost","title":"repair_cost  <code>property</code>","text":"<pre><code>repair_cost: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.route","title":"route  <code>property</code>","text":"<pre><code>route: Route\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.stopover","title":"stopover  <code>property</code>","text":"<pre><code>stopover: Stopover\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.ticket","title":"ticket  <code>property</code>","text":"<pre><code>ticket: PaxTicket | CargoTicket | VIPTicket\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.trips_per_day_per_ac","title":"trips_per_day_per_ac  <code>property</code>","text":"<pre><code>trips_per_day_per_ac: int\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.warnings","title":"warnings  <code>property</code>","text":"<pre><code>warnings: list[Warning]\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options","title":"Options","text":"<pre><code>Options(\n    tpd_mode: TPDMode = AUTO,\n    trips_per_day_per_ac: int = 1,\n    max_distance: float = 20015.086796020572,\n    max_flight_time: float = 24.0,\n    config_algorithm: None | Algorithm | Algorithm = None,\n    sort_by: SortBy = PER_TRIP,\n)\n</code></pre> <p>Classes:</p> Name Description <code>SortBy</code> <p>Members:</p> <code>TPDMode</code> <p>Members:</p> <p>Attributes:</p> Name Type Description <code>config_algorithm</code> <code>None | Algorithm | Algorithm</code> <code>max_distance</code> <code>float</code> <code>max_flight_time</code> <code>float</code> <code>sort_by</code> <code>SortBy</code> <code>tpd_mode</code> <code>TPDMode</code> <code>trips_per_day_per_ac</code> <code>int</code>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.config_algorithm","title":"config_algorithm  <code>instance-attribute</code>","text":"<pre><code>config_algorithm: None | Algorithm | Algorithm\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.max_distance","title":"max_distance  <code>instance-attribute</code>","text":"<pre><code>max_distance: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.max_flight_time","title":"max_flight_time  <code>instance-attribute</code>","text":"<pre><code>max_flight_time: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.sort_by","title":"sort_by  <code>instance-attribute</code>","text":"<pre><code>sort_by: SortBy\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.tpd_mode","title":"tpd_mode  <code>instance-attribute</code>","text":"<pre><code>tpd_mode: TPDMode\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.trips_per_day_per_ac","title":"trips_per_day_per_ac  <code>instance-attribute</code>","text":"<pre><code>trips_per_day_per_ac: int\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.SortBy","title":"SortBy","text":"<pre><code>SortBy(value: int)\n</code></pre> <p>Members:</p> <p>PER_TRIP</p> <p>PER_AC_PER_DAY</p> <p>Attributes:</p> Name Type Description <code>PER_AC_PER_DAY</code> <code>SortBy</code> <code>PER_TRIP</code> <code>SortBy</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.SortBy.PER_AC_PER_DAY","title":"PER_AC_PER_DAY  <code>class-attribute</code>","text":"<pre><code>PER_AC_PER_DAY: SortBy\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.SortBy.PER_TRIP","title":"PER_TRIP  <code>class-attribute</code>","text":"<pre><code>PER_TRIP: SortBy\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.SortBy.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.SortBy.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.TPDMode","title":"TPDMode","text":"<pre><code>TPDMode(value: int)\n</code></pre> <p>Members:</p> <p>AUTO</p> <p>STRICT_ALLOW_MULTIPLE_AC</p> <p>STRICT</p> <p>Attributes:</p> Name Type Description <code>AUTO</code> <code>TPDMode</code> <code>STRICT</code> <code>TPDMode</code> <code>STRICT_ALLOW_MULTIPLE_AC</code> <code>TPDMode</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.TPDMode.AUTO","title":"AUTO  <code>class-attribute</code>","text":"<pre><code>AUTO: TPDMode\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.TPDMode.STRICT","title":"STRICT  <code>class-attribute</code>","text":"<pre><code>STRICT: TPDMode\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.TPDMode.STRICT_ALLOW_MULTIPLE_AC","title":"STRICT_ALLOW_MULTIPLE_AC  <code>class-attribute</code>","text":"<pre><code>STRICT_ALLOW_MULTIPLE_AC: TPDMode\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.TPDMode.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Options.TPDMode.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Stopover","title":"Stopover","text":"<p>Methods:</p> Name Description <code>find_by_efficiency</code> <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>airport</code> <code>Airport</code> <code>exists</code> <code>bool</code> <code>full_distance</code> <code>float</code>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Stopover.airport","title":"airport  <code>property</code>","text":"<pre><code>airport: Airport\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Stopover.exists","title":"exists  <code>property</code>","text":"<pre><code>exists: bool\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Stopover.full_distance","title":"full_distance  <code>property</code>","text":"<pre><code>full_distance: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Stopover.find_by_efficiency","title":"find_by_efficiency  <code>staticmethod</code>","text":"<pre><code>find_by_efficiency(\n    origin: Airport,\n    destination: Airport,\n    aircraft: Aircraft,\n    game_mode: GameMode,\n) -&gt; Stopover\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Stopover.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning","title":"Warning","text":"<pre><code>Warning(value: int)\n</code></pre> <p>Members:</p> <p>ERR_RWY_TOO_SHORT</p> <p>ERR_DISTANCE_ABOVE_SPECIFIED</p> <p>ERR_DISTANCE_TOO_LONG</p> <p>ERR_DISTANCE_TOO_SHORT</p> <p>REDUCED_CONTRIBUTION</p> <p>ERR_NO_STOPOVER</p> <p>ERR_FLIGHT_TIME_ABOVE_SPECIFIED</p> <p>ERR_INSUFFICIENT_DEMAND</p> <p>ERR_TRIPS_PER_DAY_TOO_HIGH</p> <p>Attributes:</p> Name Type Description <code>ERR_DISTANCE_ABOVE_SPECIFIED</code> <code>Warning</code> <code>ERR_DISTANCE_TOO_LONG</code> <code>Warning</code> <code>ERR_DISTANCE_TOO_SHORT</code> <code>Warning</code> <code>ERR_FLIGHT_TIME_ABOVE_SPECIFIED</code> <code>Warning</code> <code>ERR_INSUFFICIENT_DEMAND</code> <code>Warning</code> <code>ERR_NO_STOPOVER</code> <code>Warning</code> <code>ERR_RWY_TOO_SHORT</code> <code>Warning</code> <code>ERR_TRIPS_PER_DAY_TOO_HIGH</code> <code>Warning</code> <code>REDUCED_CONTRIBUTION</code> <code>Warning</code> <code>name</code> <code>str</code> <code>value</code> <code>int</code>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.ERR_DISTANCE_ABOVE_SPECIFIED","title":"ERR_DISTANCE_ABOVE_SPECIFIED  <code>class-attribute</code>","text":"<pre><code>ERR_DISTANCE_ABOVE_SPECIFIED: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.ERR_DISTANCE_TOO_LONG","title":"ERR_DISTANCE_TOO_LONG  <code>class-attribute</code>","text":"<pre><code>ERR_DISTANCE_TOO_LONG: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.ERR_DISTANCE_TOO_SHORT","title":"ERR_DISTANCE_TOO_SHORT  <code>class-attribute</code>","text":"<pre><code>ERR_DISTANCE_TOO_SHORT: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.ERR_FLIGHT_TIME_ABOVE_SPECIFIED","title":"ERR_FLIGHT_TIME_ABOVE_SPECIFIED  <code>class-attribute</code>","text":"<pre><code>ERR_FLIGHT_TIME_ABOVE_SPECIFIED: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.ERR_INSUFFICIENT_DEMAND","title":"ERR_INSUFFICIENT_DEMAND  <code>class-attribute</code>","text":"<pre><code>ERR_INSUFFICIENT_DEMAND: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.ERR_NO_STOPOVER","title":"ERR_NO_STOPOVER  <code>class-attribute</code>","text":"<pre><code>ERR_NO_STOPOVER: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.ERR_RWY_TOO_SHORT","title":"ERR_RWY_TOO_SHORT  <code>class-attribute</code>","text":"<pre><code>ERR_RWY_TOO_SHORT: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.ERR_TRIPS_PER_DAY_TOO_HIGH","title":"ERR_TRIPS_PER_DAY_TOO_HIGH  <code>class-attribute</code>","text":"<pre><code>ERR_TRIPS_PER_DAY_TOO_HIGH: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.REDUCED_CONTRIBUTION","title":"REDUCED_CONTRIBUTION  <code>class-attribute</code>","text":"<pre><code>REDUCED_CONTRIBUTION: Warning\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.Warning.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.calc_fuel","title":"calc_fuel  <code>staticmethod</code>","text":"<pre><code>calc_fuel(\n    ac: Aircraft,\n    distance: float,\n    user: User = Default(),\n    ci: int = 200,\n) -&gt; float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    ap0: Airport,\n    ap1: Airport,\n    ac: Aircraft,\n    options: Options = Options(),\n    user: User = Default(),\n) -&gt; AircraftRoute\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.estimate_load","title":"estimate_load  <code>staticmethod</code>","text":"<pre><code>estimate_load(\n    reputation: float = 87,\n    autoprice_ratio: float = 1.06,\n    has_stopover: bool = False,\n) -&gt; float\n</code></pre>"},{"location":"api/utils/route/#utils.route.AircraftRoute.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/route/#utils.route.Destination","title":"Destination","text":"<p>Methods:</p> Name Description <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>ac_route</code> <code>AircraftRoute</code> <code>airport</code> <code>Airport</code> <code>origin</code> <code>Airport</code>"},{"location":"api/utils/route/#utils.route.Destination.ac_route","title":"ac_route  <code>property</code>","text":"<pre><code>ac_route: AircraftRoute\n</code></pre>"},{"location":"api/utils/route/#utils.route.Destination.airport","title":"airport  <code>property</code>","text":"<pre><code>airport: Airport\n</code></pre>"},{"location":"api/utils/route/#utils.route.Destination.origin","title":"origin  <code>property</code>","text":"<pre><code>origin: Airport\n</code></pre>"},{"location":"api/utils/route/#utils.route.Destination.to_dict","title":"to_dict","text":"<pre><code>to_dict(include_origin: bool = False) -&gt; dict\n</code></pre>"},{"location":"api/utils/route/#utils.route.Route","title":"Route","text":"<p>Methods:</p> Name Description <code>create</code> <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>direct_distance</code> <code>float</code> <code>pax_demand</code> <code>PaxDemand</code> <code>valid</code> <code>bool</code>"},{"location":"api/utils/route/#utils.route.Route.direct_distance","title":"direct_distance  <code>property</code>","text":"<pre><code>direct_distance: float\n</code></pre>"},{"location":"api/utils/route/#utils.route.Route.pax_demand","title":"pax_demand  <code>property</code>","text":"<pre><code>pax_demand: PaxDemand\n</code></pre>"},{"location":"api/utils/route/#utils.route.Route.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre>"},{"location":"api/utils/route/#utils.route.Route.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(ap0: Airport, ap1: Airport) -&gt; Route\n</code></pre>"},{"location":"api/utils/route/#utils.route.Route.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/route/#utils.route.RoutesSearch","title":"RoutesSearch","text":"<pre><code>RoutesSearch(\n    ap0: list[Airport],\n    ac: Aircraft,\n    options: Options = Options(),\n    user: User = Default(),\n)\n</code></pre> <p>Methods:</p> Name Description <code>get</code>"},{"location":"api/utils/route/#utils.route.RoutesSearch._get_columns","title":"_get_columns","text":"<pre><code>_get_columns(\n    dests: list[Destination], include_origin: bool = False\n) -&gt; dict[str, list]\n</code></pre>"},{"location":"api/utils/route/#utils.route.RoutesSearch.get","title":"get","text":"<pre><code>get() -&gt; list[Destination]\n</code></pre>"},{"location":"api/utils/route/#utils.route.SameOdException","title":"SameOdException","text":"<p>               Bases: <code>Exception</code></p>"},{"location":"api/utils/ticket/","title":"Ticket","text":""},{"location":"api/utils/ticket/#utils.ticket","title":"ticket","text":"<p>Classes:</p> Name Description <code>CargoTicket</code> <code>PaxTicket</code> <code>VIPTicket</code>"},{"location":"api/utils/ticket/#utils.ticket.CargoTicket","title":"CargoTicket","text":"<p>Methods:</p> Name Description <code>from_optimal</code> <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>h</code> <code>float</code> <code>l</code> <code>float</code>"},{"location":"api/utils/ticket/#utils.ticket.CargoTicket.h","title":"h  <code>property</code>","text":"<pre><code>h: float\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.CargoTicket.l","title":"l  <code>property</code>","text":"<pre><code>l: float\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.CargoTicket.from_optimal","title":"from_optimal  <code>staticmethod</code>","text":"<pre><code>from_optimal(\n    distance: float, game_mode: GameMode = EASY\n) -&gt; PaxTicket\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.CargoTicket.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.PaxTicket","title":"PaxTicket","text":"<p>Methods:</p> Name Description <code>from_optimal</code> <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>f</code> <code>int</code> <code>j</code> <code>int</code> <code>y</code> <code>int</code>"},{"location":"api/utils/ticket/#utils.ticket.PaxTicket.f","title":"f  <code>property</code>","text":"<pre><code>f: int\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.PaxTicket.j","title":"j  <code>property</code>","text":"<pre><code>j: int\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.PaxTicket.y","title":"y  <code>property</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.PaxTicket.from_optimal","title":"from_optimal  <code>staticmethod</code>","text":"<pre><code>from_optimal(\n    distance: float, game_mode: GameMode = EASY\n) -&gt; PaxTicket\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.PaxTicket.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.VIPTicket","title":"VIPTicket","text":"<p>Methods:</p> Name Description <code>from_optimal</code> <code>to_dict</code> <p>Attributes:</p> Name Type Description <code>f</code> <code>int</code> <code>j</code> <code>int</code> <code>y</code> <code>int</code>"},{"location":"api/utils/ticket/#utils.ticket.VIPTicket.f","title":"f  <code>property</code>","text":"<pre><code>f: int\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.VIPTicket.j","title":"j  <code>property</code>","text":"<pre><code>j: int\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.VIPTicket.y","title":"y  <code>property</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.VIPTicket.from_optimal","title":"from_optimal  <code>staticmethod</code>","text":"<pre><code>from_optimal(\n    distance: float, game_mode: GameMode = EASY\n) -&gt; VIPTicket\n</code></pre>"},{"location":"api/utils/ticket/#utils.ticket.VIPTicket.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre>"},{"location":"assets/scripts/demand-research/","title":"Index","text":"<p>see old directory folder</p>"},{"location":"development/core/","title":"Core","text":""},{"location":"development/core/#development","title":"Development","text":"<p>If you are using VSCode, install the recommended extensions and use Tasks instead of manually executing the commands.</p>"},{"location":"development/core/#modifying-it","title":"Modifying it","text":"<p>The main entry point is the debug executable.</p> <p>A C++17 compliant compiler and Linux system is required to build it.</p> <p>Tip for VSCode users</p> <p>Set build target and launch.</p> <p><pre><code>sudo apt-get install build-essential\n# optionally install vtune for profiling\n\ncd src/am4/utils\nmkdir build\ncd build\ncmake .. &amp;&amp; cmake --build . --target _core_executable &amp;&amp; ./_core_executable\n</code></pre> Note that the <code>BUILD_PYBIND</code> definition/directives controls whether the pybind11 bindings are included. It is set to 0 when building the executable.</p>"},{"location":"development/core/#create-the-python-bindings","title":"Create the Python bindings","text":"<p>Tip for VSCode users</p> <p>Run the <code>py: reinstall</code> task.</p> <pre><code># in root dir:\nsudo apt-get install python3-dev python3-pip\npip3 install virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\n\npip3 install --verbose \".[dev,api,bot]\" --config-settings=cmake.define.COPY_DATA=1\npytest\ncd src/am4/utils\npython3 generate-stubs.py\n# pip3 uninstall src/am4/utils -y\n</code></pre> <p>The <code>am4</code> package and data files will then be installed in your site-packages, ready for use: <pre><code>from am4.utils.db import init\nfrom am4.utils.aircraft import Aircraft\ninit() # IMPORTANT: loads the aircraft, airport and routes etc.\na = Aircraft.search(\"b744\")\nprint(a.ac)\n</code></pre> To learn more on how to use it, check out the tests, generated stubs or the API reference.</p>"},{"location":"development/discord-bot/","title":"Discord Bot","text":"<p>Important</p> <p>The core must be built before running the bot.</p>"},{"location":"development/discord-bot/#configuration-file","title":"Configuration File","text":"<p>The database and API can run out of the box without any configuration file using the defaults. However, running the discord bot/building the frontend will require you to provide custom config.</p> <p>To do this, rename <code>./config.example.json</code> to <code>./config.json</code> and modify it. Then, run: <pre><code>python3 -m src.am4 cfg set config.json\n</code></pre> This will verify and persist the settings to <code>./src/am4/.config.json</code>, which is used in future calls.</p>"},{"location":"development/discord-bot/#database","title":"Database","text":"<p>User authentication is handled by pocketbase, a lightweight SQLite-based backend supporting OAuth2.0.</p> <p>It is automatically started before the API/discord bot when using the CLI.</p>"},{"location":"development/discord-bot/#discord-bot","title":"Discord bot","text":"<p>It is similar to the API in design, but is more sophisticated in that it reads users' roles to determine their game mode.</p> <p>To start it, use: <pre><code>python3 -m src.am4 start bot\n</code></pre></p> Documentation for legacy code, click to expand."},{"location":"development/discord-bot/#features","title":"Features","text":"<p>Old bot:</p> <ul> <li>calculates essential statistics<ul> <li>most distance-efficient stopovers</li> <li>route demands, best seat configurations, best ticket prices, estimated income</li> <li>player rank, mode, achievements, fleet</li> <li>alliance rank, share value, contribution</li> <li>aircraft characteristics and profit</li> <li>airport characteristics</li> </ul> </li> <li>CSV export for route queries</li> <li>fuel/CO2 notifications</li> <li>aircraft characteristics comparisons</li> <li>internal Star Alliance tools (now disbanded)<ul> <li>adding competitor alliances to watchlist</li> <li>alliance comparisons over time: value,contribution/day, rate of changes</li> <li>realtime alliance-member comparisons: SV/contribution distribution</li> <li>member tracking: cheat detection tools, departure pattern identification</li> </ul> </li> </ul>"},{"location":"development/discord-bot/#public","title":"Public","text":"<ul> <li><code>$route|stop &lt;airport&gt; &lt;airport&gt; &lt;aircraft&gt; [flights_per_day] [reputation]</code>: finds the best route between two airports</li> </ul> <ul> <li><code>$routes &lt;airport&gt; &lt;aircraft&gt; &lt;max_distance&gt; &lt;flights_per_day&gt; [reputation]</code>: finds the best destinations from a certain airport, sorted by decreasing estimated income</li> </ul> <ul> <li><code>$user [player]</code>: shows player (and associated alliance if found) statistics</li> </ul> <ul> <li><code>$fleet [player]</code>: shows player fleet and estimated income</li> </ul> <ul> <li><code>$info &lt;aircraft&gt;</code>: shows basic aircraft information and rough profit estimations</li> </ul> <ul> <li><code>$compare &lt;aircraft&gt;</code>: compares two aircrafts</li> </ul> <ul> <li><code>$search &lt;aircraft&gt;</code>: finds the associated aircraft shortname for aircraft commands</li> </ul> <ul> <li><code>$airport &lt;airport&gt;</code>: shows airport information</li> </ul> <ul> <li><code>$price f[fuel_price] c[co2_price]</code>: notifies everyone for the fuel price</li> </ul>"},{"location":"development/discord-bot/#internal-alliance-tools","title":"Internal Alliance Tools","text":"<ul> <li><code>$memberCompare &lt;player&gt; &lt;player&gt;</code>: compares descending structure of contribution/day and SV</li> </ul> <p> - <code>$alliance &lt;alliance&gt;</code>: shows AV progression and d(AV)/dt.</p> <p> - <code>$allianceCompare &lt;alliance&gt; &lt;alliance&gt;</code>: compares AV progression and gap difference over time, shows 48h/12h-average contribution/day graphs</p> <p> - <code>$member &lt;player&gt; [player[]]</code> shows contribution/day, total contribution and SV history for 1+ members</p> <p> - <code>$actions &lt;player&gt; [maxResults]</code>: shows log of estimated departures, contributions and income</p> <p> - <code>$watchlist [add|+, remove|rm|-] [alliance]</code>: shows, adds or remove alliance(s) to the watchlist</p>"},{"location":"development/quickstart/","title":"Quickstart","text":"<p>This tutorial shows you how to quickly host your own instance of AM4 bot using Docker.</p> <p>Requirements:</p> <ul> <li>OS: Linux/Windows/MacOS</li> <li>RAM: 4GB</li> <li>Disk space: 1GB</li> <li>Docker</li> </ul> <p>If you are on Windows, it is recommended to use WSL2 alongside Docker.</p>"},{"location":"development/quickstart/#installation","title":"Installation","text":"<p>Clone the repository and run inside: <pre><code>docker build -t am4 .\ndocker run -d -p 8002:8002 -p 8090:8090 --name am4-dev am4\n# sudo docker exec -it am4-dev bash\n</code></pre> Access the API docs at <code>localhost:8002/docs</code> and database admin UI at <code>localhost:8090/_</code>.</p>"},{"location":"development/quickstart/#bot","title":"Bot","text":"<p>If you would also like to run the discord bot, you must load your custom configuration file (more info): <pre><code>docker run -d -p 8002:8002 -p 8090:8090 --name am4-dev am4 tail -f /dev/null\nmv config.example.json config.json\n# edit config.json\ndocker cp config.json am4-dev:/app/config.json\ndocker exec am4-dev python3 -m src.am4 cfg set config.json\ndocker exec -d am4-dev python3 -m src.am4 start api,bot\n</code></pre></p>"},{"location":"development/web-api/","title":"Web API","text":"<p>Important</p> <p>The core must be built before running the API.</p>"},{"location":"development/web-api/#web-api","title":"Web API","text":"<p>The core are exposed to the web using FastAPI. Validation on query params/body is handled by Pydantic models defined under <code>src/am4/db/models</code>.</p> <p>To start it, use: <pre><code>python3 -m src.am4 start api\n</code></pre> it should be running on <code>http://localhost:8002</code> and look like this:</p> <p></p>"},{"location":"guides/configuration/","title":"How do configure an aircraft?","text":"<p>Imagine going to a camping trip. You have a limited space in your  backpack and you want to pack the items that are most useful to you. How would you determine the best way to pack the backpack?</p> <p>The ultimate goal is make sure you can:</p> <ul> <li>understand the general process of seat configuration in a simplified example</li> <li>understand the interplay between ticket prices and seat classes</li> <li>explain when and why it's better to do YJF or FJY.</li> <li>formulate an algorithm that optimally finds the configuration given the route distance and demand</li> </ul> <p>This guide is written for technical players who want to learn the principles of the game mechanics.</p> <p>Reading time: ~15 minutes.</p> <p>Skip to TLDR for a quick summary.</p> <p>Experimental</p> <p>This guide is a preview and not finalised!</p>"},{"location":"guides/configuration/#easy","title":"Easy","text":"<p>Let's simplify the problem:</p> <p>Example</p> <p>Consider a hypothetical plane with only economy and business class. Both \\(y\\) and \\(j\\) class both occupy one \"unit\" of capacity.</p> <p>Visualising it: <pre><code>Demand: yyyyyyyyyyjjj  10y-class, 3j-class\nConfig: ______         one aircraft has total capacity 6\n        ______         we fly it twice a day\n</code></pre></p> <p>\\(y\\) class pays $1 and \\(j\\) class pays $2: we want to carry the j-class people first.</p> <p>Find the optimal configuration.</p> <p>Plan 1: fill the configuration with \\(j\\) class only <pre><code>Flight 1: jjjjjj\n             ^^^ \n       2: jjjjjj\n          ^^^^^^ \u274c bad: not enough j demand! 9 empty seats!\n</code></pre> We earned \\(3 \\times 2 = \\$6\\) only.</p> <p>Plan 2: fill the configuration with \\(y\\) class only <pre><code>Flight 1: yyyyyy\n\n       2: yyyyyy\n              ^^ \u274c bad: not enough y demand! 2 empty seats!\n</code></pre> We earned \\(6\u00d7\\$1 + 4\u00d7\\$1 = \\$10\\).</p> <p>But we can do better by taking the best of both worlds.</p> <p>Plan 3:</p> <p>Fill the configuration with the most valuable class (\\(j\\) class) first.</p> <ul> <li>we have 3 j-demands and we don't want it to run out after 2 flights.</li> <li>so each flight should have at most, \\(\\frac{3}{2} = 1.5\\) seats.</li> <li>we should therefore try fill in 1 seat per flight:</li> </ul> <pre><code>Flight 1: j_____\n\n       2: j_____\n</code></pre> <p>Fill the remaining slots with \\(y\\) class:</p> <ul> <li>we have 10 y-demands and we don't want it to run out after 2 flights.</li> <li>so each flight should have on average, \\(\\frac{10}{2} = 5\\) seats.</li> <li>we should therefore try fill in max 5 seats per flight:</li> </ul> <pre><code>Flight 1: jyyyyy\n\n       2: jyyyyy\n</code></pre> <p>Great! We earned \\(2(1\\times\\$2 + 5\\times\\$1) = \\$14\\)!</p>"},{"location":"guides/configuration/#sheets-exercises","title":"Sheets Exercises","text":"<p>Consider the following Sheet: <pre><code>   A         B\n1  y demand  j demand\n2  capacity  number of flights\n3\n</code></pre></p> 1. Write functions to calculate the optimal configuration. <ul> <li>Fill in j-class: each flight should have \\(\\frac{\\text{j demand}}{\\text{number of flights}}\\) j seats</li> </ul> Cell B3<pre><code>FLOOR(B1 / B2)\n</code></pre> <ul> <li>Calculate y-class seats: each flight should have \\((\\text{capacity}-\\text{j seats})\\) y seats</li> </ul> Cell A3<pre><code>A2 - B3\n</code></pre> 2. A route is suboptimal when there is insufficient demand. Add an error if this happens. (tip: consider a demand of 4Y, 3J for the same aircraft) <p>Example:</p> <ol> <li> <p>3J \u00f7 2 flights = 1.5J per flight (rounding down to 1J per flight) <pre><code>Flight 1: j_____\n       2: j_____\n</code></pre></p> </li> <li> <p>Filling in the rest with Y class <pre><code>Flight 1: jyyyyy\n       2: jyyyyy\n</code></pre> Notice that we have 5Y seats but only 2Y demand left. There is insufficient demand.</p> </li> </ol> <p>We want to show an error if the demand left \\(\\left(\\frac{\\text{y demand}}{\\text{number of flights}}\\right)\\) is less than our computed Y seats.</p> <p>We can use the <code>IF(condition, true_value, false_value)</code> formula:</p> Cell A4<pre><code>IF(FLOOR(A1/B2) &lt; A3, \"INSUFFICIENT DEMAND\", \"OK\")\n</code></pre>"},{"location":"guides/configuration/#key-takeaways","title":"Key Takeaways","text":"<p>The number of seats per flight is \\(\\frac{\\text{demand}}{\\text{number of flights}}\\), rounded down.</p> <p>If we want to configure aircraft with two classes:</p> <ol> <li>fill in the highest paying class first</li> <li>allocate the remaining seats to the lower paying class</li> <li>if the amount of seats in the lower paying class exceeds its demand, the route is suboptimal.</li> </ol> <p>As you may imagine, we can generalise this algorithm to three classes (pax aircraft).</p>"},{"location":"guides/configuration/#intermediate","title":"Intermediate","text":"<p>In AM4, the key point to remember is that one seat can use up multiple \"units\" of the aircraft capacity.</p> Seat Class Capacity \\(y\\) 1 unit \\(j\\) 2 units \\(f\\) 3 units <p>Example</p> <p>Consider a plane with 2 economy \\(y\\), 2 business \\(j\\), and 3 first class \\(f\\) seats.</p> <p><pre><code>y y jj jj fff fff fff\n1 2 1  2  1   2   3\n</code></pre> If you count up the letters, we have \\(2\\times1 + 2\\times2 + 3\\times3 = 15\\) \"units\" of capacity.</p> <p>But we call this configuration \"2Y 2J 3F\", or 7 seats in total.</p> A plane has 13 capacity, 2 \\(j\\) and 5 \\(y\\) seats. How many \\(f\\) seats should it have? <p>We know that the sum of \"units\" should add up to the capacity, so:</p> \\[ \\begin{align*} y+2j+3f &amp;= \\text{capacity} \\\\ f &amp;= \\frac{\\text{capacity}-2j-y}{3} \\\\ &amp;= \\frac{12-4-5}{3} = 1 \\end{align*} \\] <p>Note: if there were 6 \\(y\\) seats instead, we would compute \\(f=\\frac{2}{3}\\) which will be rounded down to 0.</p> <p>It is perfectly OK if \\(y+2j+3f\\) don't add up to the capacity.</p> <p>Now, let's reconsider the example from the easy section:</p> <p>Example</p> <p>Consider a hypothetical route without first class demand:</p> <pre><code>Demand: yyyyyyyyjjjjjj  8y-class, 6j-class\nConfig: ______          one aircraft has total capacity 6\n        ______          we fly it twice a day\n</code></pre> <p>\\(y\\) class pays $1 and \\(j\\) class pays $1.5.</p> <p>Should we fill in \\(y\\) first or \\(j\\) first?</p> <p>Well, you may answer of course \\(j\\) because it pays more.</p> <p>Let's try it, remembering 1J = 2 \"units\" of capacity:</p> <pre><code>Demand: yyyyyyyy\u00b7\u00b7\u00b7jjj\nConfig: jjjjjj    \n        jjjjjj    \n</code></pre> <p>3J earned us \\(2(3\\times\\$1.5) = \\$9\\).</p> <p>Doing the other way round: filling with y first:</p> <pre><code>Demand: \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7jjjjjj    Demand: \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7jjjj\nConfig: yyyy__         -&gt; Config: yyyyjj        \n        yyyy__                    yyyyjj        \n</code></pre> <p>4Y1J earned us \\(2(4\\times\\$1+1\\times1.5) = \\$11\\)!</p> <p>The higher paying class does not always mean we should always fill them in first: they also \"waste\" the available capacity.</p> <p>To determine which class is \"objectively\" better, let us create a score \\(\\frac{\\text{expected income}}{\\text{units of capacity}}\\). Intuitively, a higher ticket price will give us a better score, and higher units of capacity will decrease the score.</p> <p>In our example:</p> \\[ \\begin{align*} \\text{score}_j &amp;= \\frac{\\$1.5}{2} = \\$0.75\\text{ per unit of capacity} \\\\ \\text{score}_y &amp;= \\frac{\\$1}{1} = \\$1\\text{ per unit of capacity} \\end{align*} \\] <p>So, a plane full of \\(y\\) seats would give us 33% more profit than a plane full of \\(j\\) class. Indeed, our example matches this observation.</p>"},{"location":"guides/configuration/#concept-check","title":"Concept Check","text":"<p>Now, it's time to actually calculate which class is better in AM4. The formula for pax ticket prices in easy mode are:</p> \\[ \\begin{align*} \\$_\\text{Y} &amp;= 0.4d+170 \\\\ \\$_\\text{J} &amp;= 0.8d+560 \\\\ \\$_\\text{F} &amp;= 1.2d+1200 \\\\ \\end{align*} \\] <p>Here, the ticket prices \\(\\$\\) increase when distance \\(d\\) increases. The optimal multipliers are 1.1, 1.08, 1.06 respectively.</p> 1. In what order should we fill seats in at a distance of 4000km (using default autoprice)? <p>We should compute the \"score\", or the expected income per unit capacity for each class:</p> \\[ \\begin{align*} \\text{score}_y &amp;= \\frac{0.4\\times4000+170}{1} = \\$1770 \\text{ per unit} \\\\ \\text{score}_j &amp;= \\frac{0.8\\times4000+560}{2} = \\$1880 \\text{ per unit} \\\\ \\text{score}_f &amp;= \\frac{1.2\\times4000+1200}{3} = \\$2000 \\text{ per unit} \\\\ \\end{align*} \\] <p>The order should be \\(f&gt;j&gt;y\\).</p> 2. How much more profit would we earn if we had filled in a full plane of \\(f\\) class instead of \\(y\\) class, at a distance of 13000km (using the autoprice multipliers)? <p>Computing the \"score\" for \\(d = 13000\\):</p> \\[ \\begin{align*} \\text{score}_y &amp;= \\frac{1.1(0.4\\times13000+170)}{1} = \\$5907 \\text{ per unit} \\\\ \\text{score}_j &amp;= \\frac{1.08(0.8\\times13000+560)}{2} = \\$5918 \\text{ per unit} \\\\ \\text{score}_f &amp;= \\frac{1.06(1.2\\times13000+1200)}{3} = \\$5936 \\text{ per unit} \\\\ \\end{align*} \\] <p>The order should be \\(f&gt;j&gt;y\\). But notice each of them are almost equally as good: \\(f\\) class only gives us \\(\\frac{5936-5907}{5907} = 0.49\\%\\) more profit.</p> <p>Practically, doing \\(y&gt;j&gt;f\\) might actually be better if there's a lot of \\(y\\) demand.</p> 3. When should we choose \\(y&gt;j&gt;f\\)? (using the autoprice multipliers)? <p>That means our \"score\" should follow the following relationships:</p> <ul> <li>\\(\\text{score}_y\\) should be greater than \\(\\text{score}_j\\)</li> <li>\\(\\text{score}_j\\) should be greater than \\(\\text{score}_f\\)</li> </ul> <p>For the first relation, we have:</p> \\[ \\begin{align*} \\frac{1.1(0.4d+170)}{1} &amp;\\gt \\frac{1.08(0.8d+560)}{2} \\\\ 1.1(0.4d+170) &amp;\\gt 0.54(0.8d+560) \\\\ 1.1(0.4d)-0.54(0.8d) &amp;\\gt 0.54(560)-1.1(170) \\\\ 0.008d &amp;\\gt 115.4 \\\\ d &amp;\\gt 14425 \\end{align*} \\] <p>Similarly for the second relation, we have:</p> \\[ \\begin{align*} \\frac{1.08(0.8d+560)}{2} &amp;\\gt \\frac{1.06(1.2d+1200)}{3} \\\\ 3\\cdot0.54(0.8d+560) &amp;\\gt 1.06(1.2d+1200) \\\\ 1.62(0.8d)-1.06(1.2d) &amp;\\gt 1.06(1200)-1.62(560) \\\\ 0.024d &amp;\\gt 364.8 \\\\ d &amp;\\gt 15200 \\end{align*} \\] <p>To satisfy both relations, \\({d&gt;14425 \\cup d&gt;15200}\\) means \\(d&gt;15200 \\text{km}\\).</p> <p>Here is a graph to illustrate this (try clicking at the intersection): </p> <p>We are interested in the question:</p> <p>How much extra income would we gain by filling \\(f\\) seats over \\(y\\) seats?</p> <p>We can compute ratio between the \\(f\\) score and the \\(y\\) score:</p> \\[ \\begin{align*} \\frac{\\text{score}_f}{\\text{score}_y}&amp;=\\frac{\\frac{1.06(1.2d+1200)}{3}}{\\frac{1.1(0.4d+170)}{1}} \\\\ &amp;=\\frac{0.424d+424}{0.44d+187} \\end{align*} \\] <p>At a distance of 2000 km, we can gain \\(19.2\\%\\) more profit. But as the distance \\(d\\) increases, we have diminishing returns and approach the break-even point at \\(14812.5\\) km.</p>"},{"location":"guides/configuration/#key-takeaways_1","title":"Key Takeaways","text":"<ul> <li>\\(y\\), \\(j\\), \\(f\\) class seats each occupy different units of capacity.</li> <li>we can calculate the \"score\" for each class with \\(\\frac{\\text{expected income}}{\\text{units of capacity}}\\)</li> <li>we should fill seats with the highest score first.<ul> <li>however, the configuration order doesn't matter when you use the multipliers.</li> <li>use \\(y&gt;j&gt;f\\) for extra long range distances (&gt;15200km), otherwise stick to \\(f&gt;j&gt;y\\).</li> </ul> </li> </ul>"},{"location":"guides/configuration/#advanced","title":"Advanced","text":"<p>Now let's consolidate everything and construct the pax algorithm in Sheets!</p> <p>Consider the following Sheet: <pre><code>   A         B                  C\n1  y demand  j demand           f demand\n2  capacity  number of flights\n3\n</code></pre></p> <p>Suppose we wanted to calculate the \\(f&gt;j&gt;y\\) configuration in row 3.</p> <p>Here is the initial plan:</p> <ol> <li>We need to fill the highest paying \\(f\\) seats first:<ul> <li>\\(\\text{seats}_f = \\frac{\\text{demand}_f}{\\text{number of flights}}\\), rounded down</li> <li><code>CHECK1</code></li> </ul> </li> <li>Fill the \\(j\\) seats next:<ul> <li>\\(\\text{seats}_j = \\frac{\\text{demand}_j}{\\text{number of flights}}\\), rounded down</li> <li><code>CHECK2</code></li> </ul> </li> <li>Fill the remaining seats with \\(y\\):<ul> <li>\\(\\text{seats}_y = \\text{capacity} - \\text{seats}_j \\times 2 - \\text{seats}_f \\times 3\\)</li> <li><code>CHECK3</code></li> </ul> </li> </ol> Explain what needs to be put in <code>CHECK</code>. <p>We need to make sure the seats actually makes sense: it doesn't exceed the capacity remaining.</p> <p>Suppose a plane with capacity 100, demand <code>0Y 1000J 0F</code> and 2 flights per day.</p> <ul> <li>the naive calculation \\(\\text{seats}_j = \\frac{1000}{2} = 500\\) exceeds the capacity.</li> <li>we need to cap it at \\(\\text{capacity}/2 = 50\\) instead.</li> </ul> <p>Fixes:</p> <ul> <li><code>CHECK1</code>: make sure the calculated \\(\\text{seats}_f \\times 3 &lt; \\text{capacity}\\). If it fails, set \\(\\text{seats}_f = \\frac{\\text{capacity}}{3}\\)</li> <li><code>CHECK2</code>: make sure the calculated \\(\\text{seats}_j \\times 2 + \\text{seats}_f \\times 3 &lt; \\text{capacity}\\). If it fails, set \\(\\text{seats}_j = \\frac{\\text{capacity} - \\text{seats}_f \\times 3}{2}\\)</li> <li><code>CHECK3</code>: make sure the calculated \\(\\text{seats}_y &lt; \\text{demand}_y/\\text{number of flights}\\), that is, there is sufficient demand remaining for us to carry.</li> </ul>"},{"location":"guides/configuration/#implementation","title":"Implementation","text":"1. Write a function in Cell C3 that does Step 1. <p>The initial solution: Cell C3<pre><code>FLOOR(C1/B2)\n</code></pre></p> <p><code>CHECK1</code>: if the initial solution exceeds the capacity:</p> <ul> <li>fill it with the remaining capacity (\\(\\frac{\\text{capacity}}{3}\\)), rounded down</li> <li>otherwise, keep the initial solution</li> </ul> Cell C3<pre><code>IF((FLOOR(C1/B2)*3) &lt; A2, FLOOR(C1/B2), FLOOR(A2/3))\n</code></pre> <p>Another way to do it is to grab the minimum between it and the equivalent capacity: Cell C3<pre><code>MIN(FLOOR(C1/B2), FLOOR(A2/3))\n</code></pre></p> 2. Write a function in Cell B3 that does Step 2. <p>The initial solution: Cell B3<pre><code>FLOOR(B1/B2)\n</code></pre></p> <p><code>CHECK2</code>: if the initial solution (combined with the previously calculated \\(\\text{seats}_f\\)) exceeds the capacity:</p> <ul> <li>fill it with the remaining capacity (\\(\\frac{\\text{capacity} - 3\\times\\text{seats}_f}{2}\\)), rounded down</li> <li>otherwise, keep the initial solution</li> </ul> Cell B3<pre><code>IF((FLOOR(B1/B2)*2 + C3*3) &lt; A2, FLOOR(B1/B2), FLOOR((A2 - C3*3)/2))\n</code></pre> <p>A simpler way to do it: Cell B3<pre><code>MIN(FLOOR(B1/B2), FLOOR((A2 - C3*3)/2))\n</code></pre></p> 3. Write a function in Cell A3 that does Step 3. Show an error in Cell A4 (if any). <p>The initial solution: Cell A3<pre><code>A2 - C3*3 - B2*2\n</code></pre></p> <p><code>CHECK3</code>: if this solution is greater than the remaining \\(\\text{demand}_y\\): there are no demand remaining and we should show an error in <code>Cell A4</code>.</p> Cell A4<pre><code>IF(A3 &gt; FLOOR(A1/B2), \"INSUFFICIENT DEMAND\", \"VALID\")\n</code></pre> 4. If you are familiar with Python, write an implemention for the \\(f&gt;j&gt;y\\) configuration. It should take inputs <code>yd: int</code>, <code>jd: int</code>, <code>fd: int</code> (demand per flight) and <code>capacity: int</code> , returning <code>tuple[int, int, int, bool]</code> (indicating the validity). <p>A possible solution: <pre><code>def calc_fjy_conf(yd, jd, fd, capacity):\n    fs = min(fd, capacity // 3)\n    capacity -= fs * 3  # (1)!\n    js = min(jd, capacity // 2)\n    capacity -= js * 2  # (2)!\n    ys = capacity # (3)!\n    valid = ys &lt; yd\n\n    return (ys, js, fs, valid)\n</code></pre></p> <ol> <li>Step 1: Fill first class seats first, and subtract from the available capacity.</li> <li>Step 2: Fill business class seats, and substract from the available capacity.</li> <li>Step 3: The capacity remaining should just be the y seats.</li> </ol>"},{"location":"guides/configuration/#cargo","title":"Cargo","text":"<p>Cargo is has a similar mechanic to pax aircraft:</p> Cargo Class Capacity Large, \\(l\\) \\(\\frac{10}{7}\\) units Heavy, \\(h\\) 1 unit <p>For example, a cargo aircraft with 100000 lbs capacity with 100% large cargo can only take \\(100000\\times0.7 = 70000\\) lbs. The formula for cargo ticket prices in easy mode are:</p> \\[ \\begin{align*} \\$_\\text{L} &amp;= 0.0948283724581252d + 85.2045432642377000 \\\\ \\$_\\text{H} &amp;= 0.0689663577640275d + 28.2981124272893000 \\\\ \\end{align*} \\] <p>The ticket price \\(\\$\\) also increase when distance \\(d\\) increases. The autoprice multipliers are 1.1 and 1.08 respectively.</p> At what distances should we choose \\(l &gt; h\\)? <p>Using the score function we developed early, we require:</p> \\[ \\begin{align*} \\frac{\\text{expected income}}{\\text{units of capacity}}_l &amp;\\gt \\frac{\\text{expected income}}{\\text{units of capacity}}_h \\\\ \\frac{1.1(0.094828d + 85.20454)}{\\frac{10}{7}} &amp;\\gt \\frac{(1.08(0.068966d + 28.29811))}{1} \\\\ -0.0014658d &amp;\\gt -35.04554 \\\\ d &amp;\\lt 23908.49 \\end{align*} \\] <p>Since the earth's half-circumference is \\(6371\\pi=20015\\)km, we should choose \\(l &gt; h\\) for almost all flights.</p> <p></p> Develop a plan for the \\(l&gt;h\\) configuration formula. <ol> <li> <p>Fill the highest paying cargo: \\(l\\):</p> <ul> <li>\\(\\text{\\%}_l=\\min\\left(\\frac{\\text{demand}_l / \\text{number of flights} \\times 10/7}{\\text{capacity}}, 100\\%\\right)\\)</li> </ul> </li> <li> <p>Fill the remaining with \\(h\\) cargo:</p> <ul> <li>\\(\\text{\\%}_h=1-\\text{\\%}_l\\)</li> <li>Check \\(\\frac{\\text{demand}_h}{\\text{number of flights}} \\ge \\text{capacity} \\times \\text{\\%}_h\\)</li> </ul> </li> </ol> If you are familiar with Python, write an implementation for the \\(l &gt; h\\) configuration. It should take in <code>ld: int</code>, <code>hd: int</code> (demand per flight) and <code>capacity: int</code>, returning <code>tuple[float, float, bool]</code> (indicating the validity). <p>A possible solution: <pre><code>def calc_l_conf(ld, hd, capacity, l_training = 0, h_training = 0):\n    l_cap = capacity * 0.7 * (1 + l_training / 100.0)\n    if ld &gt; l_cap:  # (1)!\n        return (1, 0, True)\n\n    l = ld / l_cap  # (2)!\n    h = 1 - l  # (3)!\n    valid = hd &gt;= capacity * h * (1 + h_training / 100.0)\n    return (l, h, valid)\n</code></pre></p> <ol> <li>Early exit in case the demand per flight exceeds our large capacity</li> <li>Step 1: Fill in large \\(l\\) first.</li> <li>Step 2: Fill the remaining with \\(h\\).</li> </ol> <p>The aforementioned approach is a greedy bang-for-buck heuristic solution for the rod cutting problem. The optimal solution has exponentially many partitions - you may be interested in the Bounded knapsack problem and Genetic algorithms.</p>"},{"location":"guides/configuration/#tldr","title":"TLDR","text":"<p>For a given (seat class, units of capacity, demand) pair and initial capacity:</p> <ul> <li>\\(\\text{seats} = \\frac{\\text{demand}}{\\text{flights per day}}\\), rounded down</li> <li>remove \\(\\text{seats} \\times \\text{units of capacity}\\) from the capacity</li> <li>if there are no more capacity left, fill this seat using the previous iteration's leftover capacity.</li> </ul> <p>Example: TGPY-UTDD. A380 (capacity 600), YJF configuration.</p> <p>Demand: 1779Y, 395J, 198F, 6 flights per day.</p> Seat Class Seats Seats to fill Y \\(\\left\\lfloor\\frac{1779}{6}\\right\\rfloor = 296\\) \\(600-296 = 304\\) J \\(\\left\\lfloor\\frac{395}{6}\\right\\rfloor = 65\\) \\(305-65\\times2 = 174\\) F \\(\\left\\lfloor\\frac{198}{6}\\right\\rfloor = 33\\) \\(174-33\\times3 = 75\\)  We used up all demand but there are 75 empty seats. Insufficient demand! <p>What about 5 flights per day?</p> Seat Class Seats Seats to fill Y \\(\\left\\lfloor\\frac{1779}{5}\\right\\rfloor = 355\\) \\(600-355 = 245\\) J \\(\\left\\lfloor\\frac{395}{5}\\right\\rfloor = 79\\) \\(245-79\\times2 = 87\\) F \\(\\left\\lfloor\\frac{198}{5}\\right\\rfloor = 39\\) \\(87-39\\times3 = -30\\)  There are more demand than there are seats to fill. So, fill the remaining seats from J. F* \\(\\frac{87}{3}=29\\) 0 <p>(Y, J, F*) is the optimal configuration: 355Y, 79J, 29F.</p> <p>And 3 flights per day?</p> Seat Class Seats Seats to fill Y \\(\\left\\lfloor\\frac{1779}{3}\\right\\rfloor = 593\\) \\(600-593 = 7\\) J \\(\\left\\lfloor\\frac{395}{3}\\right\\rfloor = 131\\) \\(7-131\\times2 = -255\\)  There are more demand than there are seats to fill. So, fill the remaining seats from Y. J* \\(\\frac{7}{2}=3\\) 0 F* 0 0 <p>(Y, J*, F*) is the optimal configuration: 593Y, 3J, 0F.</p> <p>* means it is being limited by the capacity constraint.</p> <p>Above 5000km, there are practically no difference in profits between seat orders (&lt;5%). Below it, use FJY. See the formulae for more info.</p>"},{"location":"guides/contribution/","title":"Contribution Strategy","text":"<p>I want to achieve maximum contribution per day in an alliance: what schedule should I fly, or what variables are the most important?</p> <p>This guide covers:</p> <ul> <li>constructing objective functions and performing optimisation with derivatives</li> <li>arrive at a optimal pure-contribution strategy</li> </ul> <p>Experimental</p> <p>This guide is a preview and not finalised!</p>"},{"location":"guides/contribution/#advanced","title":"Advanced","text":""},{"location":"guides/contribution/#optimisation","title":"Optimisation","text":"<p>First, list out all independent and dependent variables we should consider:</p> <p>We know from collecting data that, if we decrease the \\(\\text{CI}\\downarrow\\):</p> <ul> <li>the contribution \\(\\$_{\\text{C}}\\uparrow\\)</li> <li>but at the same time, the aircraft speed \\(v'\\downarrow\\) and also, flight time \\(T'\\uparrow\\)</li> </ul> <p>We also found that increasing distance \\(d\\uparrow\\) will cause the contribution \\(\\$_{\\text{C}}\\uparrow\\) and flight time \\(T'\\uparrow\\).</p> <p>Now what happens to the contribution per hour \\(\\frac{\\$_{\\text{C}}}{T'}\\)? Well, it'll always increase, if we assume that contribution (numerator) grows faster than the flight time (denominator).</p> <p>But how do we test if our assumption is true? We need calculus.</p> <p>Also, if I want to increase my contribution per hour, should I prefer increasing the distance, or decreasing the CI? Hmm... they both decrease the flight time and increase the contribution in different ways... We need calculus.</p>"},{"location":"guides/contribution/#objective-function-j","title":"Objective Function \\(J\\)","text":"<p>When we have multiple equations, we should try to combine them into one equation, which gives us a singular output. Why? It is easier to perform differentiation on it, which will be key to understanding how one variable affects the other.</p> <p>Now, our goal is to make one equation, that outputs the contribution per hour given distance \\(d\\), \\(\\text{CI}\\) and \\(v\\). We call this the objective function \\(J\\). It's really useful because we can try to calculate \\(\\frac{\\partial J}{\\partial \\text{CI}}=0\\) to find the optimal CI (more on this later).</p> <p>But let's deviate a bit before proceeding. As route planners, CI is something we set after we know the route and target flight time \\(T'\\). It'd be more useful to know contribution as a function of \\(d\\), \\(T'\\) and \\(v\\) instead. To do this, we need three formulae:</p> <ul> <li>relationship between speed, distance and time</li> <li>relationship between new speed, original speed and CI</li> <li>the contribution formula.</li> </ul> <p>Let's first combine the first two, then work our way to the third.</p> Exercise 7: Suppose I have an aircraft with speed \\(v\\) flying a distance \\(d\\). What CI do I need to set to get a flight time of \\(T'\\)? Write an equation for it and the interval for which it is valid. <p>When CI is applied, the new speed is</p> \\[ \\begin{equation} v' = v(0.0035\\text{CI} + 0.3) \\end{equation} \\] <p>Speed \\(v\\) is defined as the distance flown \\(d\\) over flight time \\(T\\):</p> \\[ \\begin{equation} v = \\frac{d}{T} \\end{equation} \\] <p>Rearranging Eq 1 for CI and substituting Eq 2 for \\(v'\\):</p> \\[ \\begin{align*} \\text{CI} &amp;= \\frac{\\frac{v'}{v}-0.3}{0.0035} \\\\ &amp;= \\frac{2000d}{7vT'}-\\frac{600}{7} \\end{align*} \\] <p>This formula is only valid when \\(0 \\le \\text{CI} \\le 200\\), simplifying:</p> \\[ \\begin{align*} 0 &amp;\\le \\frac{2000d}{7vT'}-\\frac{600}{7} \\le 200 \\\\ 0 &amp;\\le \\frac{2000d}{vT'}-600 \\le 1400 \\\\ 600 &amp;\\le \\frac{2000d}{vT'} \\le 2000 \\\\ 0.3vT' &amp;\\le d \\le vT' \\\\ \\end{align*} \\] <p>Again, our goal is to express the objective function \\(J\\) with inputs \\(d\\), \\(v\\), \\(T'\\). So far, we have done so for \\(\\text{CI}\\) and it's time to do the same for \\(J\\).</p> Exercise 8: Find \\(J(d, v, T')\\) by combining the contribution formula and CI. <p>The contribution formula is:</p> \\[ \\begin{equation} \\$_\\text{C} = \\min\\left( k_\\text{gm}kd\\left(1 + \\frac{2(200 - \\text{CI})}{200}\\right),152 \\right) \\end{equation} \\] \\[ \\begin{equation} \\begin{align*} k_\\text{gm} &amp;= \\begin{cases}     1.5 &amp; \\text{if realism} \\\\     1 &amp; \\text{if easy} \\end{cases} \\\\ k &amp;= \\begin{cases}     0.0064 &amp; \\text{if } d &lt; 6000 \\\\     0.0032 &amp; \\text{if } 6000 &lt; d &lt; 10000 \\\\     0.0048 &amp; \\text{if } d &gt; 10000 \\\\         \\end{cases} \\end{align*} \\end{equation} \\] <p>We can get rid \\(\\text{CI}\\) using the formula we found earlier:</p> \\[ \\begin{equation} \\text{CI} = \\frac{2000d}{7vT'}-\\frac{600}{7}, d \\in [0.3vT', vT'] \\end{equation} \\] <p>Now simplifying our objective function \\(J = \\$_\\text{C} / T'\\):</p> \\[ \\begin{align*} J(d, v, T') &amp;= \\min\\left(\\frac{k_\\text{gm}kd}{T'}\\left(3 - \\frac{\\text{CI}}{100}\\right), \\frac{152}{T'} \\right) \\\\ &amp;= \\min\\left(\\frac{k_\\text{gm}kd}{T'}\\left(\\frac{27}{7} - \\frac{20d}{7vT'}\\right), \\frac{152}{T'} \\right) \\\\ &amp;= \\min\\left(\\frac{27k_\\text{gm}kd}{7T'} - \\frac{20k_\\text{gm}kd^2}{7vT'^2}, \\frac{152}{T'} \\right) \\end{align*} \\] <p>For the remainder the guide, I will assume easy mode, with \\(k_{\\text{gm}}=1\\).</p> <p>Great! Now we \\(J\\) as a single multivariable function with 3 variables.</p> <p>We want to understand the relationships between variables, and plotting is always a great way to understand things. Unfortunately, we cannot quite visualise everything at once because we don't have 4 dimensions!</p> <p>But if we freeze any one variable constant, \\(J\\) now has 2 independent variables (\"inputs\") and one dependent variable (\"output\"). For instance, when we have three inputs \\((d, v, T')\\), we choose to freeze \\(d=6000\\) as a constant, then \\((v, T')\\) are the two remaining inputs. Now, set \\(v\\) as the x-axis, \\(T'\\) as the y-axis - and compute \\(J\\) for every single combination and colour it: </p> <p>This is called a contour plot. Here, we can observe \"bands\" of the same colour - imagine walking on a hill: walking along this path does not change your elevation. In this case, the region of the darkest blue all have the same value: the best contribution per hour.</p> Exercise 9: If you are familiar with Python, can you reproduce the graph above? (hint: you might want to use <code>np.minimum</code> for CI bounds-checking, <code>np.where</code> for the piecewise \\(k\\) and <code>matplotlib</code> for plotting.) <p>I've written the <code>ci</code> and <code>cont</code> functions separately. Try changing <code>ci</code> to <code>cont</code>!</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\ndef ci(d, v, tp):\n    ci_ok = (d &gt;= 0.3*v*tp) &amp; (d &lt;= v*tp)\n    ci = 2000*d / (7*v*tp) - 600 / 7\n    return np.where(ci_ok, ci, np.nan)\n\ndef cont(d, v, tp):\n    k = np.where(d &lt; 6000, 0.0064, np.where(d &lt; 10000, 0.0032, 0.0048))\n    cont = np.minimum(k*d*(3-ci(d, v, tp)/100), 152)\n    return cont/tp\n\ndconst, vconst, tpconst = 6000-1e-9, 1049*1.1*1.5, 12\nds = np.linspace(0, 20000, 1000)\nvs = np.linspace(300, 1800, 1000)\ntps = np.linspace(0, 16, 1000)\n\nfig = plt.figure(figsize=(16, 7))\ngs = fig.add_gridspec(1, 3)\n\nvm, tpm = np.meshgrid(vs, tps)\nax0 = fig.add_subplot(gs[0, 0])\nct0 = ax0.contourf(vm, tpm, cont(dconst, vm, tpm), levels=20, cmap='turbo_r')\ncb0 = fig.colorbar(ct0, ax=ax0, location=\"bottom\")\n\ndm, tpm = np.meshgrid(ds, tps)\nax1 = fig.add_subplot(gs[0, 1])\nct1 = ax1.contourf(dm, tpm, cont(dm, vconst, tpm), levels=20, cmap='turbo_r')\ncb1 = fig.colorbar(ct1, ax=ax1, location=\"bottom\")\n\ndm, vm = np.meshgrid(ds, vs)\nax2 = fig.add_subplot(gs[0, 2])\nct2 = ax2.contourf(dm, vm, cont(dm, vm, tpconst), levels=20, cmap='turbo_r')\ncb2 = fig.colorbar(ct2, ax=ax2, location=\"bottom\")\n\nplt.show()\n</code></pre> <p>You can view the middle plot on Desmos 3D as well.</p> Concept Check: Just by looking at the contour plot, how do we achieve the highest contribution per hour? <p>The highest contribution per hour are regions with the darkest blue:</p> <ul> <li>Left Plot, constant \\(d\\):<ul> <li>faster original aircraft speed \\(v\\)</li> <li>shorter target flight time \\(T'\\). but if it is too short, it'll get worse</li> </ul> </li> <li>Middle Plot, constant \\(v\\):<ul> <li>choose distances less than 6000km</li> <li>along some linear line, they all have equally good contribution per hour</li> </ul> </li> <li>Right plot, constant \\(T\\) for a 12hr departure schedule and \\(v=1200\\):<ul> <li>when \\(d&lt;6000\\), greater distances perform better.</li> <li>when \\(d&gt;10000\\), greater distances perform poorer.</li> </ul> </li> </ul> <p>I'm being quite ambiguous here: we will see later how to know \"when it's too short\" or how to calculate the \"linear line\".</p> <p>Now, we want to know what is the equation that gives me the darkest blue region?</p> <p>To answer it, imagine yourself blindfolded, at the red region (bottom of the hill) and wanting to reach the \"peak\". The strategy would be, climb whatever direction with the steepest slope. If we follow it long enough, we will find ourselves confused because there are no more slopes to climb - that's the peak!</p> <p>The direction with the steepest ascent is called the gradient \\(\\nabla J\\). It is a vector that tells me which direction to go:</p> \\[ \\nabla J=\\left[\\begin{array}{c} \\frac{\\partial J}{\\partial d} \\\\ \\frac{\\partial J}{\\partial v} \\\\ \\frac{\\partial J}{\\partial T'} \\end{array}\\right] \\] <p>When \\(\\nabla J=\\left[\\begin{array}{c}0 \\\\ 0 \\\\ 0\\end{array}\\right]\\), it means we should stop moving because it holds the position of the plateau - the critical point.</p> <p>The \\(\\frac{\\partial J}{\\partial d}\\), \\(\\frac{\\partial J}{\\partial v}\\) and \\(\\frac{\\partial J}{\\partial T'}\\) are the partial derivatives of \\(J\\). Setting them all equal to zero gives us the critical point.</p>"},{"location":"guides/contribution/#partial-derivatives","title":"Partial Derivatives","text":"<p>Finding partial derivatives of \\(J\\) is effectively the same as the ordinary derivatives, but you freeze all but one variable fixed.</p>"},{"location":"guides/contribution/#case-1-optimal-t","title":"Case 1: Optimal \\(T'\\)","text":"<p>To find the optimal time, we need to freeze \\(d\\) and \\(v\\) to \"collapse\" it to a single-variable function. We can do so by taking the leftmost plot (which already froze \\(d=6000\\)) then freezing \\(v=1730.85\\) (taking a slice with grey line):</p> <p>The green line here indicates the optimal time that maximises \\(J\\): our goal is to find this value.</p> <p>The plot on the right represents \\(J(d=6000, v=1730.85, T')\\), a single variable function.</p> <p>Remember earlier in our concept check, we said \"shorter flight time will yield higher contribution per hour, but if it is too short, it'll get worse\"? Indeed, it increases up until some point \\(T'_\\text{optimal}\\) then drops dramatically: this point can be found with partial derivatives.</p> <p>Example: For an A388 with speed mod (\\(v=1730.85\\)) and \\(d=6000\\), find the optimal target flight time \\(T'_\\text{optimal}\\) that maximises \\(J\\). Verify your answer on the plot.</p> <p>We would like to evaluate the location at which \\(\\frac{\\partial J}{\\partial T'}=0\\).</p> <p>Recall \\(J\\):</p> \\[ J = \\min\\left(\\frac{27kd}{7}T'^{-1} - \\frac{20kd^2}{7v}T'^{-2}, 152T'^{-1} \\right) \\] <p>Treat \\(d, v, k\\) here as numbers and differentiate with respect to \\(T'\\), using \\(\\frac{d}{dT'}(T'^n) = nT'^{n-1}\\):</p> \\[ \\frac{\\partial J}{\\partial T'} = \\min\\left(-\\frac{27kd}{7T'^2} + \\frac{40kd^2}{7vT'^3}, -\\frac{152}{T'^2} \\right) \\] <p>Setting it to 0 yields:</p> \\[ \\begin{align*} \\frac{27kd}{7T'^2} &amp;= \\frac{40kd^2}{7vT'^3} \\\\ 27 &amp;= \\frac{40d}{vT'} \\\\ T' &amp;= \\frac{40d}{27v} = \\frac{40 \\cdot 6000}{27 \\cdot 1730.85} = 5.135 \\end{align*} \\] <p>This gives us the time at which the contribution is maximised<sup>1</sup>. It indeed matches with the green vertical line! We can also evaluate \\(J\\) at this point:</p> \\[ \\begin{align*} J(T'_\\text{optimal}) &amp;= \\min\\left(\\frac{27kd}{7}\\cdot\\frac{27v}{40d} - \\frac{20kd^2}{7v}\\cdot\\frac{27^2v^2}{40^2d^2}, 152\\cdot\\frac{27v}{40d} \\right) \\\\ &amp;= \\min\\left(\\frac{729}{560}kv, \\frac{102.6v}{d} \\right) \\\\ &amp;= \\min\\left(\\frac{729 \\cdot 0.0064 \\cdot 1730.85}{560}, 29.588\\right) = 14.420 \\end{align*} \\] <p>Indeed, this also matches the plot!</p> <p>We now reach a very useful equation:</p> \\[ T'_{\\text{optimal}} = \\frac{40d}{27v} \\\\ \\] <p>This gives us the optimal* time, given some distance \\(d\\) and original aircraft speed \\(v\\). The contribution per hour at this time is also:</p> \\[ J(T'_\\text{optimal}) = \\min\\left(\\frac{729}{560}kv, \\frac{102.6v}{d} \\right) \\] <p>Important note on optimality</p> <p>By optimal, I mean locally optimal.</p> <p>If we had just arbitrarily chosen \\(d=6000\\) and \\(v=1000\\), we cannot guarantee that the contribution is the absolute max!</p> <p>If we can prove \\(d\\) and \\(v\\) is indeed optimal, using this equation will give us globally optimal contribution. We do that by also evaluating partial derivatives with respect to \\(v\\) and \\(d\\).</p> <p>I can now find all optimal times \\(T'_{\\text{optimal}}\\) at all speeds \\(v\\) and plot them with a green line:</p> <p>Notice that this line is the \"ridge\" of our mountain that maximises \\(J\\)! If we also make regularly spaced cuts along the speed \\(v\\), we can clearly see that the green dots correspond to the locally optimal \\(T'_{\\text{optimal}}\\) in that cut.</p>"},{"location":"guides/contribution/#case-2-optimal-d","title":"Case 2: Optimal \\(d\\)","text":"<p>coming soon\u2122 ;)</p>"},{"location":"guides/contribution/#case-3-optimal-v","title":"Case 3: Optimal \\(v\\)","text":"<p>coming soon\u2122 ;)</p>"},{"location":"guides/contribution/#interesting-properties","title":"Interesting Properties","text":"Exercise 10: What is the optimal CI to achieve maximum contribution per hour? Assume we are flying distances less than 6000km. (Tip: Notice that the objective function is different because we now take CI as the input.) <p>Recall the contribution formula is:</p> \\[ \\$_\\text{C} = \\min\\left( kd\\left(1 + \\frac{2(200 - \\text{CI})}{200}\\right),152 \\right) \\] <p>The objective function \\(J\\) should take in \\(\\text{CI}\\) and \\(T'\\) only. Define it to be \\(\\$_\\text{C}/T'\\) and substitute \\(d=v'T'=T'v(0.0035\\text{CI}+0.3)\\):</p> \\[ \\begin{align*} J(\\text{CI}, T') &amp;= \\min\\left( kv(0.0035\\text{CI}+0.3)\\left(3 - \\frac{\\text{CI}}{100}\\right),\\frac{152}{T'} \\right) \\\\ &amp;= \\min\\left( kv(0.0105\\text{CI} + 0.000035\\text{CI}^2 + 0.9 - 0.003\\text{CI}),\\frac{152}{T'} \\right) \\\\ &amp;= \\min\\left( kv(\\underbrace{-0.000035\\text{CI}^2 + 0.0075\\text{CI} + 0.9}_{\\text{a quadratic function!}}),\\frac{152}{T'} \\right) \\end{align*} \\] <p>Now, to find the global maxima, we need \\(\\frac{\\partial J}{\\partial \\text{CI}}\\) and the boundary points. First, the partial derivative of \\(J\\) with respect to \\(\\text{CI}\\) (note that \\(k\\) is a piecewise function returning a constant so \\(\\frac{\\partial k}{\\partial \\text{CI}} = 0\\)):</p> \\[ \\frac{\\partial J}{\\partial \\text{CI}} = \\begin{cases}     kv \\left(-0.00007\\text{CI} + 0.0075\\right) &amp; \\text{if } J &lt; 152 \\\\     0 &amp; \\text{otherwise} \\\\ \\end{cases} \\] <p>For a fixed target flight time \\(T'\\), this is a decreasing function (as \\(\\frac{\\partial^2 J}{\\partial \\text{CI}^2} &lt; 0\\)), meaning that contribution grows with CI initially, but slowly plateaus off and starts decreasing. This is the local maxima and can be found by solving for \\(\\frac{\\partial J}{\\partial \\text{CI}} = 0\\):</p> \\[ \\begin{align*} kv(-0.00007\\text{CI}+0.0075) &amp;= 0 \\\\ \\text{CI} &amp;= \\frac{-0.0075}{-0.00007} = 107.143 \\end{align*} \\] <p>Interestingly, a CI of 107 is guaranteed to be the local optimum, regardless of aircraft speed! In the particular case where \\(d&lt;6000\\), it is the global optima because \\(k\\) is the largest. But we need to be more careful for \\(d&gt;6000\\): it is possible to get a better contribution if we had chosen \\(d=6000\\).</p>"},{"location":"guides/contribution/#mixed-strategies","title":"Mixed Strategies","text":"<p>Exercise 11: Reducing CI obviously increases contribution, but decreases profit. Some players like to choose a hybrid contribution-profit strategy: say \\(k_c = 0.4\\) means 40% profit, 60% contribution. Formulate an objective function and comment on the optimal strategy.</p> <p>coming soon\u2122 ;)</p>"},{"location":"guides/contribution/#summary","title":"Summary","text":"<ul> <li>identify all IVs, DVs and Combine equations into a single objective function \\(J\\).</li> <li>contour plots are helpful to visualise combinations of variables.</li> <li>gradient \\(\\nabla J\\) is the direction of steepest ascent, solving for zero corresponds to critical points</li> <li>partial derivatives freeze all but one variable constant.</li> <li>if \\(f(x, y)\\) and \\(x(t), y(t)\\), \\(\\frac{dz}{dt}=\\frac{\\partial z}{\\partial x}\\frac{dx}{dt}+\\frac{\\partial z}{\\partial y}\\frac{dy}{dt}\\), forming a tree.</li> <li>evaluate the nature of critical points with Hessian and check boundaries for global maxima.</li> </ul> <ol> <li> <p>Technically, we should also check that \\(\\frac{\\partial^2 J}{\\partial T'^2}&lt;0\\) to verify that it is indeed concaving downwards, and is thus the maximum.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/demand/","title":"Demand","text":"<p>Note</p> <p>This is not a guide, but documentation for an ongoing effort to uncover the demand formula. If you'd like to help, please contact me!</p>"},{"location":"guides/demand/#basic-observations","title":"Basic Observations","text":"<p>There are \\(n=3907\\) airports in the game. A route can be constructed between two airports, and are associated with a unique, undirected demand. This means there are \\(\\frac{n(n-1)}{2}=7630371\\) possible demand values in the game!</p> <p>Right now, we store each demand value in a giant database, and the goal is to find a compressed formula that generates the demand instead.</p> <p>Here's a visualisation of the data I've collected back in early 2020<sup>1</sup>:</p> <p></p> <p>This matrix shows the \\(y\\) demand between airport ID \\(i\\) (x axis) and airport ID \\(j\\) (y axis). Note that since \\(D_{i \\rightarrow j}=D_{j \\rightarrow i}\\), the upper right triangle is essentially a mirror of the bottom left.</p> <p>A closer slice:</p> <p></p> <p>Some observations:</p> <ul> <li>airports with greater base hub cost \\(C\\) tend to yield greater average demand.</li> <li>very high demand (red dots) are sometimes located at intersections between two high-hub-cost pairs.</li> <li>values are highly randomised and have little correlation between \\(y\\), \\(j\\), \\(f\\).</li> </ul> <p>To confirm this, I decided to group demands based on the total hub cost for each pair:</p> <p></p> <p>Indeed, the expected y demand grows linearly with the sum of hub cost (\\(C_i+C_j\\)) and exhibits heteroscedasticity. The behaviour also appears to differ based on whether each airport is capital (\\(\\text{C}\\)) or non capital (\\(\\text{C}'\\)).</p> <p>There are three groups here (left-to-right): \\(\\text{C}'\\text{C}'\\), \\(\\text{C}'\\text{C}\\) and \\(\\text{C}\\text{C}\\). There also appears to be two types of capital airports that cause partial overlap in the middle.</p> <p>Another interesting this I noticed is, the max/min bounds seem rather clear-cut! Maybe it is sampled from a uniform distribution \\([a,b]\\), where \\(a\\) and \\(b\\) are also functions of the sum of hub costs?</p> <p>I'm imagining that \\(y\\), \\(j\\), \\(f\\) are generated from an LCG and maybe we could crack the seed from the massive data we have.</p> <p>Since the first group seem to grow more predictably, I'll focus on analyses where both hub costs matches each other.</p>"},{"location":"guides/demand/#distributions","title":"Distributions","text":"<p>Here's a violin plot for all combinations:</p> <p></p> <p>The yellow, orange, green violins correspond to \\(y\\), \\(j\\), \\(f\\). But they do not seem to be uniform distributions! A closer look:</p> <p></p> <p>\\(y\\) and \\(f\\) look Possion while \\(j\\) looks trapezoidal. This means \\(y\\), \\(j\\), \\(f\\) could not be generated simply from a <code>rand()</code> function.</p> <p>Confused, I tried plotting the \\(y\\), \\(j\\), \\(f\\) on a 3D space:</p> <p></p> <p>It seems much more promising here. The possible \\(y\\), \\(j\\), \\(f\\) values live in some \"pinhole camera\"-like space with very clear bounds!</p> <p>One dimension also seem to correspond to the equivalent demand \\(y+2j+3f\\).</p>"},{"location":"guides/demand/#hypothesis-for-algorithm","title":"Hypothesis for algorithm","text":"<p>What I think is happening here is:</p> <ol> <li>one pseudorandom value is first generated for the equivalent demand.</li> <li>two pseudorandom values are generated in \\([0, 1]\\), corresponding to how economy-like or business-like the route is</li> <li>a non-affine transformation is then applied and used to compute \\(y\\), \\(j\\), \\(f\\).</li> </ol> <p>Just to make sure step 1 is indeed the case:</p> <p></p> <p>It looks to be uniformly distributed, a great sign :)</p> <p>The two peaks (600-603 and 800-803) and the way the distribution tapers off on both sides seem suspicious.</p>"},{"location":"guides/demand/#future-work","title":"Future work","text":"<ul> <li>construct the transformation matrix that does the reverse operation</li> <li>determine if it's even possible to crack the PRNG</li> </ul> <ol> <li> <p>Back then, collecting data with automated tools was not against the TOS.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/modelling/","title":"Mathematical Modelling","text":"<p>\"The purpose of computing is insight, not numbers.\" -- Richard Hamming</p> <p>From orbiting planets to subatomic particles, equations have the power to describe and explain many phenomena we experience daily.</p> <p>As we gaze up at the skies, it's easy to take for granted the intricate dance of physics, economics, and business that makes modern air travel possible. But beneath the surface, a complex web of equations governs every aspect of aviation: from the lift and drag that propel planes through the air, to the delicate balance of supply and demand that determines ticket prices, and the air traffic management techniques that minimise flight delays. Yet, despite this complexity, there's beauty in the underlying simplicity of the equations that govern it all.</p> <p>Of course, AM4 is a massive simplification governed by very simple equations - this guide aims to familiarise you with:</p> <ul> <li>understanding the concept of linear equations</li> <li>using regression models to build theories</li> </ul> <p>Experimental</p> <p>This guide is a preview and not finalised!</p>"},{"location":"guides/modelling/#easy","title":"Easy","text":"<p>We know that ticket prices are typically more expensive for longer routes. But how can we write that as an equation?</p> <p>There are many ways to write it down, but the simplest way is a linear equation, in the form: $$ y = mx + c $$ here, \\(y\\) is called the dependent variable and \\(x\\) is called the independent variable. \\(m\\) and \\(c\\) are parameters that we hope to estimate, based on the data we collected.</p> <p>Multiplying the distance \\(x\\) by some number \\(m\\) and adding some number \\(c\\) will give us ticket price \\(y\\).</p> <p>Here is what it looks like - try dragging the two dots!</p> <p>Some observations:</p> <ul> <li>If we know the positions of the red and blue dots, namely \\((x_1, y_1)\\) and \\((x_2, y_2)\\), it would \"lock in\" to the singular black line.</li> <li>Clicking on any point in the black line will tell us the ticket price \\(y\\) for that distance \\(x\\).</li> <li>Moving the points changes \\(m\\) and \\(c\\): for instance, moving blue dot upwards will increase \\(m\\) and decrease \\(c\\).</li> </ul> <p>But how are \\(m\\) and \\(c\\) calculated, and what do they mean?</p>"},{"location":"guides/modelling/#slope-m","title":"Slope \\(m\\)","text":"<p>Imagine the line as a hill: \\(m\\) describes how steep that slope is.</p> <p>For example, \\(m=2\\) means, if you move 1 step to the right, you will ascend 2 steps upwards.</p> <p>Mathematically, we express slope as:</p> \\[ m = \\frac{\\text{rise}}{\\text{run}} = \\frac{\\text{2 steps }\\uparrow}{\\text{1 step }\\rightarrow} = 2 \\] <p>rise meaning the change in height \\(\\Delta y\\) and run meaning change in lateral distance \\(\\Delta x\\).</p> Exercise 1: At a distance of 1000km, the ticket price is \\(\\$570\\). At a distance of 2000km, the ticket price is \\(\\$970\\). What is the slope \\(m\\)? <p>The horizontal direction is distance \\(x\\), vertical direction is ticket price \\(y\\).</p> <p>Slope is how much we ascended (rise, \\(\\Delta y\\)) divided by how much we moved horizontally (run \\(\\Delta x\\)):</p> \\[ m = \\frac{\\text{rise}}{\\text{run}} = \\frac{970 - 570}{2000 - 1000} = \\frac{400}{1000} = 0.4. \\] <p>The unit for \\(m\\) is dollars per km.</p> <p>Intuitively, steeper slopes define how rapidly ticket prices change with a step in distances, which is why it is also commonly referred as the rate of change or the derivative.</p>"},{"location":"guides/modelling/#y-intercept-c","title":"Y-intercept \\(c\\)","text":"<p>The black line extends across all distances \\(x\\), and when it arrives at zero distance, the ticket price at that point is called the y-intercept.</p> <p>For example, \\(c = 0\\) means the ticket price \\(y\\) is \\(\\$0\\) when the route distance \\(x\\) is 0 km.</p> <p>To compute this, we need the generic formula \\(y=mx+c\\), a known slope \\(m\\) and a set of points \\((x_0, y_0)\\). Rearranging, we get: $$ c = y_0 - mx_0 $$</p> Exercise 2: Continuing on Exercise 1, what is the y-intercept \\(c\\)? <p>We know the slope \\(m=0.4\\), and select one point \\((1000\\text{ km}, \\$570)\\).</p> \\[ c = 570 - 0.4 \\times 1000 = 170 \\] <p>This means, at a distance of 0km, passengers will have to pay $170.</p> <p>Intuitively, if we are at an initial elevation \\(y_0\\) and descend the slope by moving left \\(\\leftarrow\\) by \\(x_0\\), we arrive at the y-intercept.</p>"},{"location":"guides/modelling/#useful-operations","title":"Useful operations","text":"<p>Generally, as long as we have two data points, we can always find \\(m\\) and \\(c\\).</p> <p>We found them in Exercises 1 and 2, which transforms distance \\(x\\) to ticket price \\(y\\).</p> \\[ y=0.4x+170 \\] <p>But we can also do the inverse, transforming ticket price \\(y\\) back into distance \\(x\\).</p> Exercise 3: Using the equation above, find the distance when the ticket price is \\(\\$6900\\). <p>Rearranging and substituting \\(y=6900\\):</p> \\[ \\begin{align*} y &amp;= 0.4x + 170 \\\\ y - 170 &amp;= 0.4x \\\\ x &amp;= \\frac{y - 170}{0.4} = \\frac{6730}{0.4} = 16825\\text{ km} \\end{align*} \\] <p>Let's try another practice:</p> Exercise 4: I gathered some data on business class ticket prices. When the distance is 1300km, the ticket price is \\(\\$1600\\). When the distance is 4200km, the ticket price is \\(\\$3920\\). What is the distance I need to fly for a ticket price of \\(\\$10000\\)? <p>We are given two points: (1000, 1600) and (4200, 3920).</p> <p>The equation \\(y=mx+c\\) needs \\(m\\) and \\(c\\) to be found:</p> \\[ \\begin{align*}     m &amp;= \\frac{y_2-y_1}{x_2-x_1} \\\\     &amp;= \\frac{3920 - 1600}{4200 - 1300} \\\\     &amp;= 2320/2900 = 0.8 \\end{align*} \\] \\[ \\begin{align*}     c &amp;= y_0 - mx_0 \\\\     &amp;= 1600 - 0.8 \\times 1300 = 560 \\end{align*} \\] <p>So the equation is \\(y=0.8x+560\\) and we need to rearrange to solve x:</p> \\[ x = \\frac{y-560}{0.8} = \\frac{10000-560}{0.8} = 11800\\text{ km} \\] <p>Notice that the slope \\(0.8\\) is twice the economy class of \\(0.4\\), suggesting that the business class ticket prices grow twice as fast as economy classes!</p> Exercise 5: We've found the economy and business class ticket price equations in Exercises 2 and 4. But consider: 1 business class takes up 2 economy class tickets. Which gives more profit per 'space'? <p>Dividing the business class ticket price by 2:</p> \\[ \\begin{align*}     y_{\\text{economy}} &amp;= 0.4x+170 \\\\     y_{\\text{business}} &amp;= \\frac{0.8x+560}{2} = 0.4x+280 \\end{align*} \\] <p>Here, the slope \\(m\\) of the economy and business class ticket prices are both \\(0.4\\) - meaning they grow at the same rate.</p> <p>The difference lies in the y-intercept \\(c\\): at a distance of zero, business class pays \\(\\$280\\) while economy class pays \\(\\$170\\). So business class will always overperform economy class.</p>"},{"location":"guides/modelling/#summary","title":"Summary","text":"<ul> <li>A linear function \\(y=mx+c\\) describes the relationship between \\(y\\) and \\(x\\)</li> <li>slope \\(m\\) and y-intercept \\(c\\) are calculated from two points, \\((x_0, y_0)\\) and \\((x_1, y_1)\\):<ul> <li>\\(m = \\frac{\\text{rise}}{\\text{run}} = \\frac{y_1-y_0}{x_1-x_0}\\) describes the rate of change of the slope</li> <li>\\(c = y_0-mx_0\\) is the value \\(y\\) when \\(x=0\\)</li> </ul> </li> </ul>"},{"location":"guides/modelling/#intermediate","title":"Intermediate","text":"<p>In the previous section, we know a linear equation can be written in the form \\(y=mx+c\\). We could certainly find \\(m\\) and \\(c\\) from 2 points, but AM4 often gives you a noisy version of the data.</p> <p>For example, departing a plane contributes to your alliance - but that value is randomly offset by some value, meaning if we had just used \\(m=\\frac{y_1-y_0}{x_1-x_0}\\), it would yield different results every single time. We want generalised equations that best capture the relationship.</p> <p>Fortunately, we can gather data points, and use regression to find the line of best fit.</p> <p>In Excel, you can always create a scatter plot for a dataset, then quickly find the optimum \\(m\\) and \\(c\\). Python can do it similarly with one line of code. But it is always fun to understand how it works behind the hood - it is yet another simple equation!</p> <p>I assume you have some basic knowledge of linear algebra (I highly recommend the 3b1b series if you are not familiar with it)</p>"},{"location":"guides/modelling/#regression","title":"Regression","text":"<p>Say we have three data points \\(A(1,1)\\), \\(B(2, 3)\\), \\(C(3, 2)\\) and assume some linear line \\(y=mx+c\\) that passes through them.</p> <p>We have:</p> \\[ \\begin{align*} 1 &amp;= m\\times1+c \\\\ 3 &amp;= m\\times2+c \\\\ 2 &amp;= m\\times3+c \\end{align*} \\] <p>The goal is to find \\(m\\) and \\(c\\) that satisfy all three equations.</p> <p>We can try to calculate the slope for the first two points: \\(m = \\frac{3-1}{2-1} = 2\\), and y-intercept \\(c = 1-2\\times1 = -1\\). But substitute that into the third equation: \\(2\\times3 - 1 = 5\\), which is clearly not \\(2\\) - we call this inconsistent.</p> <p>In fact, we have 3 linearly independent equations and 2 unknowns - no combination of \\(m\\) and \\(c\\) will possibly satisfy all three equations. We call this an overdetermined system of equations because there are more equations than unknowns.</p>"},{"location":"guides/modelling/#matrices","title":"Matrices","text":"<p>It is convenient to rewrite the equations in matrix form:</p> \\[ \\underbrace{ \\begin{bmatrix} 1 &amp; 1 \\\\ 1 &amp; 2 \\\\ 1 &amp; 3 \\end{bmatrix} }_{\\mathbf{A}} \\underbrace{ \\begin{bmatrix} m \\\\ c \\end{bmatrix} }_{\\mathbf{x}} = \\underbrace{ \\begin{bmatrix} 1 \\\\ 3 \\\\ 2 \\end{bmatrix} }_{\\mathbf{b}} \\] <p>Intuitively, multiplying \\(\\mathbf{A}\\) by \\(\\mathbf{x}\\) effectively applies a 3D transformation to a 2D point, to get the final point \\(\\mathbf{b}\\). Now what does \\(\\mathbf{A}\\) physically mean?</p> <p>There are two columns in this matrix: \\([1 1 1]^\\top\\) and \\([1 2 3]^\\top\\). The first column tells me that (1, 0) in 2D space should move to (1, 1, 1) in 3D space. Similarly, (0, 1) moves to (1, 2, 3). This matrix essentially prescribes how to transform from our inputs to our outputs (see 3b1b's visualisation here).</p> <p>So, the question is - what point \\(\\mathbf{x}(m, c)\\) in the input space, after the 3D transformation, will get me to \\(\\mathbf{b}(1, 3, 2)\\)?</p>"},{"location":"guides/modelling/#inverse","title":"Inverse","text":"<p>Well, what if we could invert the \\(\\mathbf{A}\\) transformation on \\(\\mathbf{x}\\)? If we multiply can both sides by \\(\\mathbf{A}^{-1}\\), we would get \\(\\mathbf{A}^{-1}\\mathbf{A}\\mathbf{x}=\\mathbf{A}^{-1}\\mathbf{b}\\). (notice that \\(\\mathbf{A}^{-1}\\mathbf{A}\\) performs the transformation then undo it, so effectively it does nothing: the identity matrix \\(\\mathbf{I}\\)). Cancelling, we have the solution \\(\\mathbf{x}=\\mathbf{A}^{-1}\\mathbf{b}\\)!</p> <p>But here's the thing, matrices are conventionally only invertible if the number of rows matches the number of columns. A \\(3\\times 2\\) matrix \\(\\mathbf{A}\\) with full column rank (i.e. all columns are linearly independent) defines a 2D \"sheet of paper\" in 3D space!</p>"},{"location":"guides/modelling/#normal-equation","title":"Normal equation","text":"<p>Now, what can we do instead? We can find the left inverse of \\(\\mathbf{A}\\) instead. We can take the transpose of \\(\\mathbf{A}\\) on both sides of the equation:</p> \\[ \\mathbf{A}^\\top \\mathbf{A} \\mathbf{x} = \\mathbf{A}^\\top \\mathbf{b} \\] <p>By taking the transpose of \\(\\mathbf{A}\\), we're essentially \"flipping\" the matrix, so that the rows become columns and vice versa. This creates a new matrix \\(\\mathbf{A}^\\top \\mathbf{A}\\), which is symmetric and, more importantly, invertible!</p> <p>Now, we can multiply both sides by the inverse of \\(\\mathbf{A}^\\top \\mathbf{A}\\), which is denoted as \\((\\mathbf{A}^\\top \\mathbf{A})^{-1}\\). This gives us:</p> \\[ \\mathbf{x} = \\underbrace{(\\mathbf{A}^\\top \\mathbf{A})^{-1} \\mathbf{A}^\\top}_{\\text{left inverse }\\mathbf{A}^{-1}}\\mathbf{b} \\] <p>This is known as the normal equation, and it provides the best possible approximation of the solution \\(\\mathbf{x}\\) in the sense of minimizing the least squares error.</p> <p>Now let's return to our example, with \\(\\mathbf{A} = \\begin{bmatrix}1 &amp; 1 \\\\1 &amp; 2 \\\\1 &amp; 3\\end{bmatrix}\\) and find its left inverse:</p> <ul> <li>Find \\(\\mathbf{A}^\\top \\mathbf{A}\\), the Gram matrix:</li> </ul> \\[ \\begin{align*} \\begin{bmatrix}1 &amp; 1 &amp; 1 \\\\ 1 &amp; 2 &amp; 3\\end{bmatrix}\\begin{bmatrix}1 &amp; 1 \\\\1 &amp; 2 \\\\1 &amp; 3\\end{bmatrix}&amp;=\\begin{bmatrix}1(1)+1(1)+1(1) &amp; 1(1)+1(2)+1(3) \\\\ 1(1)+2(1)+3(1) &amp; 1(1)+2(2)+3(3)\\end{bmatrix} \\\\ &amp;= \\begin{bmatrix}     3 &amp; 6 \\\\     6 &amp; 14 \\end{bmatrix} \\end{align*} \\] <ul> <li>Take its inverse, recalling the formula for \\(2\\times2\\) matrices, using its determinant \\(\\text{det}(\\mathbf{A})\\):</li> </ul> \\[ \\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix}^{-1} = \\frac{1}{ad - bc}\\begin{bmatrix} d &amp; -b \\\\ -c &amp; a \\end{bmatrix} \\] \\[ (\\mathbf{A}^\\top \\mathbf{A})^{-1} = \\frac{1}{3(14) - 6(6)} \\begin{bmatrix} 14 &amp; -6 \\\\ -6 &amp; 3 \\end{bmatrix} = \\frac{1}{6} \\begin{bmatrix} 14 &amp; -6 \\\\ -6 &amp; 3 \\end{bmatrix} = \\begin{bmatrix} \\frac{7}{3} &amp; -1 \\\\ -1 &amp; \\frac{1}{2} \\end{bmatrix} \\] <ul> <li>Now, multiply that by \\(A^\\top\\) to get \\(\\mathbf{A}^{-1}\\):</li> </ul> \\[ (\\mathbf{A}^\\top \\mathbf{A})^{-1} \\mathbf{A}^\\top = \\begin{bmatrix} \\frac{7}{3} &amp; -1 \\\\ -1 &amp; \\frac{1}{2} \\end{bmatrix} \\begin{bmatrix} 1 &amp; 1 &amp; 1 \\\\ 1 &amp; 2 &amp; 3 \\end{bmatrix} = \\begin{bmatrix} -\\frac{1}{3} &amp; \\frac{1}{3} &amp; 1 \\\\ \\frac{1}{2} &amp; 0 &amp; -\\frac{1}{2} \\end{bmatrix} \\] <ul> <li>finally, multiply it with \\(\\mathbf{b}=\\begin{bmatrix}1\\\\3\\\\2\\end{bmatrix}\\):</li> </ul> \\[ \\mathbf{x} = \\mathbf{A}^{-1} \\mathbf{b} = \\begin{bmatrix} \\frac{4}{3} &amp; \\frac{1}{3} &amp; -\\frac{2}{3} \\\\ -\\frac{1}{2} &amp; 0 &amp; \\frac{1}{2} \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 3 \\\\ 2 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ \\frac{1}{2} \\end{bmatrix} \\] <p>The line of best fit is thus \\(y=x+\\frac{1}{2}\\).</p> Exercise 6: Implement the normal equation in Python, writing a function that takes in a list of \\(x\\) and corresponding \\(y\\), returning \\(m\\) and \\(c\\). Use <code>numpy</code>. <p>Recall \\(\\mathbf{x}=(\\mathbf{A}^\\top\\mathbf{A})^{-1}\\mathbf{A}^\\top\\mathbf{b}\\).</p> <pre><code>import numpy as np\n\ndef lobf(xs: list[float], ys: list[float]) -&gt; tuple[float, float]:\n    A = np.array([np.ones_like(xs), xs]).T\n    b = np.array(ys)\n    return tuple(np.linalg.inv(A.T @ A) @ A.T @ b)\n</code></pre> <p>Verifying that our implementation is indeed correct: <pre><code>&gt;&gt;&gt; xs = [1,2,3]\n&gt;&gt;&gt; ys = [1,3,2]\n&gt;&gt;&gt; lobf(xs, ys)\n(1, 0.5)\n&gt;&gt;&gt; np.polyfit(xs, ys, 1)\narray([0.5, 1. ])\n</code></pre></p>"},{"location":"guides/modelling/#multiple-linear-regression","title":"Multiple Linear Regression","text":"<p>The normal equation can also be extended to perform multiple linear regression, i.e. \\(y=\\beta_0 x_0 + \\beta_1 x_1 + ... + \\beta_m x_m\\) with \\(m\\) predictor variables.</p> \\[ \\mathbf{x}=(\\mathbf{A}^\\top\\mathbf{A})^{-1}\\mathbf{A}^\\top\\mathbf{b} \\] <p>\\(\\mathbf{A}\\) is called the design matrix with size \\(n \\times m+1\\). It would look like:</p> \\[ \\underbrace{     \\begin{bmatrix}     \\rule[-1ex]{0.5pt}{2.5ex} &amp; \\rule[-1ex]{0.5pt}{2.5ex} &amp; \\rule[-1ex]{0.5pt}{2.5ex} &amp; &amp; \\rule[-1ex]{0.5pt}{2.5ex} \\\\     1 &amp; x_1 &amp; x_2 &amp; \\ldots &amp; x_m \\\\     \\rule[-1ex]{0.5pt}{2.5ex} &amp; \\rule[-1ex]{0.5pt}{2.5ex} &amp; \\rule[-1ex]{0.5pt}{2.5ex} &amp; &amp; \\rule[-1ex]{0.5pt}{2.5ex} \\\\     \\end{bmatrix} }_{\\text{m\\text{ predictor variables}}} \\] <p>For example, if we hypothesise the contribution to be some linear combination of distance and CI, and want to figure out the exact formula, we should:</p> <ol> <li>Write the equation as: \\(\\text{contribution} = \\beta_0 + \\beta_1 \\cdot \\text{distance} + \\beta_2 \\cdot \\text{CI}\\),</li> <li>Collect samples of \\((\\text{distance}, \\text{CI}, \\text{contribution})\\) and rewrite it in the design matrix \\(\\mathbf{A}\\) and true values \\(\\mathbf{b}\\),</li> <li>Evaluate the normal equation and solving for \\(\\mathbf{x}\\) will give \\(\\begin{bmatrix}\\beta_0 \\\\ \\beta_1 \\\\ \\beta_2\\end{bmatrix}\\).</li> </ol>"},{"location":"guides/modelling/#summary_1","title":"Summary","text":"<p>Most formulae in the game can be described as:</p> <ul> <li>\\(y=\\beta_0 + \\beta_1 x_1 + \\ldots + \\beta_m x_m\\)</li> <li>we should collect many sets of \\((x_1, \\dots, x_m, y)\\) samples and compute \\((\\mathbf{A}^\\top\\mathbf{A})^{-1}\\mathbf{A}^\\top\\mathbf{b}\\)<ul> <li>Excel, Desmos and <code>numpy</code> are great tools to do it automatically</li> </ul> </li> <li>usually, \\(y\\) is dependent on only one or two variables<ul> <li>Occam's razor suggests equations should be as simple as possible.</li> <li>if you perform MLR, the \\(\\beta\\) for redundant independent variables should be zero.</li> </ul> </li> </ul> <p>Formulae can also sometimes be non-linear (e.g. contribution), possibly in the form \\(z=xy\\) or \\(e^{x}\\sin(y)\\). In that case, when collecting data, we should isolate one variable and investigate relationships independently.</p>"},{"location":"guides/preface/","title":"Preface","text":"<p>I still remember the typical morning in my middle school classroom in 2017. My eyes would fixate on the clock, counting down the seconds until the bell would ring at 10:41:18. Recess time meant it was time to open AM2, click the depart button, and strategise which aircraft to purchase. I always managed my planes in Excel - learning and piecing together the <code>VLOOKUP</code>, <code>MATCH</code>, <code>INDEX</code> functions were always the fun puzzle to solve.</p> <p>AM2 had a very simple game loop: routing to a specific set of airports will guarantee maximum profit. The game guides had very formulaic steps to help you grow - it felt like following an instruction manual and replicating it. Worse yet, your airline's growth would eventually reach a plateau and clicking the depart button felt like the annoying daily chore. AM3 was similarly uneventful and I lost interest quickly.</p> <p>Fast forward Christmas 2019, I found myself competing with my friend in AM4. The game mechanics were a breath of fresh air: progressing in the game felt a lot like an explorer trekking through uncharted territory. Everything, ranging from stopover finding to optimal hubs and alliance contribution, was a mystery waiting to be solved.</p> <p>I had been developing a stopover finder directly in Excel - I still remember first publishing it to the community and being amazed by the sheer amount of positivity from everyone. It inspired me to build more ambitious things, am4help, am4bot... AM4 was the sole reason I found my interest in programming and data analysis.</p> <p>Though I've stopped playing since 2022 to focus on my journey in university, looking back, AM4 is much more than a simple game: the mathematical / programming concepts you learn are really interesting and satisfying! I hope to inspire technically inclined players to develop their own algorithms and explore concepts beyond the classroom :)</p>"},{"location":"guides/preface/#structure","title":"Structure","text":"<p>The guides written here are mostly written for our alliance back in 2020-21 (ranked #1 for multiple months). They are technical by nature and can be mathematically demanding. However, I've tried to simplify them - each guide will roughly have three levels:</p> <ul> <li>Easy (&lt;8th grade)</li> <li>Intermediate (9-10th grade)</li> <li>Advanced (&gt;10th grade)</li> </ul> <p>Some concepts we will explore:</p> <ul> <li>finding and exploiting formulae in the game: regression and derivatives</li> <li>how to allocate seats to aircraft</li> </ul> <p>Parts still under revision:</p> <ul> <li>basic intro to the game</li> <li>route searching and optimisation</li> <li>hub searching</li> </ul>"}]}